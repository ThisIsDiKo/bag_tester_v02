
bag_tester_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006968  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  20000000  0800700c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054a8  20000108  08007114  00020108  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200055b0  08007114  000255b0  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029f4a  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006437  00000000  00000000  0004a07b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e1fb  00000000  00000000  000504b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001458  00000000  00000000  0005e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000017c8  00000000  00000000  0005fb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000cf6e  00000000  00000000  000612d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000073eb  00000000  00000000  0006e23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00075629  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000443c  00000000  00000000  000756a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000108 	.word	0x20000108
 800020c:	00000000 	.word	0x00000000
 8000210:	08006b40 	.word	0x08006b40

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000010c 	.word	0x2000010c
 800022c:	08006b40 	.word	0x08006b40

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	bf14      	ite	ne
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e720      	b.n	8000374 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aedc 	beq.w	8000322 <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6c1      	b.n	8000322 <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	d1ed      	bne.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_fmul>:
 8000c30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c38:	bf1e      	ittt	ne
 8000c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c3e:	ea92 0f0c 	teqne	r2, ip
 8000c42:	ea93 0f0c 	teqne	r3, ip
 8000c46:	d06f      	beq.n	8000d28 <__aeabi_fmul+0xf8>
 8000c48:	441a      	add	r2, r3
 8000c4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c4e:	0240      	lsls	r0, r0, #9
 8000c50:	bf18      	it	ne
 8000c52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c56:	d01e      	beq.n	8000c96 <__aeabi_fmul+0x66>
 8000c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c64:	fba0 3101 	umull	r3, r1, r0, r1
 8000c68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c70:	bf3e      	ittt	cc
 8000c72:	0049      	lslcc	r1, r1, #1
 8000c74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c78:	005b      	lslcc	r3, r3, #1
 8000c7a:	ea40 0001 	orr.w	r0, r0, r1
 8000c7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c82:	2afd      	cmp	r2, #253	; 0xfd
 8000c84:	d81d      	bhi.n	8000cc2 <__aeabi_fmul+0x92>
 8000c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	4770      	bx	lr
 8000c96:	f090 0f00 	teq	r0, #0
 8000c9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c9e:	bf08      	it	eq
 8000ca0:	0249      	lsleq	r1, r1, #9
 8000ca2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000caa:	3a7f      	subs	r2, #127	; 0x7f
 8000cac:	bfc2      	ittt	gt
 8000cae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cb2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cb6:	4770      	bxgt	lr
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	dc5d      	bgt.n	8000d80 <__aeabi_fmul+0x150>
 8000cc4:	f112 0f19 	cmn.w	r2, #25
 8000cc8:	bfdc      	itt	le
 8000cca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cce:	4770      	bxle	lr
 8000cd0:	f1c2 0200 	rsb	r2, r2, #0
 8000cd4:	0041      	lsls	r1, r0, #1
 8000cd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cda:	f1c2 0220 	rsb	r2, r2, #32
 8000cde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ce6:	f140 0000 	adc.w	r0, r0, #0
 8000cea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cee:	bf08      	it	eq
 8000cf0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf4:	4770      	bx	lr
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0040      	lsleq	r0, r0, #1
 8000d02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d06:	3a01      	subeq	r2, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xce>
 8000d0a:	ea40 000c 	orr.w	r0, r0, ip
 8000d0e:	f093 0f00 	teq	r3, #0
 8000d12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0049      	lsleq	r1, r1, #1
 8000d1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d1e:	3b01      	subeq	r3, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fmul+0xe6>
 8000d22:	ea41 010c 	orr.w	r1, r1, ip
 8000d26:	e78f      	b.n	8000c48 <__aeabi_fmul+0x18>
 8000d28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	bf18      	it	ne
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d00a      	beq.n	8000d4e <__aeabi_fmul+0x11e>
 8000d38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d3c:	bf18      	it	ne
 8000d3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d42:	d1d8      	bne.n	8000cf6 <__aeabi_fmul+0xc6>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f090 0f00 	teq	r0, #0
 8000d52:	bf17      	itett	ne
 8000d54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d58:	4608      	moveq	r0, r1
 8000d5a:	f091 0f00 	teqne	r1, #0
 8000d5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d62:	d014      	beq.n	8000d8e <__aeabi_fmul+0x15e>
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	d101      	bne.n	8000d6e <__aeabi_fmul+0x13e>
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	d10f      	bne.n	8000d8e <__aeabi_fmul+0x15e>
 8000d6e:	ea93 0f0c 	teq	r3, ip
 8000d72:	d103      	bne.n	8000d7c <__aeabi_fmul+0x14c>
 8000d74:	024b      	lsls	r3, r1, #9
 8000d76:	bf18      	it	ne
 8000d78:	4608      	movne	r0, r1
 8000d7a:	d108      	bne.n	8000d8e <__aeabi_fmul+0x15e>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8c:	4770      	bx	lr
 8000d8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fdiv>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d069      	beq.n	8000e84 <__aeabi_fdiv+0xec>
 8000db0:	eba2 0203 	sub.w	r2, r2, r3
 8000db4:	ea80 0c01 	eor.w	ip, r0, r1
 8000db8:	0249      	lsls	r1, r1, #9
 8000dba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dbe:	d037      	beq.n	8000e30 <__aeabi_fdiv+0x98>
 8000dc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dc8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	bf38      	it	cc
 8000dd4:	005b      	lslcc	r3, r3, #1
 8000dd6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dde:	428b      	cmp	r3, r1
 8000de0:	bf24      	itt	cs
 8000de2:	1a5b      	subcs	r3, r3, r1
 8000de4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000de8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dec:	bf24      	itt	cs
 8000dee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000df2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000df6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dfa:	bf24      	itt	cs
 8000dfc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e08:	bf24      	itt	cs
 8000e0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	bf18      	it	ne
 8000e16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e1a:	d1e0      	bne.n	8000dde <__aeabi_fdiv+0x46>
 8000e1c:	2afd      	cmp	r2, #253	; 0xfd
 8000e1e:	f63f af50 	bhi.w	8000cc2 <__aeabi_fmul+0x92>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e28:	bf08      	it	eq
 8000e2a:	f020 0001 	biceq.w	r0, r0, #1
 8000e2e:	4770      	bx	lr
 8000e30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e38:	327f      	adds	r2, #127	; 0x7f
 8000e3a:	bfc2      	ittt	gt
 8000e3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e44:	4770      	bxgt	lr
 8000e46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	3a01      	subs	r2, #1
 8000e50:	e737      	b.n	8000cc2 <__aeabi_fmul+0x92>
 8000e52:	f092 0f00 	teq	r2, #0
 8000e56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0040      	lsleq	r0, r0, #1
 8000e5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e62:	3a01      	subeq	r2, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xc2>
 8000e66:	ea40 000c 	orr.w	r0, r0, ip
 8000e6a:	f093 0f00 	teq	r3, #0
 8000e6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0049      	lsleq	r1, r1, #1
 8000e76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7a:	3b01      	subeq	r3, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fdiv+0xda>
 8000e7e:	ea41 010c 	orr.w	r1, r1, ip
 8000e82:	e795      	b.n	8000db0 <__aeabi_fdiv+0x18>
 8000e84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d108      	bne.n	8000ea0 <__aeabi_fdiv+0x108>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	f47f af7d 	bne.w	8000d8e <__aeabi_fmul+0x15e>
 8000e94:	ea93 0f0c 	teq	r3, ip
 8000e98:	f47f af70 	bne.w	8000d7c <__aeabi_fmul+0x14c>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e776      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000ea0:	ea93 0f0c 	teq	r3, ip
 8000ea4:	d104      	bne.n	8000eb0 <__aeabi_fdiv+0x118>
 8000ea6:	024b      	lsls	r3, r1, #9
 8000ea8:	f43f af4c 	beq.w	8000d44 <__aeabi_fmul+0x114>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e76e      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000eb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb4:	bf18      	it	ne
 8000eb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eba:	d1ca      	bne.n	8000e52 <__aeabi_fdiv+0xba>
 8000ebc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec0:	f47f af5c 	bne.w	8000d7c <__aeabi_fmul+0x14c>
 8000ec4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ec8:	f47f af3c 	bne.w	8000d44 <__aeabi_fmul+0x114>
 8000ecc:	e75f      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000ece:	bf00      	nop

08000ed0 <__gesf2>:
 8000ed0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ed4:	e006      	b.n	8000ee4 <__cmpsf2+0x4>
 8000ed6:	bf00      	nop

08000ed8 <__lesf2>:
 8000ed8:	f04f 0c01 	mov.w	ip, #1
 8000edc:	e002      	b.n	8000ee4 <__cmpsf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__cmpsf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ee8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ef0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ef4:	bf18      	it	ne
 8000ef6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000efa:	d011      	beq.n	8000f20 <__cmpsf2+0x40>
 8000efc:	b001      	add	sp, #4
 8000efe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f02:	bf18      	it	ne
 8000f04:	ea90 0f01 	teqne	r0, r1
 8000f08:	bf58      	it	pl
 8000f0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f0e:	bf88      	it	hi
 8000f10:	17c8      	asrhi	r0, r1, #31
 8000f12:	bf38      	it	cc
 8000f14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f18:	bf18      	it	ne
 8000f1a:	f040 0001 	orrne.w	r0, r0, #1
 8000f1e:	4770      	bx	lr
 8000f20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f24:	d102      	bne.n	8000f2c <__cmpsf2+0x4c>
 8000f26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f2a:	d105      	bne.n	8000f38 <__cmpsf2+0x58>
 8000f2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f30:	d1e4      	bne.n	8000efc <__cmpsf2+0x1c>
 8000f32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f36:	d0e1      	beq.n	8000efc <__cmpsf2+0x1c>
 8000f38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <__aeabi_cfrcmple>:
 8000f40:	4684      	mov	ip, r0
 8000f42:	4608      	mov	r0, r1
 8000f44:	4661      	mov	r1, ip
 8000f46:	e7ff      	b.n	8000f48 <__aeabi_cfcmpeq>

08000f48 <__aeabi_cfcmpeq>:
 8000f48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f4a:	f7ff ffc9 	bl	8000ee0 <__cmpsf2>
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	bf48      	it	mi
 8000f52:	f110 0f00 	cmnmi.w	r0, #0
 8000f56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f58 <__aeabi_fcmpeq>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff fff4 	bl	8000f48 <__aeabi_cfcmpeq>
 8000f60:	bf0c      	ite	eq
 8000f62:	2001      	moveq	r0, #1
 8000f64:	2000      	movne	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmplt>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffea 	bl	8000f48 <__aeabi_cfcmpeq>
 8000f74:	bf34      	ite	cc
 8000f76:	2001      	movcc	r0, #1
 8000f78:	2000      	movcs	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmple>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffe0 	bl	8000f48 <__aeabi_cfcmpeq>
 8000f88:	bf94      	ite	ls
 8000f8a:	2001      	movls	r0, #1
 8000f8c:	2000      	movhi	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_fcmpge>:
 8000f94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f98:	f7ff ffd2 	bl	8000f40 <__aeabi_cfrcmple>
 8000f9c:	bf94      	ite	ls
 8000f9e:	2001      	movls	r0, #1
 8000fa0:	2000      	movhi	r0, #0
 8000fa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_fcmpgt>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff ffc8 	bl	8000f40 <__aeabi_cfrcmple>
 8000fb0:	bf34      	ite	cc
 8000fb2:	2001      	movcc	r0, #1
 8000fb4:	2000      	movcs	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_f2iz>:
 8000fbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc4:	d30f      	bcc.n	8000fe6 <__aeabi_f2iz+0x2a>
 8000fc6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fce:	d90d      	bls.n	8000fec <__aeabi_f2iz+0x30>
 8000fd0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fdc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe0:	bf18      	it	ne
 8000fe2:	4240      	negne	r0, r0
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff0:	d101      	bne.n	8000ff6 <__aeabi_f2iz+0x3a>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	d105      	bne.n	8001002 <__aeabi_f2iz+0x46>
 8000ff6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ffa:	bf08      	it	eq
 8000ffc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr

08001008 <__aeabi_f2uiz>:
 8001008:	0042      	lsls	r2, r0, #1
 800100a:	d20e      	bcs.n	800102a <__aeabi_f2uiz+0x22>
 800100c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001010:	d30b      	bcc.n	800102a <__aeabi_f2uiz+0x22>
 8001012:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001016:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101a:	d409      	bmi.n	8001030 <__aeabi_f2uiz+0x28>
 800101c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001024:	fa23 f002 	lsr.w	r0, r3, r2
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr
 8001030:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001034:	d101      	bne.n	800103a <__aeabi_f2uiz+0x32>
 8001036:	0242      	lsls	r2, r0, #9
 8001038:	d102      	bne.n	8001040 <__aeabi_f2uiz+0x38>
 800103a:	f04f 30ff 	mov.w	r0, #4294967295
 800103e:	4770      	bx	lr
 8001040:	f04f 0000 	mov.w	r0, #0
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_uldivmod>:
 8001048:	b953      	cbnz	r3, 8001060 <__aeabi_uldivmod+0x18>
 800104a:	b94a      	cbnz	r2, 8001060 <__aeabi_uldivmod+0x18>
 800104c:	2900      	cmp	r1, #0
 800104e:	bf08      	it	eq
 8001050:	2800      	cmpeq	r0, #0
 8001052:	bf1c      	itt	ne
 8001054:	f04f 31ff 	movne.w	r1, #4294967295
 8001058:	f04f 30ff 	movne.w	r0, #4294967295
 800105c:	f000 b97a 	b.w	8001354 <__aeabi_idiv0>
 8001060:	f1ad 0c08 	sub.w	ip, sp, #8
 8001064:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001068:	f000 f806 	bl	8001078 <__udivmoddi4>
 800106c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr

08001078 <__udivmoddi4>:
 8001078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	468c      	mov	ip, r1
 800107e:	460e      	mov	r6, r1
 8001080:	4604      	mov	r4, r0
 8001082:	9d08      	ldr	r5, [sp, #32]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d150      	bne.n	800112a <__udivmoddi4+0xb2>
 8001088:	428a      	cmp	r2, r1
 800108a:	4617      	mov	r7, r2
 800108c:	d96c      	bls.n	8001168 <__udivmoddi4+0xf0>
 800108e:	fab2 fe82 	clz	lr, r2
 8001092:	f1be 0f00 	cmp.w	lr, #0
 8001096:	d00b      	beq.n	80010b0 <__udivmoddi4+0x38>
 8001098:	f1ce 0c20 	rsb	ip, lr, #32
 800109c:	fa01 f60e 	lsl.w	r6, r1, lr
 80010a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010a4:	fa02 f70e 	lsl.w	r7, r2, lr
 80010a8:	ea4c 0c06 	orr.w	ip, ip, r6
 80010ac:	fa00 f40e 	lsl.w	r4, r0, lr
 80010b0:	0c3a      	lsrs	r2, r7, #16
 80010b2:	fbbc f9f2 	udiv	r9, ip, r2
 80010b6:	b2bb      	uxth	r3, r7
 80010b8:	fb02 cc19 	mls	ip, r2, r9, ip
 80010bc:	fb09 fa03 	mul.w	sl, r9, r3
 80010c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80010c4:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80010c8:	45b2      	cmp	sl, r6
 80010ca:	d90a      	bls.n	80010e2 <__udivmoddi4+0x6a>
 80010cc:	19f6      	adds	r6, r6, r7
 80010ce:	f109 31ff 	add.w	r1, r9, #4294967295
 80010d2:	f080 8125 	bcs.w	8001320 <__udivmoddi4+0x2a8>
 80010d6:	45b2      	cmp	sl, r6
 80010d8:	f240 8122 	bls.w	8001320 <__udivmoddi4+0x2a8>
 80010dc:	f1a9 0902 	sub.w	r9, r9, #2
 80010e0:	443e      	add	r6, r7
 80010e2:	eba6 060a 	sub.w	r6, r6, sl
 80010e6:	fbb6 f0f2 	udiv	r0, r6, r2
 80010ea:	fb02 6610 	mls	r6, r2, r0, r6
 80010ee:	fb00 f303 	mul.w	r3, r0, r3
 80010f2:	b2a4      	uxth	r4, r4
 80010f4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80010f8:	42a3      	cmp	r3, r4
 80010fa:	d909      	bls.n	8001110 <__udivmoddi4+0x98>
 80010fc:	19e4      	adds	r4, r4, r7
 80010fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8001102:	f080 810b 	bcs.w	800131c <__udivmoddi4+0x2a4>
 8001106:	42a3      	cmp	r3, r4
 8001108:	f240 8108 	bls.w	800131c <__udivmoddi4+0x2a4>
 800110c:	3802      	subs	r0, #2
 800110e:	443c      	add	r4, r7
 8001110:	2100      	movs	r1, #0
 8001112:	1ae4      	subs	r4, r4, r3
 8001114:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001118:	2d00      	cmp	r5, #0
 800111a:	d062      	beq.n	80011e2 <__udivmoddi4+0x16a>
 800111c:	2300      	movs	r3, #0
 800111e:	fa24 f40e 	lsr.w	r4, r4, lr
 8001122:	602c      	str	r4, [r5, #0]
 8001124:	606b      	str	r3, [r5, #4]
 8001126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112a:	428b      	cmp	r3, r1
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0xc6>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d055      	beq.n	80011de <__udivmoddi4+0x166>
 8001132:	2100      	movs	r1, #0
 8001134:	e885 0041 	stmia.w	r5, {r0, r6}
 8001138:	4608      	mov	r0, r1
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113e:	fab3 f183 	clz	r1, r3
 8001142:	2900      	cmp	r1, #0
 8001144:	f040 808f 	bne.w	8001266 <__udivmoddi4+0x1ee>
 8001148:	42b3      	cmp	r3, r6
 800114a:	d302      	bcc.n	8001152 <__udivmoddi4+0xda>
 800114c:	4282      	cmp	r2, r0
 800114e:	f200 80fc 	bhi.w	800134a <__udivmoddi4+0x2d2>
 8001152:	1a84      	subs	r4, r0, r2
 8001154:	eb66 0603 	sbc.w	r6, r6, r3
 8001158:	2001      	movs	r0, #1
 800115a:	46b4      	mov	ip, r6
 800115c:	2d00      	cmp	r5, #0
 800115e:	d040      	beq.n	80011e2 <__udivmoddi4+0x16a>
 8001160:	e885 1010 	stmia.w	r5, {r4, ip}
 8001164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001168:	b912      	cbnz	r2, 8001170 <__udivmoddi4+0xf8>
 800116a:	2701      	movs	r7, #1
 800116c:	fbb7 f7f2 	udiv	r7, r7, r2
 8001170:	fab7 fe87 	clz	lr, r7
 8001174:	f1be 0f00 	cmp.w	lr, #0
 8001178:	d135      	bne.n	80011e6 <__udivmoddi4+0x16e>
 800117a:	2101      	movs	r1, #1
 800117c:	1bf6      	subs	r6, r6, r7
 800117e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001182:	fa1f f887 	uxth.w	r8, r7
 8001186:	fbb6 f2fc 	udiv	r2, r6, ip
 800118a:	fb0c 6612 	mls	r6, ip, r2, r6
 800118e:	fb08 f002 	mul.w	r0, r8, r2
 8001192:	0c23      	lsrs	r3, r4, #16
 8001194:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001198:	42b0      	cmp	r0, r6
 800119a:	d907      	bls.n	80011ac <__udivmoddi4+0x134>
 800119c:	19f6      	adds	r6, r6, r7
 800119e:	f102 33ff 	add.w	r3, r2, #4294967295
 80011a2:	d202      	bcs.n	80011aa <__udivmoddi4+0x132>
 80011a4:	42b0      	cmp	r0, r6
 80011a6:	f200 80d2 	bhi.w	800134e <__udivmoddi4+0x2d6>
 80011aa:	461a      	mov	r2, r3
 80011ac:	1a36      	subs	r6, r6, r0
 80011ae:	fbb6 f0fc 	udiv	r0, r6, ip
 80011b2:	fb0c 6610 	mls	r6, ip, r0, r6
 80011b6:	fb08 f800 	mul.w	r8, r8, r0
 80011ba:	b2a3      	uxth	r3, r4
 80011bc:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80011c0:	45a0      	cmp	r8, r4
 80011c2:	d907      	bls.n	80011d4 <__udivmoddi4+0x15c>
 80011c4:	19e4      	adds	r4, r4, r7
 80011c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80011ca:	d202      	bcs.n	80011d2 <__udivmoddi4+0x15a>
 80011cc:	45a0      	cmp	r8, r4
 80011ce:	f200 80b9 	bhi.w	8001344 <__udivmoddi4+0x2cc>
 80011d2:	4618      	mov	r0, r3
 80011d4:	eba4 0408 	sub.w	r4, r4, r8
 80011d8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80011dc:	e79c      	b.n	8001118 <__udivmoddi4+0xa0>
 80011de:	4629      	mov	r1, r5
 80011e0:	4628      	mov	r0, r5
 80011e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80011ea:	f1ce 0320 	rsb	r3, lr, #32
 80011ee:	fa26 f203 	lsr.w	r2, r6, r3
 80011f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80011f6:	fbb2 f1fc 	udiv	r1, r2, ip
 80011fa:	fa1f f887 	uxth.w	r8, r7
 80011fe:	fb0c 2211 	mls	r2, ip, r1, r2
 8001202:	fa06 f60e 	lsl.w	r6, r6, lr
 8001206:	fa20 f303 	lsr.w	r3, r0, r3
 800120a:	fb01 f908 	mul.w	r9, r1, r8
 800120e:	4333      	orrs	r3, r6
 8001210:	0c1e      	lsrs	r6, r3, #16
 8001212:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001216:	45b1      	cmp	r9, r6
 8001218:	fa00 f40e 	lsl.w	r4, r0, lr
 800121c:	d909      	bls.n	8001232 <__udivmoddi4+0x1ba>
 800121e:	19f6      	adds	r6, r6, r7
 8001220:	f101 32ff 	add.w	r2, r1, #4294967295
 8001224:	f080 808c 	bcs.w	8001340 <__udivmoddi4+0x2c8>
 8001228:	45b1      	cmp	r9, r6
 800122a:	f240 8089 	bls.w	8001340 <__udivmoddi4+0x2c8>
 800122e:	3902      	subs	r1, #2
 8001230:	443e      	add	r6, r7
 8001232:	eba6 0609 	sub.w	r6, r6, r9
 8001236:	fbb6 f0fc 	udiv	r0, r6, ip
 800123a:	fb0c 6210 	mls	r2, ip, r0, r6
 800123e:	fb00 f908 	mul.w	r9, r0, r8
 8001242:	b29e      	uxth	r6, r3
 8001244:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001248:	45b1      	cmp	r9, r6
 800124a:	d907      	bls.n	800125c <__udivmoddi4+0x1e4>
 800124c:	19f6      	adds	r6, r6, r7
 800124e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001252:	d271      	bcs.n	8001338 <__udivmoddi4+0x2c0>
 8001254:	45b1      	cmp	r9, r6
 8001256:	d96f      	bls.n	8001338 <__udivmoddi4+0x2c0>
 8001258:	3802      	subs	r0, #2
 800125a:	443e      	add	r6, r7
 800125c:	eba6 0609 	sub.w	r6, r6, r9
 8001260:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001264:	e78f      	b.n	8001186 <__udivmoddi4+0x10e>
 8001266:	f1c1 0720 	rsb	r7, r1, #32
 800126a:	fa22 f807 	lsr.w	r8, r2, r7
 800126e:	408b      	lsls	r3, r1
 8001270:	ea48 0303 	orr.w	r3, r8, r3
 8001274:	fa26 f407 	lsr.w	r4, r6, r7
 8001278:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800127c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001280:	fa1f fc83 	uxth.w	ip, r3
 8001284:	fb0e 4419 	mls	r4, lr, r9, r4
 8001288:	408e      	lsls	r6, r1
 800128a:	fa20 f807 	lsr.w	r8, r0, r7
 800128e:	fb09 fa0c 	mul.w	sl, r9, ip
 8001292:	ea48 0806 	orr.w	r8, r8, r6
 8001296:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800129a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800129e:	45a2      	cmp	sl, r4
 80012a0:	fa02 f201 	lsl.w	r2, r2, r1
 80012a4:	fa00 f601 	lsl.w	r6, r0, r1
 80012a8:	d908      	bls.n	80012bc <__udivmoddi4+0x244>
 80012aa:	18e4      	adds	r4, r4, r3
 80012ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80012b0:	d244      	bcs.n	800133c <__udivmoddi4+0x2c4>
 80012b2:	45a2      	cmp	sl, r4
 80012b4:	d942      	bls.n	800133c <__udivmoddi4+0x2c4>
 80012b6:	f1a9 0902 	sub.w	r9, r9, #2
 80012ba:	441c      	add	r4, r3
 80012bc:	eba4 040a 	sub.w	r4, r4, sl
 80012c0:	fbb4 f0fe 	udiv	r0, r4, lr
 80012c4:	fb0e 4410 	mls	r4, lr, r0, r4
 80012c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80012cc:	fa1f f888 	uxth.w	r8, r8
 80012d0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80012d4:	45a4      	cmp	ip, r4
 80012d6:	d907      	bls.n	80012e8 <__udivmoddi4+0x270>
 80012d8:	18e4      	adds	r4, r4, r3
 80012da:	f100 3eff 	add.w	lr, r0, #4294967295
 80012de:	d229      	bcs.n	8001334 <__udivmoddi4+0x2bc>
 80012e0:	45a4      	cmp	ip, r4
 80012e2:	d927      	bls.n	8001334 <__udivmoddi4+0x2bc>
 80012e4:	3802      	subs	r0, #2
 80012e6:	441c      	add	r4, r3
 80012e8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012ec:	fba0 8902 	umull	r8, r9, r0, r2
 80012f0:	eba4 0c0c 	sub.w	ip, r4, ip
 80012f4:	45cc      	cmp	ip, r9
 80012f6:	46c2      	mov	sl, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	d315      	bcc.n	8001328 <__udivmoddi4+0x2b0>
 80012fc:	d012      	beq.n	8001324 <__udivmoddi4+0x2ac>
 80012fe:	b155      	cbz	r5, 8001316 <__udivmoddi4+0x29e>
 8001300:	ebb6 030a 	subs.w	r3, r6, sl
 8001304:	eb6c 060e 	sbc.w	r6, ip, lr
 8001308:	fa06 f707 	lsl.w	r7, r6, r7
 800130c:	40cb      	lsrs	r3, r1
 800130e:	431f      	orrs	r7, r3
 8001310:	40ce      	lsrs	r6, r1
 8001312:	602f      	str	r7, [r5, #0]
 8001314:	606e      	str	r6, [r5, #4]
 8001316:	2100      	movs	r1, #0
 8001318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800131c:	4610      	mov	r0, r2
 800131e:	e6f7      	b.n	8001110 <__udivmoddi4+0x98>
 8001320:	4689      	mov	r9, r1
 8001322:	e6de      	b.n	80010e2 <__udivmoddi4+0x6a>
 8001324:	4546      	cmp	r6, r8
 8001326:	d2ea      	bcs.n	80012fe <__udivmoddi4+0x286>
 8001328:	ebb8 0a02 	subs.w	sl, r8, r2
 800132c:	eb69 0e03 	sbc.w	lr, r9, r3
 8001330:	3801      	subs	r0, #1
 8001332:	e7e4      	b.n	80012fe <__udivmoddi4+0x286>
 8001334:	4670      	mov	r0, lr
 8001336:	e7d7      	b.n	80012e8 <__udivmoddi4+0x270>
 8001338:	4618      	mov	r0, r3
 800133a:	e78f      	b.n	800125c <__udivmoddi4+0x1e4>
 800133c:	4681      	mov	r9, r0
 800133e:	e7bd      	b.n	80012bc <__udivmoddi4+0x244>
 8001340:	4611      	mov	r1, r2
 8001342:	e776      	b.n	8001232 <__udivmoddi4+0x1ba>
 8001344:	3802      	subs	r0, #2
 8001346:	443c      	add	r4, r7
 8001348:	e744      	b.n	80011d4 <__udivmoddi4+0x15c>
 800134a:	4608      	mov	r0, r1
 800134c:	e706      	b.n	800115c <__udivmoddi4+0xe4>
 800134e:	3a02      	subs	r2, #2
 8001350:	443e      	add	r6, r7
 8001352:	e72b      	b.n	80011ac <__udivmoddi4+0x134>

08001354 <__aeabi_idiv0>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_InitTick+0x3c>)
{
 800135c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135e:	7818      	ldrb	r0, [r3, #0]
 8001360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001364:	fbb3 f3f0 	udiv	r3, r3, r0
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_InitTick+0x40>)
 800136a:	6810      	ldr	r0, [r2, #0]
 800136c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001370:	f000 faec 	bl	800194c <HAL_SYSTICK_Config>
 8001374:	4604      	mov	r4, r0
 8001376:	b958      	cbnz	r0, 8001390 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001378:	2d0f      	cmp	r5, #15
 800137a:	d809      	bhi.n	8001390 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	4602      	mov	r2, r0
 800137e:	4629      	mov	r1, r5
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 faa0 	bl	80018c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <HAL_InitTick+0x44>)
 800138a:	4620      	mov	r0, r4
 800138c:	601d      	str	r5, [r3, #0]
 800138e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001390:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	200000a0 	.word	0x200000a0
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x20>)
{
 80013a2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ae:	f000 fa79 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f7ff ffd0 	bl	8001358 <HAL_InitTick>
  HAL_MspInit();
 80013b8:	f004 f8c4 	bl	8005544 <HAL_MspInit>
}
 80013bc:	2000      	movs	r0, #0
 80013be:	bd08      	pop	{r3, pc}
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013c4:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <HAL_IncTick+0x10>)
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <HAL_IncTick+0x14>)
 80013c8:	6811      	ldr	r1, [r2, #0]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	440b      	add	r3, r1
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2000539c 	.word	0x2000539c
 80013d8:	20000000 	.word	0x20000000

080013dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013dc:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <HAL_GetTick+0x8>)
 80013de:	6818      	ldr	r0, [r3, #0]
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	2000539c 	.word	0x2000539c

080013e8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013e8:	6803      	ldr	r3, [r0, #0]
 80013ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80013ec:	4770      	bx	lr

080013ee <HAL_ADC_LevelOutOfWindowCallback>:
 80013ee:	4770      	bx	lr

080013f0 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80013f0:	6803      	ldr	r3, [r0, #0]
{
 80013f2:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80013f4:	685a      	ldr	r2, [r3, #4]
{
 80013f6:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80013f8:	0690      	lsls	r0, r2, #26
 80013fa:	d527      	bpl.n	800144c <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	0791      	lsls	r1, r2, #30
 8001400:	d524      	bpl.n	800144c <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001402:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001404:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001406:	bf5e      	ittt	pl
 8001408:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800140a:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800140e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001416:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800141a:	d110      	bne.n	800143e <HAL_ADC_IRQHandler+0x4e>
 800141c:	7b22      	ldrb	r2, [r4, #12]
 800141e:	b972      	cbnz	r2, 800143e <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	f022 0220 	bic.w	r2, r2, #32
 8001426:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001428:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800142a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800142e:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001432:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001434:	bf5e      	ittt	pl
 8001436:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001438:	f043 0301 	orrpl.w	r3, r3, #1
 800143c:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800143e:	4620      	mov	r0, r4
 8001440:	f003 fef0 	bl	8005224 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001444:	f06f 0212 	mvn.w	r2, #18
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	0610      	lsls	r0, r2, #24
 8001452:	d530      	bpl.n	80014b6 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	0751      	lsls	r1, r2, #29
 8001458:	d52d      	bpl.n	80014b6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800145a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800145c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800145e:	bf5e      	ittt	pl
 8001460:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001462:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001466:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800146e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001472:	d00a      	beq.n	800148a <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001474:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001476:	0550      	lsls	r0, r2, #21
 8001478:	d416      	bmi.n	80014a8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001480:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001484:	d110      	bne.n	80014a8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001486:	7b22      	ldrb	r2, [r4, #12]
 8001488:	b972      	cbnz	r2, 80014a8 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001490:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001492:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001498:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800149a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800149c:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149e:	bf5e      	ittt	pl
 80014a0:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80014a2:	f043 0301 	orrpl.w	r3, r3, #1
 80014a6:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014a8:	4620      	mov	r0, r4
 80014aa:	f000 f9fa 	bl	80018a2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014ae:	f06f 020c 	mvn.w	r2, #12
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	0652      	lsls	r2, r2, #25
 80014bc:	d50d      	bpl.n	80014da <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	07db      	lsls	r3, r3, #31
 80014c2:	d50a      	bpl.n	80014da <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014c6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014ce:	f7ff ff8e 	bl	80013ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014d2:	f06f 0201 	mvn.w	r2, #1
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	bd10      	pop	{r4, pc}

080014dc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80014dc:	2300      	movs	r3, #0
{ 
 80014de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80014e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d074      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0xf8>
 80014ea:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ec:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80014ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80014f2:	2d06      	cmp	r5, #6
 80014f4:	6802      	ldr	r2, [r0, #0]
 80014f6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80014fa:	680c      	ldr	r4, [r1, #0]
 80014fc:	d825      	bhi.n	800154a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014fe:	442b      	add	r3, r5
 8001500:	251f      	movs	r5, #31
 8001502:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001504:	3b05      	subs	r3, #5
 8001506:	409d      	lsls	r5, r3
 8001508:	ea26 0505 	bic.w	r5, r6, r5
 800150c:	fa04 f303 	lsl.w	r3, r4, r3
 8001510:	432b      	orrs	r3, r5
 8001512:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001514:	2c09      	cmp	r4, #9
 8001516:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800151a:	688d      	ldr	r5, [r1, #8]
 800151c:	d92f      	bls.n	800157e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800151e:	2607      	movs	r6, #7
 8001520:	4423      	add	r3, r4
 8001522:	68d1      	ldr	r1, [r2, #12]
 8001524:	3b1e      	subs	r3, #30
 8001526:	409e      	lsls	r6, r3
 8001528:	ea21 0106 	bic.w	r1, r1, r6
 800152c:	fa05 f303 	lsl.w	r3, r5, r3
 8001530:	430b      	orrs	r3, r1
 8001532:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001534:	f1a4 0310 	sub.w	r3, r4, #16
 8001538:	2b01      	cmp	r3, #1
 800153a:	d92b      	bls.n	8001594 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153e:	2200      	movs	r2, #0
 8001540:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001544:	4618      	mov	r0, r3
 8001546:	b002      	add	sp, #8
 8001548:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800154a:	2d0c      	cmp	r5, #12
 800154c:	d80b      	bhi.n	8001566 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800154e:	442b      	add	r3, r5
 8001550:	251f      	movs	r5, #31
 8001552:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001554:	3b23      	subs	r3, #35	; 0x23
 8001556:	409d      	lsls	r5, r3
 8001558:	ea26 0505 	bic.w	r5, r6, r5
 800155c:	fa04 f303 	lsl.w	r3, r4, r3
 8001560:	432b      	orrs	r3, r5
 8001562:	6313      	str	r3, [r2, #48]	; 0x30
 8001564:	e7d6      	b.n	8001514 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001566:	442b      	add	r3, r5
 8001568:	251f      	movs	r5, #31
 800156a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800156c:	3b41      	subs	r3, #65	; 0x41
 800156e:	409d      	lsls	r5, r3
 8001570:	ea26 0505 	bic.w	r5, r6, r5
 8001574:	fa04 f303 	lsl.w	r3, r4, r3
 8001578:	432b      	orrs	r3, r5
 800157a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800157c:	e7ca      	b.n	8001514 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800157e:	2607      	movs	r6, #7
 8001580:	6911      	ldr	r1, [r2, #16]
 8001582:	4423      	add	r3, r4
 8001584:	409e      	lsls	r6, r3
 8001586:	ea21 0106 	bic.w	r1, r1, r6
 800158a:	fa05 f303 	lsl.w	r3, r5, r3
 800158e:	430b      	orrs	r3, r1
 8001590:	6113      	str	r3, [r2, #16]
 8001592:	e7cf      	b.n	8001534 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0xfc>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d116      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800159a:	6893      	ldr	r3, [r2, #8]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	d4cd      	bmi.n	800153c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015a0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015a2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015a8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015aa:	d1c7      	bne.n	800153c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_ADC_ConfigChannel+0x100>)
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <HAL_ADC_ConfigChannel+0x104>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80015b6:	230a      	movs	r3, #10
 80015b8:	4353      	muls	r3, r2
            wait_loop_index--;
 80015ba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80015bc:	9b01      	ldr	r3, [sp, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0bc      	beq.n	800153c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	e7f8      	b.n	80015ba <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e7b4      	b.n	800153e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80015d4:	2302      	movs	r3, #2
 80015d6:	e7b5      	b.n	8001544 <HAL_ADC_ConfigChannel+0x68>
 80015d8:	40012400 	.word	0x40012400
 80015dc:	200000a0 	.word	0x200000a0
 80015e0:	000f4240 	.word	0x000f4240

080015e4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80015e4:	2300      	movs	r3, #0
{
 80015e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80015e8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015ea:	6803      	ldr	r3, [r0, #0]
{
 80015ec:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	07d2      	lsls	r2, r2, #31
 80015f2:	d502      	bpl.n	80015fa <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015f4:	2000      	movs	r0, #0
}
 80015f6:	b002      	add	sp, #8
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <ADC_Enable+0x68>)
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <ADC_Enable+0x6c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800160c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800160e:	9b01      	ldr	r3, [sp, #4]
 8001610:	b9c3      	cbnz	r3, 8001644 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001612:	f7ff fee3 	bl	80013dc <HAL_GetTick>
 8001616:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	689d      	ldr	r5, [r3, #8]
 800161c:	f015 0501 	ands.w	r5, r5, #1
 8001620:	d1e8      	bne.n	80015f4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001622:	f7ff fedb 	bl	80013dc <HAL_GetTick>
 8001626:	1b80      	subs	r0, r0, r6
 8001628:	2802      	cmp	r0, #2
 800162a:	d9f5      	bls.n	8001618 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800162e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800163a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001642:	e7d8      	b.n	80015f6 <ADC_Enable+0x12>
      wait_loop_index--;
 8001644:	9b01      	ldr	r3, [sp, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	e7e0      	b.n	800160c <ADC_Enable+0x28>
 800164a:	bf00      	nop
 800164c:	200000a0 	.word	0x200000a0
 8001650:	000f4240 	.word	0x000f4240

08001654 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8001654:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001658:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800165a:	2b01      	cmp	r3, #1
{
 800165c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800165e:	d058      	beq.n	8001712 <HAL_ADC_Start_IT+0xbe>
 8001660:	2301      	movs	r3, #1
 8001662:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001666:	f7ff ffbd 	bl	80015e4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800166a:	2800      	cmp	r0, #0
 800166c:	d14d      	bne.n	800170a <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800166e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001670:	4a29      	ldr	r2, [pc, #164]	; (8001718 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 8001672:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	4293      	cmp	r3, r2
 8001684:	d104      	bne.n	8001690 <HAL_ADC_Start_IT+0x3c>
 8001686:	4925      	ldr	r1, [pc, #148]	; (800171c <HAL_ADC_Start_IT+0xc8>)
 8001688:	684a      	ldr	r2, [r1, #4]
 800168a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800168e:	d132      	bne.n	80016f6 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001690:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001692:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001696:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001698:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800169a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800169c:	bf41      	itttt	mi
 800169e:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80016a0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80016a4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80016a8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016b0:	bf1c      	itt	ne
 80016b2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80016b4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016c0:	f06f 0202 	mvn.w	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	f042 0220 	orr.w	r2, r2, #32
 80016cc:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80016d4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80016d8:	d113      	bne.n	8001702 <HAL_ADC_Start_IT+0xae>
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_ADC_Start_IT+0xc4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d105      	bne.n	80016ec <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016e0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80016e4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016e6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80016ea:	d10a      	bne.n	8001702 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016fc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016fe:	684a      	ldr	r2, [r1, #4]
 8001700:	e7cb      	b.n	800169a <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001708:	e7f3      	b.n	80016f2 <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 800170a:	2300      	movs	r3, #0
 800170c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001710:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001712:	2002      	movs	r0, #2
}
 8001714:	bd10      	pop	{r4, pc}
 8001716:	bf00      	nop
 8001718:	40012800 	.word	0x40012800
 800171c:	40012400 	.word	0x40012400

08001720 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001720:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001722:	6803      	ldr	r3, [r0, #0]
{
 8001724:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	07d2      	lsls	r2, r2, #31
 800172a:	d401      	bmi.n	8001730 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800172c:	2000      	movs	r0, #0
 800172e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001738:	f7ff fe50 	bl	80013dc <HAL_GetTick>
 800173c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	07db      	lsls	r3, r3, #31
 8001744:	d5f2      	bpl.n	800172c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001746:	f7ff fe49 	bl	80013dc <HAL_GetTick>
 800174a:	1b40      	subs	r0, r0, r5
 800174c:	2802      	cmp	r0, #2
 800174e:	d9f6      	bls.n	800173e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001762:	bd38      	pop	{r3, r4, r5, pc}

08001764 <HAL_ADC_Init>:
{
 8001764:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001766:	4604      	mov	r4, r0
 8001768:	2800      	cmp	r0, #0
 800176a:	d071      	beq.n	8001850 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800176c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800176e:	b923      	cbnz	r3, 800177a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001772:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001776:	f003 ff0d 	bl	8005594 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff ffd0 	bl	8001720 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001780:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001782:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001788:	d164      	bne.n	8001854 <HAL_ADC_Init+0xf0>
 800178a:	2800      	cmp	r0, #0
 800178c:	d162      	bne.n	8001854 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800178e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001794:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001796:	f023 0302 	bic.w	r3, r3, #2
 800179a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800179e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017a0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017a4:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017aa:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017ae:	d038      	beq.n	8001822 <HAL_ADC_Init+0xbe>
 80017b0:	2901      	cmp	r1, #1
 80017b2:	bf14      	ite	ne
 80017b4:	4606      	movne	r6, r0
 80017b6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ba:	7d25      	ldrb	r5, [r4, #20]
 80017bc:	2d01      	cmp	r5, #1
 80017be:	d107      	bne.n	80017d0 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d130      	bne.n	8001826 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017c4:	69a3      	ldr	r3, [r4, #24]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80017cc:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80017d0:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80017d6:	685d      	ldr	r5, [r3, #4]
 80017d8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80017dc:	ea45 0506 	orr.w	r5, r5, r6
 80017e0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80017e2:	689e      	ldr	r6, [r3, #8]
 80017e4:	4d1d      	ldr	r5, [pc, #116]	; (800185c <HAL_ADC_Init+0xf8>)
 80017e6:	ea05 0506 	and.w	r5, r5, r6
 80017ea:	ea45 0502 	orr.w	r5, r5, r2
 80017ee:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017f0:	d001      	beq.n	80017f6 <HAL_ADC_Init+0x92>
 80017f2:	2901      	cmp	r1, #1
 80017f4:	d120      	bne.n	8001838 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017f6:	6921      	ldr	r1, [r4, #16]
 80017f8:	3901      	subs	r1, #1
 80017fa:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80017fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80017fe:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001802:	4329      	orrs	r1, r5
 8001804:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_ADC_Init+0xfc>)
 800180a:	400b      	ands	r3, r1
 800180c:	429a      	cmp	r2, r3
 800180e:	d115      	bne.n	800183c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001810:	2300      	movs	r3, #0
 8001812:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001820:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001822:	460e      	mov	r6, r1
 8001824:	e7c9      	b.n	80017ba <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001836:	e7cb      	b.n	80017d0 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001838:	2100      	movs	r1, #0
 800183a:	e7df      	b.n	80017fc <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 800183c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800183e:	f023 0312 	bic.w	r3, r3, #18
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001850:	2001      	movs	r0, #1
}
 8001852:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	62a3      	str	r3, [r4, #40]	; 0x28
 800185a:	e7f9      	b.n	8001850 <HAL_ADC_Init+0xec>
 800185c:	ffe1f7fd 	.word	0xffe1f7fd
 8001860:	ff1f0efe 	.word	0xff1f0efe

08001864 <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8001864:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001868:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800186a:	2b01      	cmp	r3, #1
{
 800186c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800186e:	d016      	beq.n	800189e <HAL_ADC_Stop_IT+0x3a>
 8001870:	2301      	movs	r3, #1
 8001872:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001876:	f7ff ff53 	bl	8001720 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800187a:	b960      	cbnz	r0, 8001896 <HAL_ADC_Stop_IT+0x32>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	6853      	ldr	r3, [r2, #4]
 8001880:	f023 0320 	bic.w	r3, r3, #32
 8001884:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001888:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8001896:	2300      	movs	r3, #0
 8001898:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 800189c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800189e:	2002      	movs	r0, #2
}
 80018a0:	bd10      	pop	{r4, pc}

080018a2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018a2:	4770      	bx	lr

080018a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80018be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018c0:	60d3      	str	r3, [r2, #12]
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ca:	b530      	push	{r4, r5, lr}
 80018cc:	68dc      	ldr	r4, [r3, #12]
 80018ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d8:	2b04      	cmp	r3, #4
 80018da:	bf28      	it	cs
 80018dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e4:	bf98      	it	ls
 80018e6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	fa05 f303 	lsl.w	r3, r5, r3
 80018ec:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f0:	bf88      	it	hi
 80018f2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4019      	ands	r1, r3
 80018f6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	fa05 f404 	lsl.w	r4, r5, r4
 80018fc:	3c01      	subs	r4, #1
 80018fe:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001900:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001902:	ea42 0201 	orr.w	r2, r2, r1
 8001906:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	bfa9      	itett	ge
 800190c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	4b06      	ldrlt	r3, [pc, #24]	; (800192c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	b2d2      	uxtbge	r2, r2
 8001914:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	bfbb      	ittet	lt
 800191a:	f000 000f 	andlt.w	r0, r0, #15
 800191e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	541a      	strblt	r2, [r3, r0]
 8001926:	bd30      	pop	{r4, r5, pc}
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	e000ed14 	.word	0xe000ed14

08001930 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001930:	2800      	cmp	r0, #0
 8001932:	db08      	blt.n	8001946 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001934:	2301      	movs	r3, #1
 8001936:	0942      	lsrs	r2, r0, #5
 8001938:	f000 001f 	and.w	r0, r0, #31
 800193c:	fa03 f000 	lsl.w	r0, r3, r0
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <HAL_NVIC_EnableIRQ+0x18>)
 8001942:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100

0800194c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	3801      	subs	r0, #1
 800194e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001952:	d20a      	bcs.n	800196a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001978:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800197c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197e:	2b02      	cmp	r3, #2
 8001980:	d003      	beq.n	800198a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001982:	2304      	movs	r3, #4
 8001984:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001986:	2001      	movs	r0, #1
 8001988:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198a:	6803      	ldr	r3, [r0, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	f022 020e 	bic.w	r2, r2, #14
 8001992:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800199c:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <HAL_DMA_Abort_IT+0xcc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d924      	bls.n	80019ec <HAL_DMA_Abort_IT+0x74>
 80019a2:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d019      	beq.n	80019de <HAL_DMA_Abort_IT+0x66>
 80019aa:	3214      	adds	r2, #20
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d018      	beq.n	80019e2 <HAL_DMA_Abort_IT+0x6a>
 80019b0:	3214      	adds	r2, #20
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d017      	beq.n	80019e6 <HAL_DMA_Abort_IT+0x6e>
 80019b6:	3214      	adds	r2, #20
 80019b8:	4293      	cmp	r3, r2
 80019ba:	bf0c      	ite	eq
 80019bc:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80019c0:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_DMA_Abort_IT+0xd0>)
 80019c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c8:	2301      	movs	r3, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ca:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80019cc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80019d2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019d6:	b39b      	cbz	r3, 8001a40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019d8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019da:	4620      	mov	r0, r4
 80019dc:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019de:	2301      	movs	r3, #1
 80019e0:	e7f0      	b.n	80019c4 <HAL_DMA_Abort_IT+0x4c>
 80019e2:	2310      	movs	r3, #16
 80019e4:	e7ee      	b.n	80019c4 <HAL_DMA_Abort_IT+0x4c>
 80019e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ea:	e7eb      	b.n	80019c4 <HAL_DMA_Abort_IT+0x4c>
 80019ec:	4917      	ldr	r1, [pc, #92]	; (8001a4c <HAL_DMA_Abort_IT+0xd4>)
 80019ee:	428b      	cmp	r3, r1
 80019f0:	d016      	beq.n	8001a20 <HAL_DMA_Abort_IT+0xa8>
 80019f2:	3114      	adds	r1, #20
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d015      	beq.n	8001a24 <HAL_DMA_Abort_IT+0xac>
 80019f8:	3114      	adds	r1, #20
 80019fa:	428b      	cmp	r3, r1
 80019fc:	d014      	beq.n	8001a28 <HAL_DMA_Abort_IT+0xb0>
 80019fe:	3114      	adds	r1, #20
 8001a00:	428b      	cmp	r3, r1
 8001a02:	d014      	beq.n	8001a2e <HAL_DMA_Abort_IT+0xb6>
 8001a04:	3114      	adds	r1, #20
 8001a06:	428b      	cmp	r3, r1
 8001a08:	d014      	beq.n	8001a34 <HAL_DMA_Abort_IT+0xbc>
 8001a0a:	3114      	adds	r1, #20
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	d014      	beq.n	8001a3a <HAL_DMA_Abort_IT+0xc2>
 8001a10:	4293      	cmp	r3, r2
 8001a12:	bf14      	ite	ne
 8001a14:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001a18:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <HAL_DMA_Abort_IT+0xd8>)
 8001a1e:	e7d2      	b.n	80019c6 <HAL_DMA_Abort_IT+0x4e>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e7fb      	b.n	8001a1c <HAL_DMA_Abort_IT+0xa4>
 8001a24:	2310      	movs	r3, #16
 8001a26:	e7f9      	b.n	8001a1c <HAL_DMA_Abort_IT+0xa4>
 8001a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2c:	e7f6      	b.n	8001a1c <HAL_DMA_Abort_IT+0xa4>
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	e7f3      	b.n	8001a1c <HAL_DMA_Abort_IT+0xa4>
 8001a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a38:	e7f0      	b.n	8001a1c <HAL_DMA_Abort_IT+0xa4>
 8001a3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a3e:	e7ed      	b.n	8001a1c <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8001a40:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8001a42:	bd10      	pop	{r4, pc}
 8001a44:	40020080 	.word	0x40020080
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020008 	.word	0x40020008
 8001a50:	40020000 	.word	0x40020000

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a58:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001a5a:	4626      	mov	r6, r4
 8001a5c:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a5e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001c08 <HAL_GPIO_Init+0x1b4>
 8001a62:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001c0c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	680a      	ldr	r2, [r1, #0]
 8001a68:	fa32 f506 	lsrs.w	r5, r2, r6
 8001a6c:	d102      	bne.n	8001a74 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001a6e:	b003      	add	sp, #12
 8001a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001a74:	f04f 0801 	mov.w	r8, #1
 8001a78:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001a80:	4590      	cmp	r8, r2
 8001a82:	d17f      	bne.n	8001b84 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001a84:	684d      	ldr	r5, [r1, #4]
 8001a86:	2d12      	cmp	r5, #18
 8001a88:	f000 80aa 	beq.w	8001be0 <HAL_GPIO_Init+0x18c>
 8001a8c:	f200 8083 	bhi.w	8001b96 <HAL_GPIO_Init+0x142>
 8001a90:	2d02      	cmp	r5, #2
 8001a92:	f000 80a2 	beq.w	8001bda <HAL_GPIO_Init+0x186>
 8001a96:	d877      	bhi.n	8001b88 <HAL_GPIO_Init+0x134>
 8001a98:	2d00      	cmp	r5, #0
 8001a9a:	f000 8089 	beq.w	8001bb0 <HAL_GPIO_Init+0x15c>
 8001a9e:	2d01      	cmp	r5, #1
 8001aa0:	f000 8099 	beq.w	8001bd6 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa8:	2aff      	cmp	r2, #255	; 0xff
 8001aaa:	bf93      	iteet	ls
 8001aac:	4682      	movls	sl, r0
 8001aae:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001ab2:	3d08      	subhi	r5, #8
 8001ab4:	f8d0 b000 	ldrls.w	fp, [r0]
 8001ab8:	bf92      	itee	ls
 8001aba:	00b5      	lslls	r5, r6, #2
 8001abc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001ac0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac2:	fa09 f805 	lsl.w	r8, r9, r5
 8001ac6:	ea2b 0808 	bic.w	r8, fp, r8
 8001aca:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ace:	bf88      	it	hi
 8001ad0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	ea48 0505 	orr.w	r5, r8, r5
 8001ad8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001adc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001ae0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001ae4:	d04e      	beq.n	8001b84 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae6:	4d45      	ldr	r5, [pc, #276]	; (8001bfc <HAL_GPIO_Init+0x1a8>)
 8001ae8:	4f44      	ldr	r7, [pc, #272]	; (8001bfc <HAL_GPIO_Init+0x1a8>)
 8001aea:	69ad      	ldr	r5, [r5, #24]
 8001aec:	f026 0803 	bic.w	r8, r6, #3
 8001af0:	f045 0501 	orr.w	r5, r5, #1
 8001af4:	61bd      	str	r5, [r7, #24]
 8001af6:	69bd      	ldr	r5, [r7, #24]
 8001af8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001afc:	f005 0501 	and.w	r5, r5, #1
 8001b00:	9501      	str	r5, [sp, #4]
 8001b02:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b06:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001b10:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b14:	fa09 f90b 	lsl.w	r9, r9, fp
 8001b18:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b1c:	4d38      	ldr	r5, [pc, #224]	; (8001c00 <HAL_GPIO_Init+0x1ac>)
 8001b1e:	42a8      	cmp	r0, r5
 8001b20:	d063      	beq.n	8001bea <HAL_GPIO_Init+0x196>
 8001b22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b26:	42a8      	cmp	r0, r5
 8001b28:	d061      	beq.n	8001bee <HAL_GPIO_Init+0x19a>
 8001b2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b2e:	42a8      	cmp	r0, r5
 8001b30:	d05f      	beq.n	8001bf2 <HAL_GPIO_Init+0x19e>
 8001b32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b36:	42a8      	cmp	r0, r5
 8001b38:	bf0c      	ite	eq
 8001b3a:	2503      	moveq	r5, #3
 8001b3c:	2504      	movne	r5, #4
 8001b3e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001b42:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001b46:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001b50:	bf14      	ite	ne
 8001b52:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b54:	4395      	biceq	r5, r2
 8001b56:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001b58:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001b5e:	bf14      	ite	ne
 8001b60:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b62:	4395      	biceq	r5, r2
 8001b64:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b66:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b68:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b6c:	bf14      	ite	ne
 8001b6e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b70:	4395      	biceq	r5, r2
 8001b72:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b74:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b76:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7a:	bf14      	ite	ne
 8001b7c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b7e:	ea25 0202 	biceq.w	r2, r5, r2
 8001b82:	60da      	str	r2, [r3, #12]
	position++;
 8001b84:	3601      	adds	r6, #1
 8001b86:	e76e      	b.n	8001a66 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001b88:	2d03      	cmp	r5, #3
 8001b8a:	d022      	beq.n	8001bd2 <HAL_GPIO_Init+0x17e>
 8001b8c:	2d11      	cmp	r5, #17
 8001b8e:	d189      	bne.n	8001aa4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b90:	68cc      	ldr	r4, [r1, #12]
 8001b92:	3404      	adds	r4, #4
          break;
 8001b94:	e786      	b.n	8001aa4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001b96:	4f1b      	ldr	r7, [pc, #108]	; (8001c04 <HAL_GPIO_Init+0x1b0>)
 8001b98:	42bd      	cmp	r5, r7
 8001b9a:	d009      	beq.n	8001bb0 <HAL_GPIO_Init+0x15c>
 8001b9c:	d812      	bhi.n	8001bc4 <HAL_GPIO_Init+0x170>
 8001b9e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001c10 <HAL_GPIO_Init+0x1bc>
 8001ba2:	454d      	cmp	r5, r9
 8001ba4:	d004      	beq.n	8001bb0 <HAL_GPIO_Init+0x15c>
 8001ba6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001baa:	454d      	cmp	r5, r9
 8001bac:	f47f af7a 	bne.w	8001aa4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bb0:	688c      	ldr	r4, [r1, #8]
 8001bb2:	b1c4      	cbz	r4, 8001be6 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bb4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001bb6:	bf0c      	ite	eq
 8001bb8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001bbc:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc0:	2408      	movs	r4, #8
 8001bc2:	e76f      	b.n	8001aa4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001bc4:	4575      	cmp	r5, lr
 8001bc6:	d0f3      	beq.n	8001bb0 <HAL_GPIO_Init+0x15c>
 8001bc8:	4565      	cmp	r5, ip
 8001bca:	d0f1      	beq.n	8001bb0 <HAL_GPIO_Init+0x15c>
 8001bcc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001c14 <HAL_GPIO_Init+0x1c0>
 8001bd0:	e7eb      	b.n	8001baa <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bd2:	2400      	movs	r4, #0
 8001bd4:	e766      	b.n	8001aa4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd6:	68cc      	ldr	r4, [r1, #12]
          break;
 8001bd8:	e764      	b.n	8001aa4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bda:	68cc      	ldr	r4, [r1, #12]
 8001bdc:	3408      	adds	r4, #8
          break;
 8001bde:	e761      	b.n	8001aa4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be0:	68cc      	ldr	r4, [r1, #12]
 8001be2:	340c      	adds	r4, #12
          break;
 8001be4:	e75e      	b.n	8001aa4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001be6:	2404      	movs	r4, #4
 8001be8:	e75c      	b.n	8001aa4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bea:	2500      	movs	r5, #0
 8001bec:	e7a7      	b.n	8001b3e <HAL_GPIO_Init+0xea>
 8001bee:	2501      	movs	r5, #1
 8001bf0:	e7a5      	b.n	8001b3e <HAL_GPIO_Init+0xea>
 8001bf2:	2502      	movs	r5, #2
 8001bf4:	e7a3      	b.n	8001b3e <HAL_GPIO_Init+0xea>
 8001bf6:	bf00      	nop
 8001bf8:	40010400 	.word	0x40010400
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	10210000 	.word	0x10210000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10320000 	.word	0x10320000
 8001c10:	10110000 	.word	0x10110000
 8001c14:	10220000 	.word	0x10220000

08001c18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c18:	6883      	ldr	r3, [r0, #8]
 8001c1a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001c1c:	bf14      	ite	ne
 8001c1e:	2001      	movne	r0, #1
 8001c20:	2000      	moveq	r0, #0
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c24:	b10a      	cbz	r2, 8001c2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c26:	6101      	str	r1, [r0, #16]
 8001c28:	4770      	bx	lr
 8001c2a:	0409      	lsls	r1, r1, #16
 8001c2c:	e7fb      	b.n	8001c26 <HAL_GPIO_WritePin+0x2>

08001c2e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c2e:	68c3      	ldr	r3, [r0, #12]
 8001c30:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c32:	bf14      	ite	ne
 8001c34:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	6101      	streq	r1, [r0, #16]
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c40:	4604      	mov	r4, r0
 8001c42:	b918      	cbnz	r0, 8001c4c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001c44:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001c46:	b002      	add	sp, #8
 8001c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4c:	6803      	ldr	r3, [r0, #0]
 8001c4e:	07db      	lsls	r3, r3, #31
 8001c50:	d414      	bmi.n	8001c7c <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	079f      	lsls	r7, r3, #30
 8001c56:	d45f      	bmi.n	8001d18 <HAL_RCC_OscConfig+0xdc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	0719      	lsls	r1, r3, #28
 8001c5c:	f100 8096 	bmi.w	8001d8c <HAL_RCC_OscConfig+0x150>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	075a      	lsls	r2, r3, #29
 8001c64:	f100 80c0 	bmi.w	8001de8 <HAL_RCC_OscConfig+0x1ac>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001c68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	f040 812e 	bne.w	8001ecc <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c70:	6a22      	ldr	r2, [r4, #32]
 8001c72:	2a00      	cmp	r2, #0
 8001c74:	f040 8181 	bne.w	8001f7a <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 8001c78:	2000      	movs	r0, #0
 8001c7a:	e7e4      	b.n	8001c46 <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c7c:	4d8e      	ldr	r5, [pc, #568]	; (8001eb8 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	686b      	ldr	r3, [r5, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d007      	beq.n	8001c98 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c88:	686b      	ldr	r3, [r5, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x6a>
 8001c92:	686b      	ldr	r3, [r5, #4]
 8001c94:	03de      	lsls	r6, r3, #15
 8001c96:	d506      	bpl.n	8001ca6 <HAL_RCC_OscConfig+0x6a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	039d      	lsls	r5, r3, #14
 8001c9c:	d5d9      	bpl.n	8001c52 <HAL_RCC_OscConfig+0x16>
 8001c9e:	68a3      	ldr	r3, [r4, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1d6      	bne.n	8001c52 <HAL_RCC_OscConfig+0x16>
 8001ca4:	e7ce      	b.n	8001c44 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	68a3      	ldr	r3, [r4, #8]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d110      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x94>
 8001cae:	682b      	ldr	r3, [r5, #0]
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb91 	bl	80013dc <HAL_GetTick>
 8001cba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	0398      	lsls	r0, r3, #14
 8001cc0:	d4c7      	bmi.n	8001c52 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc2:	f7ff fb8b 	bl	80013dc <HAL_GetTick>
 8001cc6:	1b80      	subs	r0, r0, r6
 8001cc8:	2864      	cmp	r0, #100	; 0x64
 8001cca:	d9f7      	bls.n	8001cbc <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 8001ccc:	2003      	movs	r0, #3
 8001cce:	e7ba      	b.n	8001c46 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	b99b      	cbnz	r3, 8001cfa <HAL_RCC_OscConfig+0xbe>
 8001cd2:	682b      	ldr	r3, [r5, #0]
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd8:	602b      	str	r3, [r5, #0]
 8001cda:	682b      	ldr	r3, [r5, #0]
 8001cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fb7b 	bl	80013dc <HAL_GetTick>
 8001ce6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	0399      	lsls	r1, r3, #14
 8001cec:	d5b1      	bpl.n	8001c52 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cee:	f7ff fb75 	bl	80013dc <HAL_GetTick>
 8001cf2:	1b80      	subs	r0, r0, r6
 8001cf4:	2864      	cmp	r0, #100	; 0x64
 8001cf6:	d9f7      	bls.n	8001ce8 <HAL_RCC_OscConfig+0xac>
 8001cf8:	e7e8      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cfe:	682b      	ldr	r3, [r5, #0]
 8001d00:	d103      	bne.n	8001d0a <HAL_RCC_OscConfig+0xce>
 8001d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d06:	602b      	str	r3, [r5, #0]
 8001d08:	e7d1      	b.n	8001cae <HAL_RCC_OscConfig+0x72>
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0e:	602b      	str	r3, [r5, #0]
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d16:	e7cd      	b.n	8001cb4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d18:	4d67      	ldr	r5, [pc, #412]	; (8001eb8 <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	686b      	ldr	r3, [r5, #4]
 8001d1c:	f013 0f0c 	tst.w	r3, #12
 8001d20:	d007      	beq.n	8001d32 <HAL_RCC_OscConfig+0xf6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d22:	686b      	ldr	r3, [r5, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d110      	bne.n	8001d4e <HAL_RCC_OscConfig+0x112>
 8001d2c:	686b      	ldr	r3, [r5, #4]
 8001d2e:	03da      	lsls	r2, r3, #15
 8001d30:	d40d      	bmi.n	8001d4e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	079b      	lsls	r3, r3, #30
 8001d36:	d502      	bpl.n	8001d3e <HAL_RCC_OscConfig+0x102>
 8001d38:	6963      	ldr	r3, [r4, #20]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d182      	bne.n	8001c44 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	69a2      	ldr	r2, [r4, #24]
 8001d42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d4a:	602b      	str	r3, [r5, #0]
 8001d4c:	e784      	b.n	8001c58 <HAL_RCC_OscConfig+0x1c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4e:	6962      	ldr	r2, [r4, #20]
 8001d50:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d52:	b16a      	cbz	r2, 8001d70 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_ENABLE();
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb40 	bl	80013dc <HAL_GetTick>
 8001d5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	682b      	ldr	r3, [r5, #0]
 8001d60:	079f      	lsls	r7, r3, #30
 8001d62:	d4ec      	bmi.n	8001d3e <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d64:	f7ff fb3a 	bl	80013dc <HAL_GetTick>
 8001d68:	1b80      	subs	r0, r0, r6
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d9f7      	bls.n	8001d5e <HAL_RCC_OscConfig+0x122>
 8001d6e:	e7ad      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 8001d70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d72:	f7ff fb33 	bl	80013dc <HAL_GetTick>
 8001d76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	0798      	lsls	r0, r3, #30
 8001d7c:	f57f af6c 	bpl.w	8001c58 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fb2c 	bl	80013dc <HAL_GetTick>
 8001d84:	1b80      	subs	r0, r0, r6
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f6      	bls.n	8001d78 <HAL_RCC_OscConfig+0x13c>
 8001d8a:	e79f      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8c:	69e2      	ldr	r2, [r4, #28]
 8001d8e:	4d4a      	ldr	r5, [pc, #296]	; (8001eb8 <HAL_RCC_OscConfig+0x27c>)
 8001d90:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <HAL_RCC_OscConfig+0x284>)
 8001d92:	b1da      	cbz	r2, 8001dcc <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d98:	f7ff fb20 	bl	80013dc <HAL_GetTick>
 8001d9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001da0:	079b      	lsls	r3, r3, #30
 8001da2:	d50d      	bpl.n	8001dc0 <HAL_RCC_OscConfig+0x184>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCC_OscConfig+0x288>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001db0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001db2:	bf00      	nop
  }
  while (Delay --);
 8001db4:	9b01      	ldr	r3, [sp, #4]
 8001db6:	1e5a      	subs	r2, r3, #1
 8001db8:	9201      	str	r2, [sp, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f9      	bne.n	8001db2 <HAL_RCC_OscConfig+0x176>
 8001dbe:	e74f      	b.n	8001c60 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fb0c 	bl	80013dc <HAL_GetTick>
 8001dc4:	1b80      	subs	r0, r0, r6
 8001dc6:	2802      	cmp	r0, #2
 8001dc8:	d9e9      	bls.n	8001d9e <HAL_RCC_OscConfig+0x162>
 8001dca:	e77f      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSI_DISABLE();
 8001dcc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001dce:	f7ff fb05 	bl	80013dc <HAL_GetTick>
 8001dd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001dd6:	079f      	lsls	r7, r3, #30
 8001dd8:	f57f af42 	bpl.w	8001c60 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fafe 	bl	80013dc <HAL_GetTick>
 8001de0:	1b80      	subs	r0, r0, r6
 8001de2:	2802      	cmp	r0, #2
 8001de4:	d9f6      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x198>
 8001de6:	e771      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de8:	4d33      	ldr	r5, [pc, #204]	; (8001eb8 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	69eb      	ldr	r3, [r5, #28]
 8001dec:	00de      	lsls	r6, r3, #3
 8001dee:	d424      	bmi.n	8001e3a <HAL_RCC_OscConfig+0x1fe>
      pwrclkchanged = SET;
 8001df0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	69eb      	ldr	r3, [r5, #28]
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	61eb      	str	r3, [r5, #28]
 8001dfa:	69eb      	ldr	r3, [r5, #28]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4e30      	ldr	r6, [pc, #192]	; (8001ec8 <HAL_RCC_OscConfig+0x28c>)
 8001e06:	6833      	ldr	r3, [r6, #0]
 8001e08:	05d8      	lsls	r0, r3, #23
 8001e0a:	d518      	bpl.n	8001e3e <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	6923      	ldr	r3, [r4, #16]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d126      	bne.n	8001e60 <HAL_RCC_OscConfig+0x224>
 8001e12:	6a2b      	ldr	r3, [r5, #32]
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fadf 	bl	80013dc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e22:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	6a2b      	ldr	r3, [r5, #32]
 8001e26:	079a      	lsls	r2, r3, #30
 8001e28:	d53f      	bpl.n	8001eaa <HAL_RCC_OscConfig+0x26e>
    if (pwrclkchanged == SET)
 8001e2a:	2f00      	cmp	r7, #0
 8001e2c:	f43f af1c 	beq.w	8001c68 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	69eb      	ldr	r3, [r5, #28]
 8001e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e36:	61eb      	str	r3, [r5, #28]
 8001e38:	e716      	b.n	8001c68 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2700      	movs	r7, #0
 8001e3c:	e7e2      	b.n	8001e04 <HAL_RCC_OscConfig+0x1c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	6833      	ldr	r3, [r6, #0]
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e46:	f7ff fac9 	bl	80013dc <HAL_GetTick>
 8001e4a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	6833      	ldr	r3, [r6, #0]
 8001e4e:	05d9      	lsls	r1, r3, #23
 8001e50:	d4dc      	bmi.n	8001e0c <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fac3 	bl	80013dc <HAL_GetTick>
 8001e56:	eba0 0008 	sub.w	r0, r0, r8
 8001e5a:	2864      	cmp	r0, #100	; 0x64
 8001e5c:	d9f6      	bls.n	8001e4c <HAL_RCC_OscConfig+0x210>
 8001e5e:	e735      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	b9ab      	cbnz	r3, 8001e8e <HAL_RCC_OscConfig+0x252>
 8001e62:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	622b      	str	r3, [r5, #32]
 8001e6e:	6a2b      	ldr	r3, [r5, #32]
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001e76:	f7ff fab1 	bl	80013dc <HAL_GetTick>
 8001e7a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	6a2b      	ldr	r3, [r5, #32]
 8001e7e:	079b      	lsls	r3, r3, #30
 8001e80:	d5d3      	bpl.n	8001e2a <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff faab 	bl	80013dc <HAL_GetTick>
 8001e86:	1b80      	subs	r0, r0, r6
 8001e88:	4540      	cmp	r0, r8
 8001e8a:	d9f7      	bls.n	8001e7c <HAL_RCC_OscConfig+0x240>
 8001e8c:	e71e      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	6a2b      	ldr	r3, [r5, #32]
 8001e92:	d103      	bne.n	8001e9c <HAL_RCC_OscConfig+0x260>
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	622b      	str	r3, [r5, #32]
 8001e9a:	e7ba      	b.n	8001e12 <HAL_RCC_OscConfig+0x1d6>
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	622b      	str	r3, [r5, #32]
 8001ea2:	6a2b      	ldr	r3, [r5, #32]
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	e7b6      	b.n	8001e18 <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fa97 	bl	80013dc <HAL_GetTick>
 8001eae:	eba0 0008 	sub.w	r0, r0, r8
 8001eb2:	42b0      	cmp	r0, r6
 8001eb4:	d9b6      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1e8>
 8001eb6:	e709      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	42420000 	.word	0x42420000
 8001ec0:	42420480 	.word	0x42420480
 8001ec4:	200000a0 	.word	0x200000a0
 8001ec8:	40007000 	.word	0x40007000
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ecc:	4d58      	ldr	r5, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x3f4>)
 8001ece:	686b      	ldr	r3, [r5, #4]
 8001ed0:	03d8      	lsls	r0, r3, #15
 8001ed2:	d508      	bpl.n	8001ee6 <HAL_RCC_OscConfig+0x2aa>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ed4:	686b      	ldr	r3, [r5, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d103      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2aa>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001ede:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ee0:	03d9      	lsls	r1, r3, #15
 8001ee2:	f53f aeaf 	bmi.w	8001c44 <HAL_RCC_OscConfig+0x8>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001ee6:	2a02      	cmp	r2, #2
 8001ee8:	d133      	bne.n	8001f52 <HAL_RCC_OscConfig+0x316>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001eea:	682b      	ldr	r3, [r5, #0]
 8001eec:	00da      	lsls	r2, r3, #3
 8001eee:	d506      	bpl.n	8001efe <HAL_RCC_OscConfig+0x2c2>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001ef0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001ef2:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	f47f aea3 	bne.w	8001c44 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL2_DISABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	4e4c      	ldr	r6, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x3f8>)
 8001f02:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f04:	f7ff fa6a 	bl	80013dc <HAL_GetTick>
 8001f08:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001f0a:	682b      	ldr	r3, [r5, #0]
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	d41a      	bmi.n	8001f46 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001f10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f12:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001f1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f24:	4313      	orrs	r3, r2
 8001f26:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8001f28:	2301      	movs	r3, #1
 8001f2a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fa56 	bl	80013dc <HAL_GetTick>
 8001f30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	011f      	lsls	r7, r3, #4
 8001f36:	f53f ae9b 	bmi.w	8001c70 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f3a:	f7ff fa4f 	bl	80013dc <HAL_GetTick>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	2864      	cmp	r0, #100	; 0x64
 8001f42:	d9f6      	bls.n	8001f32 <HAL_RCC_OscConfig+0x2f6>
 8001f44:	e6c2      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f46:	f7ff fa49 	bl	80013dc <HAL_GetTick>
 8001f4a:	1bc0      	subs	r0, r0, r7
 8001f4c:	2864      	cmp	r0, #100	; 0x64
 8001f4e:	d9dc      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2ce>
 8001f50:	e6bc      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL2_DISABLE();
 8001f52:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001f54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0x3f8>)
 8001f5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f60:	f7ff fa3c 	bl	80013dc <HAL_GetTick>
 8001f64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001f66:	682b      	ldr	r3, [r5, #0]
 8001f68:	0118      	lsls	r0, r3, #4
 8001f6a:	f57f ae81 	bpl.w	8001c70 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f6e:	f7ff fa35 	bl	80013dc <HAL_GetTick>
 8001f72:	1b80      	subs	r0, r0, r6
 8001f74:	2864      	cmp	r0, #100	; 0x64
 8001f76:	d9f6      	bls.n	8001f66 <HAL_RCC_OscConfig+0x32a>
 8001f78:	e6a8      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x3f4>)
 8001f7c:	6859      	ldr	r1, [r3, #4]
 8001f7e:	461d      	mov	r5, r3
 8001f80:	f001 010c 	and.w	r1, r1, #12
 8001f84:	2908      	cmp	r1, #8
 8001f86:	d041      	beq.n	800200c <HAL_RCC_OscConfig+0x3d0>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4e2b      	ldr	r6, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x3fc>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	d12f      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3b6>
        tickstart = HAL_GetTick();
 8001f92:	f7ff fa23 	bl	80013dc <HAL_GetTick>
 8001f96:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	0199      	lsls	r1, r3, #6
 8001f9c:	d423      	bmi.n	8001fe6 <HAL_RCC_OscConfig+0x3aa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_OscConfig+0x37e>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001fa6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001fa8:	6861      	ldr	r1, [r4, #4]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	62ea      	str	r2, [r5, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001fb0:	68e1      	ldr	r1, [r4, #12]
 8001fb2:	f022 020f 	bic.w	r2, r2, #15
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001fbc:	686a      	ldr	r2, [r5, #4]
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fc8:	2301      	movs	r3, #1
 8001fca:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fa06 	bl	80013dc <HAL_GetTick>
 8001fd0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	019a      	lsls	r2, r3, #6
 8001fd6:	f53f ae4f 	bmi.w	8001c78 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff f9ff 	bl	80013dc <HAL_GetTick>
 8001fde:	1b00      	subs	r0, r0, r4
 8001fe0:	2802      	cmp	r0, #2
 8001fe2:	d9f6      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x396>
 8001fe4:	e672      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff f9f9 	bl	80013dc <HAL_GetTick>
 8001fea:	1bc0      	subs	r0, r0, r7
 8001fec:	2802      	cmp	r0, #2
 8001fee:	d9d3      	bls.n	8001f98 <HAL_RCC_OscConfig+0x35c>
 8001ff0:	e66c      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f9f3 	bl	80013dc <HAL_GetTick>
 8001ff6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	019b      	lsls	r3, r3, #6
 8001ffc:	f57f ae3c 	bpl.w	8001c78 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff f9ec 	bl	80013dc <HAL_GetTick>
 8002004:	1b00      	subs	r0, r0, r4
 8002006:	2802      	cmp	r0, #2
 8002008:	d9f6      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3bc>
 800200a:	e65f      	b.n	8001ccc <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200c:	2a01      	cmp	r2, #1
 800200e:	f43f ae19 	beq.w	8001c44 <HAL_RCC_OscConfig+0x8>
        pll_config = RCC->CFGR;
 8002012:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002016:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800201a:	429a      	cmp	r2, r3
 800201c:	f47f ae12 	bne.w	8001c44 <HAL_RCC_OscConfig+0x8>
 8002020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002022:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002026:	1ac0      	subs	r0, r0, r3
 8002028:	bf18      	it	ne
 800202a:	2001      	movne	r0, #1
 800202c:	e60b      	b.n	8001c46 <HAL_RCC_OscConfig+0xa>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	42420068 	.word	0x42420068
 8002038:	42420060 	.word	0x42420060

0800203c <HAL_RCC_GetSysClockFreq>:
{
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002040:	466a      	mov	r2, sp
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002044:	f103 0508 	add.w	r5, r3, #8
 8002048:	4614      	mov	r4, r2
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	3308      	adds	r3, #8
 8002050:	c403      	stmia	r4!, {r0, r1}
 8002052:	42ab      	cmp	r3, r5
 8002054:	4622      	mov	r2, r4
 8002056:	d1f7      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0xc>
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	6020      	str	r0, [r4, #0]
 800205e:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002062:	ac04      	add	r4, sp, #16
 8002064:	f103 0510 	add.w	r5, r3, #16
 8002068:	4622      	mov	r2, r4
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	3308      	adds	r3, #8
 8002070:	c203      	stmia	r2!, {r0, r1}
 8002072:	42ab      	cmp	r3, r5
 8002074:	4614      	mov	r4, r2
 8002076:	d1f7      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8002078:	491e      	ldr	r1, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800207c:	f003 020c 	and.w	r2, r3, #12
 8002080:	2a08      	cmp	r2, #8
 8002082:	d131      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002084:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002088:	a808      	add	r0, sp, #32
 800208a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800208e:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002092:	d526      	bpl.n	80020e2 <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002094:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4403      	add	r3, r0
 800209c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80020a0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80020a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020a8:	d016      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80020aa:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80020ac:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80020ae:	f3c4 2403 	ubfx	r4, r4, #8, #4
 80020b2:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80020b4:	fba4 4506 	umull	r4, r5, r4, r6
 80020b8:	fba4 0103 	umull	r0, r1, r4, r3
 80020bc:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80020c0:	f3c7 1303 	ubfx	r3, r7, #4, #4
 80020c4:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80020c6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ca:	f7fe ffbd 	bl	8001048 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80020ce:	2e0d      	cmp	r6, #13
 80020d0:	d100      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x98>
          pllclk = pllclk / 2;
 80020d2:	0840      	lsrs	r0, r0, #1
}
 80020d4:	b009      	add	sp, #36	; 0x24
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80020d8:	fb03 f006 	mul.w	r0, r3, r6
 80020dc:	fbb0 f0f2 	udiv	r0, r0, r2
 80020e0:	e7f5      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e4:	4370      	muls	r0, r6
 80020e6:	e7f5      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 80020ea:	e7f3      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x98>
 80020ec:	08006b58 	.word	0x08006b58
 80020f0:	08006b66 	.word	0x08006b66
 80020f4:	40021000 	.word	0x40021000
 80020f8:	007a1200 	.word	0x007a1200
 80020fc:	003d0900 	.word	0x003d0900

08002100 <HAL_RCC_ClockConfig>:
{
 8002100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002104:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002106:	4604      	mov	r4, r0
 8002108:	b910      	cbnz	r0, 8002110 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800210a:	2001      	movs	r0, #1
 800210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4a45      	ldr	r2, [pc, #276]	; (8002228 <HAL_RCC_ClockConfig+0x128>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	428b      	cmp	r3, r1
 800211a:	d329      	bcc.n	8002170 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	6821      	ldr	r1, [r4, #0]
 800211e:	078e      	lsls	r6, r1, #30
 8002120:	d431      	bmi.n	8002186 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002122:	07ca      	lsls	r2, r1, #31
 8002124:	d444      	bmi.n	80021b0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <HAL_RCC_ClockConfig+0x128>)
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	429d      	cmp	r5, r3
 8002130:	d367      	bcc.n	8002202 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002132:	6822      	ldr	r2, [r4, #0]
 8002134:	4d3d      	ldr	r5, [pc, #244]	; (800222c <HAL_RCC_ClockConfig+0x12c>)
 8002136:	f012 0f04 	tst.w	r2, #4
 800213a:	d16e      	bne.n	800221a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	0713      	lsls	r3, r2, #28
 800213e:	d506      	bpl.n	800214e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002140:	686b      	ldr	r3, [r5, #4]
 8002142:	6922      	ldr	r2, [r4, #16]
 8002144:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002148:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800214c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214e:	f7ff ff75 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8002152:	686b      	ldr	r3, [r5, #4]
 8002154:	4a36      	ldr	r2, [pc, #216]	; (8002230 <HAL_RCC_ClockConfig+0x130>)
 8002156:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	40d8      	lsrs	r0, r3
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_RCC_ClockConfig+0x134>)
 8002160:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_RCC_ClockConfig+0x138>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	f7ff f8f7 	bl	8001358 <HAL_InitTick>
  return HAL_OK;
 800216a:	2000      	movs	r0, #0
 800216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f023 0307 	bic.w	r3, r3, #7
 8002176:	430b      	orrs	r3, r1
 8002178:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4299      	cmp	r1, r3
 8002182:	d1c2      	bne.n	800210a <HAL_RCC_ClockConfig+0xa>
 8002184:	e7ca      	b.n	800211c <HAL_RCC_ClockConfig+0x1c>
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	bf1e      	ittt	ne
 800218e:	685a      	ldrne	r2, [r3, #4]
 8002190:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002194:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002198:	bf42      	ittt	mi
 800219a:	685a      	ldrmi	r2, [r3, #4]
 800219c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80021a0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	68a0      	ldr	r0, [r4, #8]
 80021a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021aa:	4302      	orrs	r2, r0
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e7b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b0:	6862      	ldr	r2, [r4, #4]
 80021b2:	4e1e      	ldr	r6, [pc, #120]	; (800222c <HAL_RCC_ClockConfig+0x12c>)
 80021b4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b8:	d11b      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	d0a4      	beq.n	800210a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c0:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80021ce:	f7ff f905 	bl	80013dc <HAL_GetTick>
 80021d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d4:	6873      	ldr	r3, [r6, #4]
 80021d6:	6862      	ldr	r2, [r4, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021e0:	d0a1      	beq.n	8002126 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7ff f8fb 	bl	80013dc <HAL_GetTick>
 80021e6:	1bc0      	subs	r0, r0, r7
 80021e8:	4540      	cmp	r0, r8
 80021ea:	d9f3      	bls.n	80021d4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80021ec:	2003      	movs	r0, #3
}
 80021ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f2:	2a02      	cmp	r2, #2
 80021f4:	d102      	bne.n	80021fc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021fa:	e7e0      	b.n	80021be <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	f013 0f02 	tst.w	r3, #2
 8002200:	e7dd      	b.n	80021be <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f023 0307 	bic.w	r3, r3, #7
 8002208:	432b      	orrs	r3, r5
 800220a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220c:	6813      	ldr	r3, [r2, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	429d      	cmp	r5, r3
 8002214:	f47f af79 	bne.w	800210a <HAL_RCC_ClockConfig+0xa>
 8002218:	e78b      	b.n	8002132 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221a:	686b      	ldr	r3, [r5, #4]
 800221c:	68e1      	ldr	r1, [r4, #12]
 800221e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002222:	430b      	orrs	r3, r1
 8002224:	606b      	str	r3, [r5, #4]
 8002226:	e789      	b.n	800213c <HAL_RCC_ClockConfig+0x3c>
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	08006f0d 	.word	0x08006f0d
 8002234:	200000a0 	.word	0x200000a0
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x14>)
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	4a03      	ldr	r2, [pc, #12]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800224a:	6810      	ldr	r0, [r2, #0]
}
 800224c:	40d8      	lsrs	r0, r3
 800224e:	4770      	bx	lr
 8002250:	40021000 	.word	0x40021000
 8002254:	08006f1d 	.word	0x08006f1d
 8002258:	200000a0 	.word	0x200000a0

0800225c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x14>)
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	4a03      	ldr	r2, [pc, #12]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800226a:	6810      	ldr	r0, [r2, #0]
}
 800226c:	40d8      	lsrs	r0, r3
 800226e:	4770      	bx	lr
 8002270:	40021000 	.word	0x40021000
 8002274:	08006f1d 	.word	0x08006f1d
 8002278:	200000a0 	.word	0x200000a0

0800227c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800227c:	6803      	ldr	r3, [r0, #0]
{
 800227e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002282:	f013 0f01 	tst.w	r3, #1
{
 8002286:	4605      	mov	r5, r0
 8002288:	4c57      	ldr	r4, [pc, #348]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800228a:	d01f      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228c:	69e3      	ldr	r3, [r4, #28]
 800228e:	00da      	lsls	r2, r3, #3
 8002290:	d447      	bmi.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002292:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	69e3      	ldr	r3, [r4, #28]
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	61e3      	str	r3, [r4, #28]
 800229c:	69e3      	ldr	r3, [r4, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4e51      	ldr	r6, [pc, #324]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80022a8:	6833      	ldr	r3, [r6, #0]
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	d53b      	bpl.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ae:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022b4:	d14b      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b6:	6a23      	ldr	r3, [r4, #32]
 80022b8:	686a      	ldr	r2, [r5, #4]
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	4313      	orrs	r3, r2
 80022c0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c2:	b11f      	cbz	r7, 80022cc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	69e3      	ldr	r3, [r4, #28]
 80022c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ca:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022cc:	682a      	ldr	r2, [r5, #0]
 80022ce:	0793      	lsls	r3, r2, #30
 80022d0:	d505      	bpl.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d2:	6863      	ldr	r3, [r4, #4]
 80022d4:	68a9      	ldr	r1, [r5, #8]
 80022d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022da:	430b      	orrs	r3, r1
 80022dc:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80022de:	0757      	lsls	r7, r2, #29
 80022e0:	d505      	bpl.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80022e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022e4:	68e9      	ldr	r1, [r5, #12]
 80022e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80022ea:	430b      	orrs	r3, r1
 80022ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80022ee:	0716      	lsls	r6, r2, #28
 80022f0:	d505      	bpl.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80022f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022f4:	692a      	ldr	r2, [r5, #16]
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	4313      	orrs	r3, r2
 80022fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80022fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002300:	0398      	lsls	r0, r3, #14
 8002302:	d466      	bmi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002304:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002306:	0359      	lsls	r1, r3, #13
 8002308:	d463      	bmi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800230a:	6828      	ldr	r0, [r5, #0]
 800230c:	f010 0010 	ands.w	r0, r0, #16
 8002310:	d01a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002312:	6863      	ldr	r3, [r4, #4]
 8002314:	69ea      	ldr	r2, [r5, #28]
 8002316:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800231a:	4313      	orrs	r3, r2
 800231c:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800231e:	2000      	movs	r0, #0
 8002320:	e012      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2700      	movs	r7, #0
 8002324:	e7bf      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	6833      	ldr	r3, [r6, #0]
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800232e:	f7ff f855 	bl	80013dc <HAL_GetTick>
 8002332:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	6833      	ldr	r3, [r6, #0]
 8002336:	05d8      	lsls	r0, r3, #23
 8002338:	d4b9      	bmi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x32>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7ff f84f 	bl	80013dc <HAL_GetTick>
 800233e:	eba0 0008 	sub.w	r0, r0, r8
 8002342:	2864      	cmp	r0, #100	; 0x64
 8002344:	d9f6      	bls.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
}
 8002348:	b002      	add	sp, #8
 800234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800234e:	686a      	ldr	r2, [r5, #4]
 8002350:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002354:	4293      	cmp	r3, r2
 8002356:	d0ae      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002358:	2001      	movs	r0, #1
 800235a:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800235c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800235e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002360:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002366:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002368:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800236a:	07d9      	lsls	r1, r3, #31
 800236c:	d5a3      	bpl.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800236e:	f7ff f835 	bl	80013dc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002376:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	6a23      	ldr	r3, [r4, #32]
 800237a:	079a      	lsls	r2, r3, #30
 800237c:	d49b      	bmi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7ff f82d 	bl	80013dc <HAL_GetTick>
 8002382:	1b80      	subs	r0, r0, r6
 8002384:	4540      	cmp	r0, r8
 8002386:	d9f7      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002388:	e7dd      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	69a9      	ldr	r1, [r5, #24]
 800238e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002392:	d004      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x122>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002394:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002396:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800239a:	428a      	cmp	r2, r1
 800239c:	d122      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800239e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a4:	430b      	orrs	r3, r1
 80023a6:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80023a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023aa:	696a      	ldr	r2, [r5, #20]
 80023ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023b0:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 80023b2:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80023b4:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80023b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023ba:	f7ff f80f 	bl	80013dc <HAL_GetTick>
 80023be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	009a      	lsls	r2, r3, #2
 80023c4:	d4a1      	bmi.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023c6:	f7ff f809 	bl	80013dc <HAL_GetTick>
 80023ca:	1b80      	subs	r0, r0, r6
 80023cc:	2864      	cmp	r0, #100	; 0x64
 80023ce:	d9f7      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80023d0:	e7b9      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	d5d8      	bpl.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80023d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023da:	696a      	ldr	r2, [r5, #20]
 80023dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d092      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 80023e4:	2001      	movs	r0, #1
 80023e6:	e7af      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	42420440 	.word	0x42420440
 80023f4:	42420070 	.word	0x42420070

080023f8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f8:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 80023fa:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800240c:	bf1e      	ittt	ne
 800240e:	681a      	ldrne	r2, [r3, #0]
 8002410:	f042 0201 	orrne.w	r2, r2, #1
 8002414:	601a      	strne	r2, [r3, #0]
}
 8002416:	4770      	bx	lr

08002418 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002418:	6803      	ldr	r3, [r0, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002422:	f241 1211 	movw	r2, #4369	; 0x1111
 8002426:	6a19      	ldr	r1, [r3, #32]
 8002428:	4211      	tst	r1, r2
 800242a:	d108      	bne.n	800243e <HAL_TIM_Base_Stop_IT+0x26>
 800242c:	f240 4244 	movw	r2, #1092	; 0x444
 8002430:	6a19      	ldr	r1, [r3, #32]
 8002432:	4211      	tst	r1, r2
 8002434:	bf02      	ittt	eq
 8002436:	681a      	ldreq	r2, [r3, #0]
 8002438:	f022 0201 	biceq.w	r2, r2, #1
 800243c:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800243e:	2000      	movs	r0, #0
 8002440:	4770      	bx	lr

08002442 <HAL_TIM_OC_DelayElapsedCallback>:
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_IC_CaptureCallback>:
 8002444:	4770      	bx	lr

08002446 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_TriggerCallback>:
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800244a:	6803      	ldr	r3, [r0, #0]
{
 800244c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800244e:	691a      	ldr	r2, [r3, #16]
{
 8002450:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002452:	0791      	lsls	r1, r2, #30
 8002454:	d50e      	bpl.n	8002474 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	0792      	lsls	r2, r2, #30
 800245a:	d50b      	bpl.n	8002474 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800245c:	f06f 0202 	mvn.w	r2, #2
 8002460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002462:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002464:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002466:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002468:	079b      	lsls	r3, r3, #30
 800246a:	d077      	beq.n	800255c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246c:	f7ff ffea 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002470:	2300      	movs	r3, #0
 8002472:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	0750      	lsls	r0, r2, #29
 800247a:	d510      	bpl.n	800249e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	0751      	lsls	r1, r2, #29
 8002480:	d50d      	bpl.n	800249e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002482:	f06f 0204 	mvn.w	r2, #4
 8002486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002488:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800248a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800248e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002492:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002494:	d068      	beq.n	8002568 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	f7ff ffd5 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	2300      	movs	r3, #0
 800249c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	0712      	lsls	r2, r2, #28
 80024a4:	d50f      	bpl.n	80024c6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	0710      	lsls	r0, r2, #28
 80024aa:	d50c      	bpl.n	80024c6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024ac:	f06f 0208 	mvn.w	r2, #8
 80024b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b2:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b8:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024bc:	d05a      	beq.n	8002574 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	f7ff ffc1 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	2300      	movs	r3, #0
 80024c4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	06d2      	lsls	r2, r2, #27
 80024cc:	d510      	bpl.n	80024f0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	06d0      	lsls	r0, r2, #27
 80024d2:	d50d      	bpl.n	80024f0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d4:	f06f 0210 	mvn.w	r2, #16
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024da:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024dc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e6:	d04b      	beq.n	8002580 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80024e8:	f7ff ffac 	bl	8002444 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	2300      	movs	r3, #0
 80024ee:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	07d1      	lsls	r1, r2, #31
 80024f6:	d508      	bpl.n	800250a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	07d2      	lsls	r2, r2, #31
 80024fc:	d505      	bpl.n	800250a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024fe:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002502:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002504:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002506:	f000 fd79 	bl	8002ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	0610      	lsls	r0, r2, #24
 8002510:	d508      	bpl.n	8002524 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	0611      	lsls	r1, r2, #24
 8002516:	d505      	bpl.n	8002524 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002518:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800251c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800251e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002520:	f000 f8af 	bl	8002682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	0652      	lsls	r2, r2, #25
 800252a:	d508      	bpl.n	800253e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	0650      	lsls	r0, r2, #25
 8002530:	d505      	bpl.n	800253e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002532:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002536:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002538:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800253a:	f7ff ff85 	bl	8002448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	0691      	lsls	r1, r2, #26
 8002544:	d522      	bpl.n	800258c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	0692      	lsls	r2, r2, #26
 800254a:	d51f      	bpl.n	800258c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800254c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002550:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002556:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002558:	f000 b892 	b.w	8002680 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800255c:	f7ff ff71 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff ff70 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
 8002566:	e783      	b.n	8002470 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002568:	f7ff ff6b 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff ff6a 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
 8002572:	e792      	b.n	800249a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002574:	f7ff ff65 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff ff64 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
 800257e:	e7a0      	b.n	80024c2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002580:	f7ff ff5f 	bl	8002442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff ff5e 	bl	8002446 <HAL_TIM_PWM_PulseFinishedCallback>
 800258a:	e7af      	b.n	80024ec <HAL_TIM_IRQHandler+0xa2>
 800258c:	bd10      	pop	{r4, pc}
	...

08002590 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8002592:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002594:	4290      	cmp	r0, r2
 8002596:	d00e      	beq.n	80025b6 <TIM_Base_SetConfig+0x26>
 8002598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800259c:	d00b      	beq.n	80025b6 <TIM_Base_SetConfig+0x26>
 800259e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025a2:	4290      	cmp	r0, r2
 80025a4:	d007      	beq.n	80025b6 <TIM_Base_SetConfig+0x26>
 80025a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025aa:	4290      	cmp	r0, r2
 80025ac:	d003      	beq.n	80025b6 <TIM_Base_SetConfig+0x26>
 80025ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025b2:	4290      	cmp	r0, r2
 80025b4:	d119      	bne.n	80025ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80025b6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <TIM_Base_SetConfig+0x7c>)
 80025c0:	4290      	cmp	r0, r2
 80025c2:	d00e      	beq.n	80025e2 <TIM_Base_SetConfig+0x52>
 80025c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025c8:	d00b      	beq.n	80025e2 <TIM_Base_SetConfig+0x52>
 80025ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025ce:	4290      	cmp	r0, r2
 80025d0:	d007      	beq.n	80025e2 <TIM_Base_SetConfig+0x52>
 80025d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d6:	4290      	cmp	r0, r2
 80025d8:	d003      	beq.n	80025e2 <TIM_Base_SetConfig+0x52>
 80025da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025de:	4290      	cmp	r0, r2
 80025e0:	d103      	bne.n	80025ea <TIM_Base_SetConfig+0x5a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80025e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025ea:	694a      	ldr	r2, [r1, #20]
 80025ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80025f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f4:	688b      	ldr	r3, [r1, #8]
 80025f6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f8:	680b      	ldr	r3, [r1, #0]
 80025fa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <TIM_Base_SetConfig+0x7c>)
 80025fe:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002600:	bf04      	itt	eq
 8002602:	690b      	ldreq	r3, [r1, #16]
 8002604:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002606:	2301      	movs	r3, #1
 8002608:	6143      	str	r3, [r0, #20]
 800260a:	4770      	bx	lr
 800260c:	40012c00 	.word	0x40012c00

08002610 <HAL_TIM_Base_Init>:
{
 8002610:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002612:	4604      	mov	r4, r0
 8002614:	b1a0      	cbz	r0, 8002640 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800261a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261e:	b91b      	cbnz	r3, 8002628 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002620:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002624:	f002 ffec 	bl	8005600 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800262c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	1d21      	adds	r1, r4, #4
 8002632:	f7ff ffad 	bl	8002590 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002636:	2301      	movs	r3, #1
  return HAL_OK;
 8002638:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800263a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800263e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
}
 8002642:	bd10      	pop	{r4, pc}

08002644 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002644:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002648:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800264a:	2b01      	cmp	r3, #1
 800264c:	f04f 0302 	mov.w	r3, #2
 8002650:	d014      	beq.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002652:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002658:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800265a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800265c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800265e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002660:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002668:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800266a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800266c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800266e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002670:	2301      	movs	r3, #1
 8002672:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002676:	2300      	movs	r3, #0
 8002678:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800267c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800267e:	bd30      	pop	{r4, r5, pc}

08002680 <HAL_TIMEx_CommutCallback>:
 8002680:	4770      	bx	lr

08002682 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002682:	4770      	bx	lr

08002684 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002684:	6803      	ldr	r3, [r0, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800268c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002696:	2320      	movs	r3, #32
 8002698:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800269c:	4770      	bx	lr
	...

080026a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a4:	6803      	ldr	r3, [r0, #0]
 80026a6:	68c1      	ldr	r1, [r0, #12]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	2419      	movs	r4, #25
 80026ac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80026b0:	430a      	orrs	r2, r1
 80026b2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026b4:	6882      	ldr	r2, [r0, #8]
 80026b6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80026b8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ba:	4302      	orrs	r2, r0
 80026bc:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80026be:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80026c2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026c6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	69a9      	ldr	r1, [r5, #24]
 80026d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026d4:	430a      	orrs	r2, r1
 80026d6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <UART_SetConfig+0x70>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d114      	bne.n	8002708 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026de:	f7ff fdbd 	bl	800225c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026e2:	4360      	muls	r0, r4
 80026e4:	686c      	ldr	r4, [r5, #4]
 80026e6:	2264      	movs	r2, #100	; 0x64
 80026e8:	00a4      	lsls	r4, r4, #2
 80026ea:	fbb0 f0f4 	udiv	r0, r0, r4
 80026ee:	fbb0 f4f2 	udiv	r4, r0, r2
 80026f2:	fb02 0314 	mls	r3, r2, r4, r0
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	3332      	adds	r3, #50	; 0x32
 80026fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80026fe:	6829      	ldr	r1, [r5, #0]
 8002700:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002704:	608b      	str	r3, [r1, #8]
 8002706:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002708:	f7ff fd98 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 800270c:	e7e9      	b.n	80026e2 <UART_SetConfig+0x42>
 800270e:	bf00      	nop
 8002710:	40013800 	.word	0x40013800

08002714 <HAL_UART_Init>:
{
 8002714:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002716:	4604      	mov	r4, r0
 8002718:	b340      	cbz	r0, 800276c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800271a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800271e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002722:	b91b      	cbnz	r3, 800272c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002724:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002728:	f002 ff9e 	bl	8005668 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800272e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002734:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002736:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800273c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800273e:	f7ff ffaf 	bl	80026a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002744:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800274c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002754:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800275c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800275e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002760:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002762:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002766:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800276a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800276c:	2001      	movs	r0, #1
}
 800276e:	bd10      	pop	{r4, pc}

08002770 <HAL_UART_TxCpltCallback>:
 8002770:	4770      	bx	lr

08002772 <HAL_UART_RxCpltCallback>:
 8002772:	4770      	bx	lr

08002774 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002774:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002778:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800277a:	2b22      	cmp	r3, #34	; 0x22
 800277c:	d136      	bne.n	80027ec <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800277e:	6883      	ldr	r3, [r0, #8]
 8002780:	6901      	ldr	r1, [r0, #16]
 8002782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002786:	6802      	ldr	r2, [r0, #0]
 8002788:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800278a:	d123      	bne.n	80027d4 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800278c:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800278e:	b9e9      	cbnz	r1, 80027cc <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002794:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002798:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800279a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800279c:	3c01      	subs	r4, #1
 800279e:	b2a4      	uxth	r4, r4
 80027a0:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80027a2:	b98c      	cbnz	r4, 80027c8 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027a4:	6803      	ldr	r3, [r0, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	f022 0220 	bic.w	r2, r2, #32
 80027ac:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80027be:	2320      	movs	r3, #32
 80027c0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80027c4:	f7ff ffd5 	bl	8002772 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80027c8:	2000      	movs	r0, #0
}
 80027ca:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f823 2b01 	strh.w	r2, [r3], #1
 80027d2:	e7e1      	b.n	8002798 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027d4:	b921      	cbnz	r1, 80027e0 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	6852      	ldr	r2, [r2, #4]
 80027da:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e7dc      	b.n	800279a <UART_Receive_IT+0x26>
 80027e0:	6852      	ldr	r2, [r2, #4]
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	6281      	str	r1, [r0, #40]	; 0x28
 80027e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ea:	e7f7      	b.n	80027dc <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80027ec:	2002      	movs	r0, #2
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <HAL_UART_ErrorCallback>:
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027f4:	6803      	ldr	r3, [r0, #0]
{
 80027f6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027f8:	681a      	ldr	r2, [r3, #0]
{
 80027fa:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80027fc:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027fe:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002800:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002802:	d107      	bne.n	8002814 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002804:	0696      	lsls	r6, r2, #26
 8002806:	d55a      	bpl.n	80028be <HAL_UART_IRQHandler+0xca>
 8002808:	068d      	lsls	r5, r1, #26
 800280a:	d558      	bpl.n	80028be <HAL_UART_IRQHandler+0xca>
}
 800280c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002810:	f7ff bfb0 	b.w	8002774 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002814:	f015 0501 	ands.w	r5, r5, #1
 8002818:	d102      	bne.n	8002820 <HAL_UART_IRQHandler+0x2c>
 800281a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800281e:	d04e      	beq.n	80028be <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002820:	07d3      	lsls	r3, r2, #31
 8002822:	d505      	bpl.n	8002830 <HAL_UART_IRQHandler+0x3c>
 8002824:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002826:	bf42      	ittt	mi
 8002828:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800282a:	f043 0301 	orrmi.w	r3, r3, #1
 800282e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002830:	0750      	lsls	r0, r2, #29
 8002832:	d504      	bpl.n	800283e <HAL_UART_IRQHandler+0x4a>
 8002834:	b11d      	cbz	r5, 800283e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002836:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800283e:	0793      	lsls	r3, r2, #30
 8002840:	d504      	bpl.n	800284c <HAL_UART_IRQHandler+0x58>
 8002842:	b11d      	cbz	r5, 800284c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800284c:	0716      	lsls	r6, r2, #28
 800284e:	d504      	bpl.n	800285a <HAL_UART_IRQHandler+0x66>
 8002850:	b11d      	cbz	r5, 800285a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002852:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800285a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d066      	beq.n	800292e <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002860:	0695      	lsls	r5, r2, #26
 8002862:	d504      	bpl.n	800286e <HAL_UART_IRQHandler+0x7a>
 8002864:	0688      	lsls	r0, r1, #26
 8002866:	d502      	bpl.n	800286e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff ff83 	bl	8002774 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800286e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002870:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002872:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002874:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002876:	0711      	lsls	r1, r2, #28
 8002878:	d402      	bmi.n	8002880 <HAL_UART_IRQHandler+0x8c>
 800287a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800287e:	d01a      	beq.n	80028b6 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002880:	f7ff ff00 	bl	8002684 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	0652      	lsls	r2, r2, #25
 800288a:	d510      	bpl.n	80028ae <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800288e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002894:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002896:	b150      	cbz	r0, 80028ae <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_UART_IRQHandler+0x13c>)
 800289a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800289c:	f7ff f86c 	bl	8001978 <HAL_DMA_Abort_IT>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d044      	beq.n	800292e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80028a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028ac:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff ff9e 	bl	80027f0 <HAL_UART_ErrorCallback>
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80028b6:	f7ff ff9b 	bl	80027f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ba:	63e5      	str	r5, [r4, #60]	; 0x3c
 80028bc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028be:	0616      	lsls	r6, r2, #24
 80028c0:	d527      	bpl.n	8002912 <HAL_UART_IRQHandler+0x11e>
 80028c2:	060d      	lsls	r5, r1, #24
 80028c4:	d525      	bpl.n	8002912 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028c6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80028ca:	2a21      	cmp	r2, #33	; 0x21
 80028cc:	d12f      	bne.n	800292e <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ce:	68a2      	ldr	r2, [r4, #8]
 80028d0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80028d4:	6a22      	ldr	r2, [r4, #32]
 80028d6:	d117      	bne.n	8002908 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028d8:	8811      	ldrh	r1, [r2, #0]
 80028da:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80028de:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028e0:	6921      	ldr	r1, [r4, #16]
 80028e2:	b979      	cbnz	r1, 8002904 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80028e4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80028e6:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80028e8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80028ea:	3a01      	subs	r2, #1
 80028ec:	b292      	uxth	r2, r2
 80028ee:	84e2      	strh	r2, [r4, #38]	; 0x26
 80028f0:	b9ea      	cbnz	r2, 800292e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002904:	3201      	adds	r2, #1
 8002906:	e7ee      	b.n	80028e6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002908:	1c51      	adds	r1, r2, #1
 800290a:	6221      	str	r1, [r4, #32]
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	e7ea      	b.n	80028e8 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002912:	0650      	lsls	r0, r2, #25
 8002914:	d50b      	bpl.n	800292e <HAL_UART_IRQHandler+0x13a>
 8002916:	064a      	lsls	r2, r1, #25
 8002918:	d509      	bpl.n	800292e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800291a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800291c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800291e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002922:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002924:	2320      	movs	r3, #32
 8002926:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800292a:	f7ff ff21 	bl	8002770 <HAL_UART_TxCpltCallback>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	08002935 	.word	0x08002935

08002934 <UART_DMAAbortOnError>:
{
 8002934:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002936:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002938:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800293a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800293c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800293e:	f7ff ff57 	bl	80027f0 <HAL_UART_ErrorCallback>
 8002942:	bd08      	pop	{r3, pc}

08002944 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002944:	880b      	ldrh	r3, [r1, #0]
{
 8002946:	b570      	push	{r4, r5, r6, lr}
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002948:	2b05      	cmp	r3, #5
{
 800294a:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800294c:	d12e      	bne.n	80029ac <eMBFuncReadCoils+0x68>
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800294e:	f240 71ce 	movw	r1, #1998	; 0x7ce
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002952:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002954:	7902      	ldrb	r2, [r0, #4]
 8002956:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 800295a:	1e53      	subs	r3, r2, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	428b      	cmp	r3, r1
 8002960:	d824      	bhi.n	80029ac <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002962:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002964:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002966:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002968:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 800296a:	2301      	movs	r3, #1
 800296c:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 800296e:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002970:	f012 0f07 	tst.w	r2, #7
 8002974:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002978:	bf18      	it	ne
 800297a:	3401      	addne	r4, #1
            *usLen += 1;
 800297c:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 800297e:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002980:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002982:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002984:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002986:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 800298a:	3301      	adds	r3, #1
        usRegAddress++;
 800298c:	3101      	adds	r1, #1
            *usLen += 1;
 800298e:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002990:	b289      	uxth	r1, r1
 8002992:	2300      	movs	r3, #0
 8002994:	3002      	adds	r0, #2
 8002996:	f002 fd11 	bl	80053bc <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800299a:	b118      	cbz	r0, 80029a4 <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800299c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 80029a0:	f000 b9bc 	b.w	8002d1c <prveMBError2Exception>
                *usLen += ucNBytes;;
 80029a4:	882a      	ldrh	r2, [r5, #0]
 80029a6:	4414      	add	r4, r2
 80029a8:	802c      	strh	r4, [r5, #0]
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80029ac:	2003      	movs	r0, #3
}
 80029ae:	bd70      	pop	{r4, r5, r6, pc}

080029b0 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80029b0:	880b      	ldrh	r3, [r1, #0]
{
 80029b2:	b513      	push	{r0, r1, r4, lr}
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d11d      	bne.n	80029f4 <eMBFuncWriteCoil+0x44>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80029b8:	7903      	ldrb	r3, [r0, #4]
 80029ba:	b9db      	cbnz	r3, 80029f4 <eMBFuncWriteCoil+0x44>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80029bc:	78c4      	ldrb	r4, [r0, #3]
 80029be:	1e62      	subs	r2, r4, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	2afd      	cmp	r2, #253	; 0xfd
 80029c4:	d916      	bls.n	80029f4 <eMBFuncWriteCoil+0x44>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80029c6:	2cff      	cmp	r4, #255	; 0xff
            ucBuf[1] = 0;
 80029c8:	f88d 3005 	strb.w	r3, [sp, #5]
            {
                ucBuf[0] = 1;
 80029cc:	bf08      	it	eq
 80029ce:	2301      	moveq	r3, #1
            }
            else
            {
                ucBuf[0] = 0;
 80029d0:	f88d 3004 	strb.w	r3, [sp, #4]
            }
            eRegStatus =
 80029d4:	2301      	movs	r3, #1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80029d6:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80029d8:	7881      	ldrb	r1, [r0, #2]
            eRegStatus =
 80029da:	a801      	add	r0, sp, #4
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80029dc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 80029e0:	3101      	adds	r1, #1
            eRegStatus =
 80029e2:	461a      	mov	r2, r3
 80029e4:	b289      	uxth	r1, r1
 80029e6:	f002 fce9 	bl	80053bc <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80029ea:	b128      	cbz	r0, 80029f8 <eMBFuncWriteCoil+0x48>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80029ec:	f000 f996 	bl	8002d1c <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80029f0:	b002      	add	sp, #8
 80029f2:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80029f4:	2003      	movs	r0, #3
 80029f6:	e7fb      	b.n	80029f0 <eMBFuncWriteCoil+0x40>
 80029f8:	e7fa      	b.n	80029f0 <eMBFuncWriteCoil+0x40>

080029fa <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80029fa:	880b      	ldrh	r3, [r1, #0]
{
 80029fc:	b510      	push	{r4, lr}
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80029fe:	2b05      	cmp	r3, #5
{
 8002a00:	460c      	mov	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002a02:	d924      	bls.n	8002a4e <eMBFuncWriteMultipleCoils+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002a04:	78c3      	ldrb	r3, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002a06:	7902      	ldrb	r2, [r0, #4]
 8002a08:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002a0c:	f012 0f07 	tst.w	r2, #7
 8002a10:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002a14:	f102 31ff 	add.w	r1, r2, #4294967295
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002a18:	bf18      	it	ne
 8002a1a:	3301      	addne	r3, #1
        if( ( usCoilCnt >= 1 ) &&
 8002a1c:	f5b1 6ff6 	cmp.w	r1, #1968	; 0x7b0
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002a20:	b2db      	uxtb	r3, r3
        if( ( usCoilCnt >= 1 ) &&
 8002a22:	d214      	bcs.n	8002a4e <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002a24:	7941      	ldrb	r1, [r0, #5]
 8002a26:	4299      	cmp	r1, r3
 8002a28:	d111      	bne.n	8002a4e <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002a2a:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002a2c:	7881      	ldrb	r1, [r0, #2]
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002a2e:	3006      	adds	r0, #6
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002a30:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002a34:	3101      	adds	r1, #1
            eRegStatus =
 8002a36:	2301      	movs	r3, #1
 8002a38:	b289      	uxth	r1, r1
 8002a3a:	f002 fcbf 	bl	80053bc <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002a3e:	b118      	cbz	r0, 8002a48 <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002a44:	f000 b96a 	b.w	8002d1c <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002a48:	2205      	movs	r2, #5
 8002a4a:	8022      	strh	r2, [r4, #0]
 8002a4c:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002a4e:	2003      	movs	r0, #3
}
 8002a50:	bd10      	pop	{r4, pc}

08002a52 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002a52:	880b      	ldrh	r3, [r1, #0]
{
 8002a54:	b570      	push	{r4, r5, r6, lr}
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002a56:	2b05      	cmp	r3, #5
{
 8002a58:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002a5a:	d12d      	bne.n	8002ab8 <eMBFuncReadDiscreteInputs+0x66>
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002a5c:	f240 71ce 	movw	r1, #1998	; 0x7ce
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002a60:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002a62:	7902      	ldrb	r2, [r0, #4]
 8002a64:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8002a68:	1e53      	subs	r3, r2, #1
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d823      	bhi.n	8002ab8 <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002a70:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002a72:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002a74:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002a76:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002a7c:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002a7e:	f012 0f07 	tst.w	r2, #7
 8002a82:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002a86:	bf18      	it	ne
 8002a88:	3401      	addne	r4, #1
            *usLen += 1;
 8002a8a:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002a8c:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002a8e:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002a90:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002a92:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002a94:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002a98:	3301      	adds	r3, #1
        usRegAddress++;
 8002a9a:	3101      	adds	r1, #1
            *usLen += 1;
 8002a9c:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002a9e:	b289      	uxth	r1, r1
 8002aa0:	3002      	adds	r0, #2
 8002aa2:	f002 fcd5 	bl	8005450 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002aa6:	b118      	cbz	r0, 8002ab0 <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002aac:	f000 b936 	b.w	8002d1c <prveMBError2Exception>
                *usLen += ucNBytes;;
 8002ab0:	882a      	ldrh	r2, [r5, #0]
 8002ab2:	4414      	add	r4, r2
 8002ab4:	802c      	strh	r4, [r5, #0]
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ab8:	2003      	movs	r0, #3
}
 8002aba:	bd70      	pop	{r4, r5, r6, pc}

08002abc <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002abc:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002abe:	880b      	ldrh	r3, [r1, #0]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d10f      	bne.n	8002ae4 <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002ac4:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002ac6:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002ac8:	3003      	adds	r0, #3
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002aca:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002ace:	2301      	movs	r3, #1
        usRegAddress++;
 8002ad0:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	b289      	uxth	r1, r1
 8002ad6:	f002 fc15 	bl	8005304 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002ada:	b128      	cbz	r0, 8002ae8 <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            eStatus = prveMBError2Exception( eRegStatus );
 8002ae0:	f000 b91c 	b.w	8002d1c <prveMBError2Exception>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	bd08      	pop	{r3, pc}
}
 8002ae8:	bd08      	pop	{r3, pc}

08002aea <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002aea:	880b      	ldrh	r3, [r1, #0]
{
 8002aec:	b510      	push	{r4, lr}
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002aee:	2b05      	cmp	r3, #5
{
 8002af0:	460c      	mov	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002af2:	d91d      	bls.n	8002b30 <eMBFuncWriteMultipleHoldingRegister+0x46>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002af4:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002af6:	7902      	ldrb	r2, [r0, #4]
 8002af8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 8002afc:	1e53      	subs	r3, r2, #1
 8002afe:	2b77      	cmp	r3, #119	; 0x77
 8002b00:	d816      	bhi.n	8002b30 <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002b02:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002b04:	7941      	ldrb	r1, [r0, #5]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4299      	cmp	r1, r3
 8002b0a:	d111      	bne.n	8002b30 <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002b0c:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002b0e:	7881      	ldrb	r1, [r0, #2]
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8002b10:	3006      	adds	r0, #6
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002b12:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002b16:	3101      	adds	r1, #1
            eRegStatus =
 8002b18:	2301      	movs	r3, #1
 8002b1a:	b289      	uxth	r1, r1
 8002b1c:	f002 fbf2 	bl	8005304 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002b20:	b118      	cbz	r0, 8002b2a <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002b26:	f000 b8f9 	b.w	8002d1c <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	8022      	strh	r2, [r4, #0]
 8002b2e:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002b30:	2003      	movs	r0, #3
}
 8002b32:	bd10      	pop	{r4, pc}

08002b34 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002b36:	880b      	ldrh	r3, [r1, #0]
{
 8002b38:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d124      	bne.n	8002b88 <eMBFuncReadHoldingRegister+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002b3e:	7902      	ldrb	r2, [r0, #4]
 8002b40:	b295      	uxth	r5, r2

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002b42:	1e6b      	subs	r3, r5, #1
 8002b44:	2b7c      	cmp	r3, #124	; 0x7c
 8002b46:	d81f      	bhi.n	8002b88 <eMBFuncReadHoldingRegister+0x54>
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002b48:	2603      	movs	r6, #3
            *usLen = MB_PDU_FUNC_OFF;
 8002b4a:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002b4c:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002b4e:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002b50:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002b52:	7006      	strb	r6, [r0, #0]
            *usLen += 1;
 8002b54:	8826      	ldrh	r6, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002b56:	0052      	lsls	r2, r2, #1
            *usLen += 1;
 8002b58:	3601      	adds	r6, #1
 8002b5a:	8026      	strh	r6, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002b5c:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 8002b5e:	8822      	ldrh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002b60:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *usLen += 1;
 8002b64:	3201      	adds	r2, #1
        usRegAddress++;
 8002b66:	3101      	adds	r1, #1
            *usLen += 1;
 8002b68:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8002b6a:	b289      	uxth	r1, r1
 8002b6c:	462a      	mov	r2, r5
 8002b6e:	3002      	adds	r0, #2
 8002b70:	f002 fbc8 	bl	8005304 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002b74:	b118      	cbz	r0, 8002b7e <eMBFuncReadHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002b76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002b7a:	f000 b8cf 	b.w	8002d1c <prveMBError2Exception>
                *usLen += usRegCount * 2;
 8002b7e:	8822      	ldrh	r2, [r4, #0]
 8002b80:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8002b84:	8025      	strh	r5, [r4, #0]
 8002b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002b88:	2003      	movs	r0, #3
}
 8002b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b8c <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002b90:	880b      	ldrh	r3, [r1, #0]
{
 8002b92:	4604      	mov	r4, r0
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002b94:	2b09      	cmp	r3, #9
{
 8002b96:	460d      	mov	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002b98:	d93c      	bls.n	8002c14 <eMBFuncReadWriteMultipleHoldingRegister+0x88>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002b9a:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8002b9c:	7907      	ldrb	r7, [r0, #4]
 8002b9e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002ba2:	1e7b      	subs	r3, r7, #1
 8002ba4:	2b7c      	cmp	r3, #124	; 0x7c
 8002ba6:	d838      	bhi.n	8002c1a <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002ba8:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002baa:	7a02      	ldrb	r2, [r0, #8]
 8002bac:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002bb0:	1e53      	subs	r3, r2, #1
 8002bb2:	2b78      	cmp	r3, #120	; 0x78
 8002bb4:	d831      	bhi.n	8002c1a <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002bb6:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002bb8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002bbc:	d12d      	bne.n	8002c1a <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002bbe:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002bc0:	7981      	ldrb	r1, [r0, #6]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8002bc2:	f890 9001 	ldrb.w	r9, [r0, #1]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002bc6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8002bca:	3101      	adds	r1, #1
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002bcc:	7886      	ldrb	r6, [r0, #2]
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002bce:	2301      	movs	r3, #1
 8002bd0:	b289      	uxth	r1, r1
 8002bd2:	300a      	adds	r0, #10
 8002bd4:	f002 fb96 	bl	8005304 <eMBRegHoldingCB>
 8002bd8:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002bda:	bb08      	cbnz	r0, 8002c20 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002bdc:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 8002bde:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002be0:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8002be2:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002be4:	ea4f 0847 	mov.w	r8, r7, lsl #1
                *usLen += 1;
 8002be8:	3201      	adds	r2, #1
 8002bea:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002bec:	f884 8001 	strb.w	r8, [r4, #1]
                *usLen += 1;
 8002bf0:	882a      	ldrh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002bf2:	ea46 2109 	orr.w	r1, r6, r9, lsl #8
                *usLen += 1;
 8002bf6:	3201      	adds	r2, #1
        usRegReadAddress++;
 8002bf8:	3101      	adds	r1, #1
                *usLen += 1;
 8002bfa:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 8002bfc:	b289      	uxth	r1, r1
 8002bfe:	463a      	mov	r2, r7
 8002c00:	1ca0      	adds	r0, r4, #2
 8002c02:	f002 fb7f 	bl	8005304 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8002c06:	b958      	cbnz	r0, 8002c20 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                {
                    *usLen += 2 * usRegReadCount;
 8002c08:	882b      	ldrh	r3, [r5, #0]
 8002c0a:	4498      	add	r8, r3
 8002c0c:	f8a5 8000 	strh.w	r8, [r5]
 8002c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eMBException    eStatus = MB_EX_NONE;
 8002c14:	2000      	movs	r0, #0
 8002c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c1a:	2003      	movs	r0, #3
        }
    }
    return eStatus;
 8002c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8002c20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002c24:	f000 b87a 	b.w	8002d1c <prveMBError2Exception>

08002c28 <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002c28:	880b      	ldrh	r3, [r1, #0]
{
 8002c2a:	b570      	push	{r4, r5, r6, lr}
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002c2c:	2b05      	cmp	r3, #5
{
 8002c2e:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002c30:	d124      	bne.n	8002c7c <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002c32:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002c34:	7902      	ldrb	r2, [r0, #4]
 8002c36:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8002c3a:	1e53      	subs	r3, r2, #1
 8002c3c:	2b7b      	cmp	r3, #123	; 0x7b
 8002c3e:	d81d      	bhi.n	8002c7c <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002c40:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002c42:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002c44:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002c46:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002c4c:	8823      	ldrh	r3, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8002c4e:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 8002c50:	3301      	adds	r3, #1
 8002c52:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8002c54:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8002c56:	8823      	ldrh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002c58:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002c5c:	3301      	adds	r3, #1
        usRegAddress++;
 8002c5e:	3101      	adds	r1, #1
            *usLen += 1;
 8002c60:	8023      	strh	r3, [r4, #0]

            eRegStatus =
 8002c62:	b289      	uxth	r1, r1
 8002c64:	3002      	adds	r0, #2
 8002c66:	f002 faf7 	bl	8005258 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002c6a:	b118      	cbz	r0, 8002c74 <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002c70:	f000 b854 	b.w	8002d1c <prveMBError2Exception>
                *usLen += usRegCount * 2;
 8002c74:	8822      	ldrh	r2, [r4, #0]
 8002c76:	4415      	add	r5, r2
 8002c78:	8025      	strh	r5, [r4, #0]
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c7c:	2003      	movs	r0, #3
}
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}

08002c80 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <eMBFuncReportSlaveID+0x1c>)
 8002c86:	4906      	ldr	r1, [pc, #24]	; (8002ca0 <eMBFuncReportSlaveID+0x20>)
 8002c88:	881c      	ldrh	r4, [r3, #0]
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	4622      	mov	r2, r4
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002c8e:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002c90:	f003 f80a 	bl	8005ca8 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002c94:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8002c96:	2000      	movs	r0, #0
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000144 	.word	0x20000144
 8002ca0:	20000124 	.word	0x20000124

08002ca4 <xMBUtilSetBits>:
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8002ca4:	2a08      	cmp	r2, #8
{
 8002ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert( ucNBits <= 8 );
 8002ca8:	d905      	bls.n	8002cb6 <xMBUtilSetBits+0x12>
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <xMBUtilSetBits+0x48>)
 8002cac:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <xMBUtilSetBits+0x4c>)
 8002cae:	2138      	movs	r1, #56	; 0x38
 8002cb0:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <xMBUtilSetBits+0x50>)
 8002cb2:	f002 ffc3 	bl	8005c3c <__assert_func>

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002cb6:	2401      	movs	r4, #1
 8002cb8:	fa04 f202 	lsl.w	r2, r4, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8002cbc:	08ce      	lsrs	r6, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002cbe:	3a01      	subs	r2, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002cc0:	1c75      	adds	r5, r6, #1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	eba1 04c6 	sub.w	r4, r1, r6, lsl #3
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002cc8:	5d47      	ldrb	r7, [r0, r5]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8002cca:	fa02 f404 	lsl.w	r4, r2, r4
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002cce:	5d82      	ldrb	r2, [r0, r6]
    usValue <<= usNPreBits;
 8002cd0:	f001 0107 	and.w	r1, r1, #7
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002cd4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8002cd8:	ea22 0204 	bic.w	r2, r2, r4
    usValue <<= usNPreBits;
 8002cdc:	408b      	lsls	r3, r1
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b21b      	sxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8002ce2:	5583      	strb	r3, [r0, r6]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8002ce4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002ce8:	5543      	strb	r3, [r0, r5]
 8002cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cec:	08006b8d 	.word	0x08006b8d
 8002cf0:	08006b7e 	.word	0x08006b7e
 8002cf4:	08006b9a 	.word	0x08006b9a

08002cf8 <xMBUtilGetBits>:
}

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8002cf8:	b510      	push	{r4, lr}

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8002cfa:	08cb      	lsrs	r3, r1, #3
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002cfc:	18c4      	adds	r4, r0, r3
 8002cfe:	5cc0      	ldrb	r0, [r0, r3]
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002d00:	2301      	movs	r3, #1
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002d02:	7864      	ldrb	r4, [r4, #1]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8002d04:	f001 0107 	and.w	r1, r1, #7
 8002d08:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002d0c:	fa03 f202 	lsl.w	r2, r3, r2
    usWordBuf >>= usNPreBits;
 8002d10:	4108      	asrs	r0, r1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002d12:	3a01      	subs	r2, #1

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8002d14:	4010      	ands	r0, r2

    return ( UCHAR ) usWordBuf;
}
 8002d16:	b2c0      	uxtb	r0, r0
 8002d18:	bd10      	pop	{r4, pc}
	...

08002d1c <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8002d1c:	2807      	cmp	r0, #7
 8002d1e:	bf9a      	itte	ls
 8002d20:	4b01      	ldrls	r3, [pc, #4]	; (8002d28 <prveMBError2Exception+0xc>)
 8002d22:	5c18      	ldrbls	r0, [r3, r0]
 8002d24:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8002d26:	4770      	bx	lr
 8002d28:	08006b76 	.word	0x08006b76

08002d2c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8002d36:	1e43      	subs	r3, r0, #1
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2bf6      	cmp	r3, #246	; 0xf6
 8002d3c:	d827      	bhi.n	8002d8e <eMBInit+0x62>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <eMBInit+0x6c>)
 8002d40:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 8002d42:	bb24      	cbnz	r4, 8002d8e <eMBInit+0x62>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8002d44:	4d15      	ldr	r5, [pc, #84]	; (8002d9c <eMBInit+0x70>)
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <eMBInit+0x74>)
 8002d48:	601d      	str	r5, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8002d4a:	4d16      	ldr	r5, [pc, #88]	; (8002da4 <eMBInit+0x78>)
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <eMBInit+0x7c>)
 8002d4e:	601d      	str	r5, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8002d50:	4d16      	ldr	r5, [pc, #88]	; (8002dac <eMBInit+0x80>)
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <eMBInit+0x84>)
 8002d54:	601d      	str	r5, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <eMBInit+0x88>)
 8002d58:	4d17      	ldr	r5, [pc, #92]	; (8002db8 <eMBInit+0x8c>)
 8002d5a:	601d      	str	r5, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <eMBInit+0x90>)
 8002d5e:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8002d60:	4c17      	ldr	r4, [pc, #92]	; (8002dc0 <eMBInit+0x94>)
 8002d62:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <eMBInit+0x98>)
 8002d64:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8002d66:	4c18      	ldr	r4, [pc, #96]	; (8002dc8 <eMBInit+0x9c>)
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <eMBInit+0xa0>)
 8002d6a:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8002d6c:	4c18      	ldr	r4, [pc, #96]	; (8002dd0 <eMBInit+0xa4>)
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <eMBInit+0xa8>)
 8002d70:	601c      	str	r4, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8002d72:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002d76:	f000 f971 	bl	800305c <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	b928      	cbnz	r0, 8002d8a <eMBInit+0x5e>
        {
            if( !xMBPortEventInit(  ) )
 8002d7e:	f000 f8b5 	bl	8002eec <xMBPortEventInit>
 8002d82:	b130      	cbz	r0, 8002d92 <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8002d84:	2201      	movs	r2, #1
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <eMBInit+0xac>)
 8002d88:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
}
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	bd38      	pop	{r3, r4, r5, pc}
            eStatus = MB_EINVAL;
 8002d8e:	2402      	movs	r4, #2
 8002d90:	e7fb      	b.n	8002d8a <eMBInit+0x5e>
                eStatus = MB_EPORTERR;
 8002d92:	2403      	movs	r4, #3
 8002d94:	e7f9      	b.n	8002d8a <eMBInit+0x5e>
 8002d96:	bf00      	nop
 8002d98:	2000015d 	.word	0x2000015d
 8002d9c:	080030a5 	.word	0x080030a5
 8002da0:	20000154 	.word	0x20000154
 8002da4:	080030c9 	.word	0x080030c9
 8002da8:	20000158 	.word	0x20000158
 8002dac:	08003155 	.word	0x08003155
 8002db0:	2000014c 	.word	0x2000014c
 8002db4:	20000148 	.word	0x20000148
 8002db8:	080030e5 	.word	0x080030e5
 8002dbc:	20000150 	.word	0x20000150
 8002dc0:	080031dd 	.word	0x080031dd
 8002dc4:	200053a8 	.word	0x200053a8
 8002dc8:	08003271 	.word	0x08003271
 8002dcc:	200053a0 	.word	0x200053a0
 8002dd0:	08003305 	.word	0x08003305
 8002dd4:	200053a4 	.word	0x200053a4
 8002dd8:	20000008 	.word	0x20000008

08002ddc <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8002ddc:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8002dde:	4c06      	ldr	r4, [pc, #24]	; (8002df8 <eMBEnable+0x1c>)
 8002de0:	7823      	ldrb	r3, [r4, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <eMBEnable+0x20>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8002dec:	2000      	movs	r0, #0
 8002dee:	7020      	strb	r0, [r4, #0]
 8002df0:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8002df2:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8002df4:	bd10      	pop	{r4, pc}
 8002df6:	bf00      	nop
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	20000154 	.word	0x20000154

08002e00 <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8002e00:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <eMBPoll+0xc4>)
{
 8002e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( eMBState != STATE_ENABLED )
 8002e04:	781c      	ldrb	r4, [r3, #0]
 8002e06:	2c00      	cmp	r4, #0
 8002e08:	d159      	bne.n	8002ebe <eMBPoll+0xbe>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8002e0a:	f10d 0007 	add.w	r0, sp, #7
 8002e0e:	f000 f881 	bl	8002f14 <xMBPortEventGet>
 8002e12:	2801      	cmp	r0, #1
 8002e14:	4603      	mov	r3, r0
 8002e16:	d001      	beq.n	8002e1c <eMBPoll+0x1c>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 8002e18:	2400      	movs	r4, #0
 8002e1a:	e005      	b.n	8002e28 <eMBPoll+0x28>
        switch ( eEvent )
 8002e1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002e20:	2a01      	cmp	r2, #1
 8002e22:	d004      	beq.n	8002e2e <eMBPoll+0x2e>
 8002e24:	2a02      	cmp	r2, #2
 8002e26:	d017      	beq.n	8002e58 <eMBPoll+0x58>
}
 8002e28:	4620      	mov	r0, r4
 8002e2a:	b003      	add	sp, #12
 8002e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8002e2e:	4d26      	ldr	r5, [pc, #152]	; (8002ec8 <eMBPoll+0xc8>)
 8002e30:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <eMBPoll+0xcc>)
 8002e32:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <eMBPoll+0xd0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4927      	ldr	r1, [pc, #156]	; (8002ed4 <eMBPoll+0xd4>)
 8002e38:	4628      	mov	r0, r5
 8002e3a:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	d1ea      	bne.n	8002e18 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <eMBPoll+0xd8>)
 8002e44:	782b      	ldrb	r3, [r5, #0]
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <eMBPoll+0x50>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e3      	bne.n	8002e18 <eMBPoll+0x18>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8002e50:	2002      	movs	r0, #2
 8002e52:	f000 f853 	bl	8002efc <xMBPortEventPost>
 8002e56:	e7e7      	b.n	8002e28 <eMBPoll+0x28>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002e58:	4d1e      	ldr	r5, [pc, #120]	; (8002ed4 <eMBPoll+0xd4>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002e5a:	4e20      	ldr	r6, [pc, #128]	; (8002edc <eMBPoll+0xdc>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002e5c:	6828      	ldr	r0, [r5, #0]
 8002e5e:	4f20      	ldr	r7, [pc, #128]	; (8002ee0 <eMBPoll+0xe0>)
 8002e60:	7802      	ldrb	r2, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8002e62:	7033      	strb	r3, [r6, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <eMBPoll+0xe4>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8002e66:	703a      	strb	r2, [r7, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8002e68:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 8002e6c:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 8002e70:	b131      	cbz	r1, 8002e80 <eMBPoll+0x80>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8002e72:	428a      	cmp	r2, r1
 8002e74:	d11f      	bne.n	8002eb6 <eMBPoll+0xb6>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8002e76:	4473      	add	r3, lr
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4915      	ldr	r1, [pc, #84]	; (8002ed0 <eMBPoll+0xd0>)
 8002e7c:	4798      	blx	r3
 8002e7e:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <eMBPoll+0xc8>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0c7      	beq.n	8002e18 <eMBPoll+0x18>
                if( eException != MB_EX_NONE )
 8002e88:	7831      	ldrb	r1, [r6, #0]
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <eMBPoll+0xd0>)
 8002e8c:	b159      	cbz	r1, 8002ea6 <eMBPoll+0xa6>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8002e8e:	2201      	movs	r2, #1
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	783a      	ldrb	r2, [r7, #0]
 8002e94:	6828      	ldr	r0, [r5, #0]
 8002e96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e9a:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	6828      	ldr	r0, [r5, #0]
 8002ea0:	1c54      	adds	r4, r2, #1
 8002ea2:	801c      	strh	r4, [r3, #0]
 8002ea4:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <eMBPoll+0xe8>)
 8002ea8:	6829      	ldr	r1, [r5, #0]
 8002eaa:	6814      	ldr	r4, [r2, #0]
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <eMBPoll+0xd8>)
 8002eb0:	7818      	ldrb	r0, [r3, #0]
 8002eb2:	47a0      	blx	r4
 8002eb4:	e7b0      	b.n	8002e18 <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8002eb6:	3401      	adds	r4, #1
 8002eb8:	2c10      	cmp	r4, #16
 8002eba:	d1d5      	bne.n	8002e68 <eMBPoll+0x68>
 8002ebc:	e7e0      	b.n	8002e80 <eMBPoll+0x80>
        return MB_EILLSTATE;
 8002ebe:	2406      	movs	r4, #6
 8002ec0:	e7b2      	b.n	8002e28 <eMBPoll+0x28>
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	20000164 	.word	0x20000164
 8002ecc:	20000148 	.word	0x20000148
 8002ed0:	20000166 	.word	0x20000166
 8002ed4:	20000160 	.word	0x20000160
 8002ed8:	2000015d 	.word	0x2000015d
 8002edc:	20000146 	.word	0x20000146
 8002ee0:	2000015c 	.word	0x2000015c
 8002ee4:	2000000c 	.word	0x2000000c
 8002ee8:	2000014c 	.word	0x2000014c

08002eec <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8002eec:	2200      	movs	r2, #0
 8002eee:	4b02      	ldr	r3, [pc, #8]	; (8002ef8 <xMBPortEventInit+0xc>)
    return TRUE;
}
 8002ef0:	2001      	movs	r0, #1
    xEventInQueue = FALSE;
 8002ef2:	701a      	strb	r2, [r3, #0]
}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000169 	.word	0x20000169

08002efc <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <xMBPortEventPost+0x10>)
 8002f00:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8002f02:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <xMBPortEventPost+0x14>)
 8002f04:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000169 	.word	0x20000169
 8002f10:	20000168 	.word	0x20000168

08002f14 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8002f14:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <xMBPortEventGet+0x18>)
 8002f16:	7813      	ldrb	r3, [r2, #0]
 8002f18:	b12b      	cbz	r3, 8002f26 <xMBPortEventGet+0x12>
    {
        *eEvent = eQueuedEvent;
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <xMBPortEventGet+0x1c>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8002f24:	2301      	movs	r3, #1
    }
    return xEventHappened;
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000169 	.word	0x20000169
 8002f30:	20000168 	.word	0x20000168

08002f34 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart1;

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	460d      	mov	r5, r1
 8002f38:	4c11      	ldr	r4, [pc, #68]	; (8002f80 <vMBPortSerialEnable+0x4c>)
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable){
 8002f3a:	b1b8      	cbz	r0, 8002f6c <vMBPortSerialEnable+0x38>
		MODBUS_MODE_RX;
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f42:	4810      	ldr	r0, [pc, #64]	; (8002f84 <vMBPortSerialEnable+0x50>)
 8002f44:	f7fe fe6e 	bl	8001c24 <HAL_GPIO_WritePin>
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	68d3      	ldr	r3, [r2, #12]
 8002f4c:	f043 0320 	orr.w	r3, r3, #32
	}
	else{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8002f50:	60d3      	str	r3, [r2, #12]
	}

	if (xTxEnable){
 8002f52:	b185      	cbz	r5, 8002f76 <vMBPortSerialEnable+0x42>
		MODBUS_MODE_TX;
 8002f54:	2201      	movs	r2, #1
 8002f56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f5a:	480a      	ldr	r0, [pc, #40]	; (8002f84 <vMBPortSerialEnable+0x50>)
 8002f5c:	f7fe fe62 	bl	8001c24 <HAL_GPIO_WritePin>
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	68d3      	ldr	r3, [r2, #12]
 8002f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	}
	else{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8002f68:	60d3      	str	r3, [r2, #12]
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	68d3      	ldr	r3, [r2, #12]
 8002f70:	f023 0320 	bic.w	r3, r3, #32
 8002f74:	e7ec      	b.n	8002f50 <vMBPortSerialEnable+0x1c>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	68d3      	ldr	r3, [r2, #12]
 8002f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7e:	e7f3      	b.n	8002f68 <vMBPortSerialEnable+0x34>
 8002f80:	200054ec 	.word	0x200054ec
 8002f84:	40010800 	.word	0x40010800

08002f88 <xMBPortSerialInit>:
//	  huart_m.Init.Mode = UART_MODE_TX_RX;
//	  huart_m.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//	  huart_m.Init.OverSampling = UART_OVERSAMPLING_16;
//	  return (HAL_OK == USART_Init(&huart_m));
	return TRUE;
}
 8002f88:	2001      	movs	r0, #1
 8002f8a:	4770      	bx	lr

08002f8c <xMBPortSerialPutByte>:
xMBPortSerialPutByte( CHAR ucByte )
{
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	huart1.Instance -> DR = ucByte;
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <xMBPortSerialPutByte+0xc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6058      	str	r0, [r3, #4]
    return TRUE;
}
 8002f92:	2001      	movs	r0, #1
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	200054ec 	.word	0x200054ec

08002f9c <xMBPortSerialGetByte>:
xMBPortSerialGetByte( CHAR * pucByte )
{
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(huart1.Init.Parity == UART_PARITY_NONE)
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <xMBPortSerialGetByte+0x18>)
 8002f9e:	691a      	ldr	r2, [r3, #16]
    {
        *pucByte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF);
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
    if(huart1.Init.Parity == UART_PARITY_NONE)
 8002fa4:	b912      	cbnz	r2, 8002fac <xMBPortSerialGetByte+0x10>
    }
    else

    {
        *pucByte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x007F);
 8002fa6:	7003      	strb	r3, [r0, #0]
    }
    return TRUE;
}
 8002fa8:	2001      	movs	r0, #1
 8002faa:	4770      	bx	lr
        *pucByte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x007F);
 8002fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb0:	e7f9      	b.n	8002fa6 <xMBPortSerialGetByte+0xa>
 8002fb2:	bf00      	nop
 8002fb4:	200054ec 	.word	0x200054ec

08002fb8 <prvvUARTTxReadyISR>:
//	if (uiCnt++ < 10){
//		(void) xMBPortSerialPutByte('a');
//	}else{
//		vMBPortSerialEnable(FALSE, FALSE);
//	}
    pxMBFrameCBTransmitterEmpty(  );
 8002fb8:	4b01      	ldr	r3, [pc, #4]	; (8002fc0 <prvvUARTTxReadyISR+0x8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4718      	bx	r3
 8002fbe:	bf00      	nop
 8002fc0:	200053a0 	.word	0x200053a0

08002fc4 <prvvUARTRxISR>:
 */
void prvvUARTRxISR( void )
{
//	CHAR cByte;
//	(void) xMBPortSerialGetByte(&cByte);
    pxMBFrameCBByteReceived(  );
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <prvvUARTRxISR+0x8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4718      	bx	r3
 8002fca:	bf00      	nop
 8002fcc:	200053a8 	.word	0x200053a8

08002fd0 <xMBPortTimersInit>:
volatile uint16_t counter = 0;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
	timeout = usTim1Timerout50us;
 8002fd0:	4b01      	ldr	r3, [pc, #4]	; (8002fd8 <xMBPortTimersInit+0x8>)
 8002fd2:	8018      	strh	r0, [r3, #0]
    return TRUE;
}
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	4770      	bx	lr
 8002fd8:	2000016c 	.word	0x2000016c

08002fdc <vMBPortTimersEnable>:
inline void
vMBPortTimersEnable(  )
{
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
	counter = 0;
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <vMBPortTimersEnable+0xc>)
	HAL_TIM_Base_Start_IT(&htim7);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <vMBPortTimersEnable+0x10>)
	counter = 0;
 8002fe2:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8002fe4:	f7ff ba08 	b.w	80023f8 <HAL_TIM_Base_Start_IT>
 8002fe8:	2000016a 	.word	0x2000016a
 8002fec:	2000556c 	.word	0x2000556c

08002ff0 <vMBPortTimersDisable>:
inline void
vMBPortTimersDisable(  )
{
    /* Disable any pending timers. */
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
	HAL_TIM_Base_Stop_IT(&htim7);
 8002ff0:	4801      	ldr	r0, [pc, #4]	; (8002ff8 <vMBPortTimersDisable+0x8>)
 8002ff2:	f7ff ba11 	b.w	8002418 <HAL_TIM_Base_Stop_IT>
 8002ff6:	bf00      	nop
 8002ff8:	2000556c 	.word	0x2000556c

08002ffc <HAL_TIM_PeriodElapsedCallback>:
{
    ( void )pxMBPortCBTimerExpired(  );
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM7){
 8002ffc:	6802      	ldr	r2, [r0, #0]
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003000:	429a      	cmp	r2, r3
 8003002:	d10b      	bne.n	800301c <HAL_TIM_PeriodElapsedCallback+0x20>
		if((++counter) >= timeout){
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003006:	8813      	ldrh	r3, [r2, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	8013      	strh	r3, [r2, #0]
 800300e:	4a06      	ldr	r2, [pc, #24]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d802      	bhi.n	800301c <HAL_TIM_PeriodElapsedCallback+0x20>
    ( void )pxMBPortCBTimerExpired(  );
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4718      	bx	r3
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40001400 	.word	0x40001400
 8003024:	2000016a 	.word	0x2000016a
 8003028:	2000016c 	.word	0x2000016c
 800302c:	200053a4 	.word	0x200053a4

08003030 <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 8003030:	23ff      	movs	r3, #255	; 0xff
{
 8003032:	b570      	push	{r4, r5, r6, lr}
    UCHAR           ucCRCHi = 0xFF;
 8003034:	461c      	mov	r4, r3
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8003036:	4d07      	ldr	r5, [pc, #28]	; (8003054 <usMBCRC16+0x24>)
        ucCRCHi = aucCRCLo[iIndex];
 8003038:	4e07      	ldr	r6, [pc, #28]	; (8003058 <usMBCRC16+0x28>)
 800303a:	4401      	add	r1, r0
    while( usLen-- )
 800303c:	4288      	cmp	r0, r1
 800303e:	d102      	bne.n	8003046 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8003040:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8003044:	bd70      	pop	{r4, r5, r6, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8003046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800304a:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800304c:	5cab      	ldrb	r3, [r5, r2]
 800304e:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 8003050:	5cb4      	ldrb	r4, [r6, r2]
 8003052:	e7f3      	b.n	800303c <usMBCRC16+0xc>
 8003054:	08006bc0 	.word	0x08006bc0
 8003058:	08006cc0 	.word	0x08006cc0

0800305c <eMBRTUInit>:
extern USHORT counter_mb_ext;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	460d      	mov	r5, r1
 8003060:	4614      	mov	r4, r2
 8003062:	461e      	mov	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 8003064:	f002 f8ec 	bl	8005240 <__critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8003068:	4633      	mov	r3, r6
 800306a:	2208      	movs	r2, #8
 800306c:	4621      	mov	r1, r4
 800306e:	4628      	mov	r0, r5
 8003070:	f7ff ff8a 	bl	8002f88 <xMBPortSerialInit>
 8003074:	2801      	cmp	r0, #1
 8003076:	d10c      	bne.n	8003092 <eMBRTUInit+0x36>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8003078:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800307c:	bf9d      	ittte	ls
 800307e:	4808      	ldrls	r0, [pc, #32]	; (80030a0 <eMBRTUInit+0x44>)
 8003080:	0064      	lslls	r4, r4, #1
 8003082:	fbb0 f0f4 	udivls	r0, r0, r4
            usTimerT35_50us = 35;       /* 1800us. */
 8003086:	2023      	movhi	r0, #35	; 0x23
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8003088:	b280      	uxth	r0, r0
 800308a:	f7ff ffa1 	bl	8002fd0 <xMBPortTimersInit>
 800308e:	2801      	cmp	r0, #1
 8003090:	d004      	beq.n	800309c <eMBRTUInit+0x40>
        {
            eStatus = MB_EPORTERR;
 8003092:	2403      	movs	r4, #3
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8003094:	f002 f8d6 	bl	8005244 <__critical_exit>

    return eStatus;
}
 8003098:	4620      	mov	r0, r4
 800309a:	bd70      	pop	{r4, r5, r6, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 800309c:	2400      	movs	r4, #0
 800309e:	e7f9      	b.n	8003094 <eMBRTUInit+0x38>
 80030a0:	00177fa0 	.word	0x00177fa0

080030a4 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80030a4:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 80030a6:	f002 f8cb 	bl	8005240 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80030aa:	2100      	movs	r1, #0
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <eMBRTUStart+0x20>)
    vMBPortSerialEnable( TRUE, FALSE );
 80030ae:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 80030b0:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80030b2:	f7ff ff3f 	bl	8002f34 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80030b6:	f7ff ff91 	bl	8002fdc <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
}
 80030ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    EXIT_CRITICAL_SECTION(  );
 80030be:	f002 b8c1 	b.w	8005244 <__critical_exit>
 80030c2:	bf00      	nop
 80030c4:	2000016e 	.word	0x2000016e

080030c8 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 80030c8:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 80030ca:	f002 f8b9 	bl	8005240 <__critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 80030ce:	2100      	movs	r1, #0
 80030d0:	4608      	mov	r0, r1
 80030d2:	f7ff ff2f 	bl	8002f34 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 80030d6:	f7ff ff8b 	bl	8002ff0 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
}
 80030da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    EXIT_CRITICAL_SECTION(  );
 80030de:	f002 b8b1 	b.w	8005244 <__critical_exit>
	...

080030e4 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80030e8:	4d15      	ldr	r5, [pc, #84]	; (8003140 <eMBRTUReceive+0x5c>)
{
 80030ea:	4680      	mov	r8, r0
 80030ec:	460e      	mov	r6, r1
 80030ee:	4617      	mov	r7, r2
    ENTER_CRITICAL_SECTION(  );
 80030f0:	f002 f8a6 	bl	8005240 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 80030f4:	882b      	ldrh	r3, [r5, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2bff      	cmp	r3, #255	; 0xff
 80030fa:	d905      	bls.n	8003108 <eMBRTUReceive+0x24>
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <eMBRTUReceive+0x60>)
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <eMBRTUReceive+0x64>)
 8003100:	21a1      	movs	r1, #161	; 0xa1
 8003102:	4812      	ldr	r0, [pc, #72]	; (800314c <eMBRTUReceive+0x68>)
 8003104:	f002 fd9a 	bl	8005c3c <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8003108:	882b      	ldrh	r3, [r5, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b03      	cmp	r3, #3
 800310e:	d805      	bhi.n	800311c <eMBRTUReceive+0x38>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 8003110:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 8003112:	f002 f897 	bl	8005244 <__critical_exit>
    return eStatus;
}
 8003116:	4620      	mov	r0, r4
 8003118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800311c:	8829      	ldrh	r1, [r5, #0]
 800311e:	4c0c      	ldr	r4, [pc, #48]	; (8003150 <eMBRTUReceive+0x6c>)
 8003120:	b289      	uxth	r1, r1
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff ff84 	bl	8003030 <usMBCRC16>
 8003128:	2800      	cmp	r0, #0
 800312a:	d1f1      	bne.n	8003110 <eMBRTUReceive+0x2c>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800312c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8003130:	f888 2000 	strb.w	r2, [r8]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003134:	882a      	ldrh	r2, [r5, #0]
 8003136:	3a03      	subs	r2, #3
 8003138:	803a      	strh	r2, [r7, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800313a:	6034      	str	r4, [r6, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800313c:	4604      	mov	r4, r0
        xFrameReceived = TRUE;
 800313e:	e7e8      	b.n	8003112 <eMBRTUReceive+0x2e>
 8003140:	20000174 	.word	0x20000174
 8003144:	08006e07 	.word	0x08006e07
 8003148:	08006dc0 	.word	0x08006dc0
 800314c:	08006e2c 	.word	0x08006e2c
 8003150:	200053b4 	.word	0x200053b4

08003154 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8003154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003158:	4680      	mov	r8, r0
 800315a:	460f      	mov	r7, r1
 800315c:	4616      	mov	r6, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 800315e:	f002 f86f 	bl	8005240 <__critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <eMBRTUSend+0x74>)
 8003164:	781d      	ldrb	r5, [r3, #0]
 8003166:	b2ed      	uxtb	r5, r5
 8003168:	2d01      	cmp	r5, #1
 800316a:	d12a      	bne.n	80031c2 <eMBRTUSend+0x6e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
        usSndBufferCount = 1;
 800316c:	4c17      	ldr	r4, [pc, #92]	; (80031cc <eMBRTUSend+0x78>)
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <eMBRTUSend+0x7c>)
        usSndBufferCount = 1;
 8003170:	8025      	strh	r5, [r4, #0]
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003172:	1e78      	subs	r0, r7, #1

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8003174:	f807 8c01 	strb.w	r8, [r7, #-1]
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8003178:	6010      	str	r0, [r2, #0]
        usSndBufferCount += usLength;
 800317a:	8822      	ldrh	r2, [r4, #0]
 800317c:	4416      	add	r6, r2
 800317e:	b2b6      	uxth	r6, r6
 8003180:	8026      	strh	r6, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003182:	8821      	ldrh	r1, [r4, #0]
 8003184:	b289      	uxth	r1, r1
 8003186:	f7ff ff53 	bl	8003030 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800318a:	8823      	ldrh	r3, [r4, #0]
 800318c:	4911      	ldr	r1, [pc, #68]	; (80031d4 <eMBRTUSend+0x80>)
 800318e:	b29b      	uxth	r3, r3
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	b292      	uxth	r2, r2
 8003194:	8022      	strh	r2, [r4, #0]
 8003196:	b2c2      	uxtb	r2, r0
 8003198:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800319a:	8823      	ldrh	r3, [r4, #0]
 800319c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	b292      	uxth	r2, r2
 80031a6:	8022      	strh	r2, [r4, #0]
 80031a8:	54c8      	strb	r0, [r1, r3]

       // usSndBufferCount++; //KOSTIL

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <eMBRTUSend+0x84>)
        vMBPortSerialEnable( FALSE, TRUE );
 80031ac:	4629      	mov	r1, r5
 80031ae:	2000      	movs	r0, #0
        eSndState = STATE_TX_XMIT;
 80031b0:	701d      	strb	r5, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80031b2:	2400      	movs	r4, #0
        vMBPortSerialEnable( FALSE, TRUE );
 80031b4:	f7ff febe 	bl	8002f34 <vMBPortSerialEnable>
    }
    else
    {
        eStatus = MB_EIO;
    }
    EXIT_CRITICAL_SECTION(  );
 80031b8:	f002 f844 	bl	8005244 <__critical_exit>
    return eStatus;
}
 80031bc:	4620      	mov	r0, r4
 80031be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        eStatus = MB_EIO;
 80031c2:	2405      	movs	r4, #5
 80031c4:	e7f8      	b.n	80031b8 <eMBRTUSend+0x64>
 80031c6:	bf00      	nop
 80031c8:	2000016e 	.word	0x2000016e
 80031cc:	20000176 	.word	0x20000176
 80031d0:	20000170 	.word	0x20000170
 80031d4:	200053b4 	.word	0x200053b4
 80031d8:	2000016f 	.word	0x2000016f

080031dc <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 80031dc:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <xMBRTUReceiveFSM+0x78>)
{
 80031de:	b507      	push	{r0, r1, r2, lr}
    assert( eSndState == STATE_TX_IDLE );
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b12b      	cbz	r3, 80031f0 <xMBRTUReceiveFSM+0x14>
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <xMBRTUReceiveFSM+0x7c>)
 80031e6:	4a1d      	ldr	r2, [pc, #116]	; (800325c <xMBRTUReceiveFSM+0x80>)
 80031e8:	21ed      	movs	r1, #237	; 0xed
 80031ea:	481d      	ldr	r0, [pc, #116]	; (8003260 <xMBRTUReceiveFSM+0x84>)
 80031ec:	f002 fd26 	bl	8005c3c <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 80031f0:	f10d 0007 	add.w	r0, sp, #7
 80031f4:	f7ff fed2 	bl	8002f9c <xMBPortSerialGetByte>

    switch ( eRcvState )
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <xMBRTUReceiveFSM+0x88>)
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	2a03      	cmp	r2, #3
 80031fe:	d822      	bhi.n	8003246 <xMBRTUReceiveFSM+0x6a>
 8003200:	e8df f002 	tbb	[pc, r2]
 8003204:	1f11021f 	.word	0x1f11021f
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8003208:	2200      	movs	r2, #0
 800320a:	4917      	ldr	r1, [pc, #92]	; (8003268 <xMBRTUReceiveFSM+0x8c>)
 800320c:	800a      	strh	r2, [r1, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800320e:	880a      	ldrh	r2, [r1, #0]
 8003210:	b292      	uxth	r2, r2
 8003212:	1c50      	adds	r0, r2, #1
 8003214:	b280      	uxth	r0, r0
 8003216:	8008      	strh	r0, [r1, #0]
 8003218:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800321c:	4913      	ldr	r1, [pc, #76]	; (800326c <xMBRTUReceiveFSM+0x90>)
 800321e:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 8003220:	2202      	movs	r2, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e00d      	b.n	8003242 <xMBRTUReceiveFSM+0x66>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <xMBRTUReceiveFSM+0x8c>)
 8003228:	8811      	ldrh	r1, [r2, #0]
 800322a:	b289      	uxth	r1, r1
 800322c:	29ff      	cmp	r1, #255	; 0xff
 800322e:	d80e      	bhi.n	800324e <xMBRTUReceiveFSM+0x72>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003230:	8813      	ldrh	r3, [r2, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	1c59      	adds	r1, r3, #1
 8003236:	b289      	uxth	r1, r1
 8003238:	8011      	strh	r1, [r2, #0]
 800323a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <xMBRTUReceiveFSM+0x90>)
 8003240:	54d1      	strb	r1, [r2, r3]
        }
        vMBPortTimersEnable(  );
 8003242:	f7ff fecb 	bl	8002fdc <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 8003246:	2000      	movs	r0, #0
 8003248:	b003      	add	sp, #12
 800324a:	f85d fb04 	ldr.w	pc, [sp], #4
            eRcvState = STATE_RX_ERROR;
 800324e:	2203      	movs	r2, #3
 8003250:	e7e7      	b.n	8003222 <xMBRTUReceiveFSM+0x46>
 8003252:	bf00      	nop
 8003254:	2000016f 	.word	0x2000016f
 8003258:	08006e4a 	.word	0x08006e4a
 800325c:	08006dce 	.word	0x08006dce
 8003260:	08006e2c 	.word	0x08006e2c
 8003264:	2000016e 	.word	0x2000016e
 8003268:	20000174 	.word	0x20000174
 800326c:	200053b4 	.word	0x200053b4

08003270 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 8003272:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <xMBRTUTransmitFSM+0x74>)
 8003274:	7818      	ldrb	r0, [r3, #0]
 8003276:	b2c0      	uxtb	r0, r0
 8003278:	2801      	cmp	r0, #1
 800327a:	d006      	beq.n	800328a <xMBRTUTransmitFSM+0x1a>
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <xMBRTUTransmitFSM+0x78>)
 800327e:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <xMBRTUTransmitFSM+0x7c>)
 8003280:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003284:	481a      	ldr	r0, [pc, #104]	; (80032f0 <xMBRTUTransmitFSM+0x80>)
 8003286:	f002 fcd9 	bl	8005c3c <__assert_func>

    switch ( eSndState )
 800328a:	4f1a      	ldr	r7, [pc, #104]	; (80032f4 <xMBRTUTransmitFSM+0x84>)
 800328c:	783b      	ldrb	r3, [r7, #0]
 800328e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8003292:	b11b      	cbz	r3, 800329c <xMBRTUTransmitFSM+0x2c>
 8003294:	2e01      	cmp	r6, #1
 8003296:	d005      	beq.n	80032a4 <xMBRTUTransmitFSM+0x34>
    BOOL            xNeedPoll = FALSE;
 8003298:	2500      	movs	r5, #0
 800329a:	e020      	b.n	80032de <xMBRTUTransmitFSM+0x6e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800329c:	4631      	mov	r1, r6
 800329e:	f7ff fe49 	bl	8002f34 <vMBPortSerialEnable>
 80032a2:	e7f9      	b.n	8003298 <xMBRTUTransmitFSM+0x28>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <xMBRTUTransmitFSM+0x88>)
 80032a6:	8814      	ldrh	r4, [r2, #0]
 80032a8:	b2a4      	uxth	r4, r4
 80032aa:	b17c      	cbz	r4, 80032cc <xMBRTUTransmitFSM+0x5c>
        {
        	usSndBufferCount--;
 80032ac:	8813      	ldrh	r3, [r2, #0]
            counter_mb_ext = usSndBufferCount;
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80032ae:	4c13      	ldr	r4, [pc, #76]	; (80032fc <xMBRTUTransmitFSM+0x8c>)
        	usSndBufferCount--;
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
            counter_mb_ext = usSndBufferCount;
 80032b6:	8812      	ldrh	r2, [r2, #0]
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <xMBRTUTransmitFSM+0x90>)
 80032ba:	801a      	strh	r2, [r3, #0]
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	7818      	ldrb	r0, [r3, #0]
 80032c0:	f7ff fe64 	bl	8002f8c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	e7e5      	b.n	8003298 <xMBRTUTransmitFSM+0x28>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80032cc:	2003      	movs	r0, #3
 80032ce:	f7ff fe15 	bl	8002efc <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */

            vMBPortSerialEnable( TRUE, FALSE );
 80032d2:	4621      	mov	r1, r4
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80032d4:	4605      	mov	r5, r0
            vMBPortSerialEnable( TRUE, FALSE );
 80032d6:	4630      	mov	r0, r6
 80032d8:	f7ff fe2c 	bl	8002f34 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80032dc:	703c      	strb	r4, [r7, #0]
        }
        break;
    }

    return xNeedPoll;
}
 80032de:	4628      	mov	r0, r5
 80032e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2000016e 	.word	0x2000016e
 80032e8:	08006ec8 	.word	0x08006ec8
 80032ec:	08006ddf 	.word	0x08006ddf
 80032f0:	08006e2c 	.word	0x08006e2c
 80032f4:	2000016f 	.word	0x2000016f
 80032f8:	20000176 	.word	0x20000176
 80032fc:	20000170 	.word	0x20000170
 8003300:	20000090 	.word	0x20000090

08003304 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003304:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <xMBRTUTimerT35Expired+0x54>)
 8003308:	7818      	ldrb	r0, [r3, #0]
 800330a:	461d      	mov	r5, r3
 800330c:	b2c0      	uxtb	r0, r0
 800330e:	2802      	cmp	r0, #2
 8003310:	d00b      	beq.n	800332a <xMBRTUTimerT35Expired+0x26>
 8003312:	2803      	cmp	r0, #3
 8003314:	d01d      	beq.n	8003352 <xMBRTUTimerT35Expired+0x4e>
 8003316:	b950      	cbnz	r0, 800332e <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003318:	f7ff fdf0 	bl	8002efc <xMBPortEventPost>
 800331c:	4604      	mov	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800331e:	f7ff fe67 	bl	8002ff0 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003322:	2301      	movs	r3, #1

    return xNeedPoll;
}
 8003324:	4620      	mov	r0, r4
    eRcvState = STATE_RX_IDLE;
 8003326:	702b      	strb	r3, [r5, #0]
}
 8003328:	bd38      	pop	{r3, r4, r5, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800332a:	2001      	movs	r0, #1
 800332c:	e7f4      	b.n	8003318 <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8003334:	2a00      	cmp	r2, #0
 8003336:	d0f2      	beq.n	800331e <xMBRTUTimerT35Expired+0x1a>
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	2a02      	cmp	r2, #2
 800333c:	d009      	beq.n	8003352 <xMBRTUTimerT35Expired+0x4e>
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d006      	beq.n	8003352 <xMBRTUTimerT35Expired+0x4e>
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <xMBRTUTimerT35Expired+0x58>)
 8003346:	4a06      	ldr	r2, [pc, #24]	; (8003360 <xMBRTUTimerT35Expired+0x5c>)
 8003348:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800334c:	4805      	ldr	r0, [pc, #20]	; (8003364 <xMBRTUTimerT35Expired+0x60>)
 800334e:	f002 fc75 	bl	8005c3c <__assert_func>
    BOOL            xNeedPoll = FALSE;
 8003352:	2400      	movs	r4, #0
 8003354:	e7e3      	b.n	800331e <xMBRTUTimerT35Expired+0x1a>
 8003356:	bf00      	nop
 8003358:	2000016e 	.word	0x2000016e
 800335c:	08006e65 	.word	0x08006e65
 8003360:	08006df1 	.word	0x08006df1
 8003364:	08006e2c 	.word	0x08006e2c

08003368 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003368:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800336a:	f000 fee7 	bl	800413c <vTaskStartScheduler>
  
  return osOK;
}
 800336e:	2000      	movs	r0, #0
 8003370:	bd08      	pop	{r3, pc}

08003372 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003372:	f100 0308 	add.w	r3, r0, #8
 8003376:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003378:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003380:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003382:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003384:	6003      	str	r3, [r0, #0]
 8003386:	4770      	bx	lr

08003388 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003388:	2300      	movs	r3, #0
 800338a:	6103      	str	r3, [r0, #16]
 800338c:	4770      	bx	lr

0800338e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800338e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003390:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003392:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003394:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800339a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800339c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800339e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80033a0:	3301      	adds	r3, #1
 80033a2:	6003      	str	r3, [r0, #0]
 80033a4:	4770      	bx	lr

080033a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033a6:	680a      	ldr	r2, [r1, #0]
{
 80033a8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033aa:	1c53      	adds	r3, r2, #1
 80033ac:	d10a      	bne.n	80033c4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033ae:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033b4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033b6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80033b8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80033ba:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033bc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80033be:	3301      	adds	r3, #1
 80033c0:	6003      	str	r3, [r0, #0]
 80033c2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c4:	f100 0308 	add.w	r3, r0, #8
 80033c8:	685c      	ldr	r4, [r3, #4]
 80033ca:	6825      	ldr	r5, [r4, #0]
 80033cc:	42aa      	cmp	r2, r5
 80033ce:	d3ef      	bcc.n	80033b0 <vListInsert+0xa>
 80033d0:	4623      	mov	r3, r4
 80033d2:	e7f9      	b.n	80033c8 <vListInsert+0x22>

080033d4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033d4:	6841      	ldr	r1, [r0, #4]
 80033d6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80033d8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033da:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033dc:	6882      	ldr	r2, [r0, #8]
 80033de:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033e4:	bf08      	it	eq
 80033e6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033e8:	2200      	movs	r2, #0
 80033ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	3a01      	subs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033f2:	6818      	ldr	r0, [r3, #0]
}
 80033f4:	4770      	bx	lr
	...

080033f8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80033f8:	2300      	movs	r3, #0
{
 80033fa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80033fc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <prvTaskExitError+0x3c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	d008      	beq.n	8003418 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	e7fe      	b.n	8003416 <prvTaskExitError+0x1e>
 8003418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003428:	9b01      	ldr	r3, [sp, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0fc      	beq.n	8003428 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800342e:	b002      	add	sp, #8
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	2000008c 	.word	0x2000008c

08003438 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003438:	4806      	ldr	r0, [pc, #24]	; (8003454 <prvPortStartFirstTask+0x1c>)
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	6800      	ldr	r0, [r0, #0]
 800343e:	f380 8808 	msr	MSP, r0
 8003442:	b662      	cpsie	i
 8003444:	b661      	cpsie	f
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	df00      	svc	0
 8003450:	bf00      	nop
 8003452:	0000      	.short	0x0000
 8003454:	e000ed08 	.word	0xe000ed08

08003458 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800345c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003462:	f021 0101 	bic.w	r1, r1, #1
 8003466:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800346a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800346e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003472:	3840      	subs	r0, #64	; 0x40
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	080033f9 	.word	0x080033f9
 800347c:	00000000 	.word	0x00000000

08003480 <SVC_Handler>:
	__asm volatile (
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <pxCurrentTCBConst2>)
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	6808      	ldr	r0, [r1, #0]
 8003486:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800348a:	f380 8809 	msr	PSP, r0
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f380 8811 	msr	BASEPRI, r0
 800349a:	f04e 0e0d 	orr.w	lr, lr, #13
 800349e:	4770      	bx	lr

080034a0 <pxCurrentTCBConst2>:
 80034a0:	20004fb8 	.word	0x20004fb8

080034a4 <vPortEnterCritical>:
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80034b4:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <vPortEnterCritical+0x3c>)
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80034ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80034bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80034be:	d10d      	bne.n	80034dc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <vPortEnterCritical+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80034c8:	d008      	beq.n	80034dc <vPortEnterCritical+0x38>
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	e7fe      	b.n	80034da <vPortEnterCritical+0x36>
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000008c 	.word	0x2000008c
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80034e8:	4a08      	ldr	r2, [pc, #32]	; (800350c <vPortExitCritical+0x24>)
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	b943      	cbnz	r3, 8003500 <vPortExitCritical+0x18>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	e7fe      	b.n	80034fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003500:	3b01      	subs	r3, #1
 8003502:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003504:	b90b      	cbnz	r3, 800350a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	4770      	bx	lr
 800350c:	2000008c 	.word	0x2000008c

08003510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003510:	f3ef 8009 	mrs	r0, PSP
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <pxCurrentTCBConst>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003520:	6010      	str	r0, [r2, #0]
 8003522:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003526:	f04f 0050 	mov.w	r0, #80	; 0x50
 800352a:	f380 8811 	msr	BASEPRI, r0
 800352e:	f000 ff77 	bl	8004420 <vTaskSwitchContext>
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8811 	msr	BASEPRI, r0
 800353a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	6808      	ldr	r0, [r1, #0]
 8003542:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003546:	f380 8809 	msr	PSP, r0
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	4770      	bx	lr

08003550 <pxCurrentTCBConst>:
 8003550:	20004fb8 	.word	0x20004fb8

08003554 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003554:	b508      	push	{r3, lr}
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003566:	f000 fe2d 	bl	80041c4 <xTaskIncrementTick>
 800356a:	b118      	cbz	r0, 8003574 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	4b02      	ldr	r3, [pc, #8]	; (800357c <xPortSysTickHandler+0x28>)
 8003572:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003574:	2300      	movs	r3, #0
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	bd08      	pop	{r3, pc}
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003580:	2300      	movs	r3, #0
 8003582:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003584:	4908      	ldr	r1, [pc, #32]	; (80035a8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003588:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800358a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <vPortSetupTimerInterrupt+0x2c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	fbb3 f3f1 	udiv	r3, r3, r1
 8003596:	4906      	ldr	r1, [pc, #24]	; (80035b0 <vPortSetupTimerInterrupt+0x30>)
 8003598:	3b01      	subs	r3, #1
 800359a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800359c:	2307      	movs	r3, #7
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e010 	.word	0xe000e010
 80035a8:	e000e018 	.word	0xe000e018
 80035ac:	200000a0 	.word	0x200000a0
 80035b0:	e000e014 	.word	0xe000e014

080035b4 <xPortStartScheduler>:
{
 80035b4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035b6:	4b27      	ldr	r3, [pc, #156]	; (8003654 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035b8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035c4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035c6:	4a24      	ldr	r2, [pc, #144]	; (8003658 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80035d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035d6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035d8:	2207      	movs	r2, #7
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <xPortStartScheduler+0xa8>)
 80035dc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035de:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80035e2:	1e54      	subs	r4, r2, #1
 80035e4:	0600      	lsls	r0, r0, #24
 80035e6:	d40d      	bmi.n	8003604 <xPortStartScheduler+0x50>
 80035e8:	b101      	cbz	r1, 80035ec <xPortStartScheduler+0x38>
 80035ea:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2a03      	cmp	r2, #3
 80035f0:	d011      	beq.n	8003616 <xPortStartScheduler+0x62>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	e7fe      	b.n	8003602 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003604:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003608:	2101      	movs	r1, #1
 800360a:	0052      	lsls	r2, r2, #1
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f88d 2003 	strb.w	r2, [sp, #3]
 8003612:	4622      	mov	r2, r4
 8003614:	e7e3      	b.n	80035de <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8003616:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003618:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800361a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800361e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003620:	9b01      	ldr	r3, [sp, #4]
 8003622:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <xPortStartScheduler+0xa0>)
 8003624:	b2db      	uxtb	r3, r3
 8003626:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <xPortStartScheduler+0xac>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003630:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003638:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800363a:	f7ff ffa1 	bl	8003580 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <xPortStartScheduler+0xb0>)
 8003640:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8003642:	f7ff fef9 	bl	8003438 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003646:	f000 feeb 	bl	8004420 <vTaskSwitchContext>
	prvTaskExitError();
 800364a:	f7ff fed5 	bl	80033f8 <prvTaskExitError>
}
 800364e:	4620      	mov	r0, r4
 8003650:	b002      	add	sp, #8
 8003652:	bd10      	pop	{r4, pc}
 8003654:	e000e400 	.word	0xe000e400
 8003658:	20000178 	.word	0x20000178
 800365c:	2000017c 	.word	0x2000017c
 8003660:	e000ed20 	.word	0xe000ed20
 8003664:	2000008c 	.word	0x2000008c

08003668 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003668:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <prvInsertBlockIntoFreeList+0x40>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4282      	cmp	r2, r0
 8003670:	d318      	bcc.n	80036a4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003672:	685c      	ldr	r4, [r3, #4]
 8003674:	1919      	adds	r1, r3, r4
 8003676:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003678:	bf01      	itttt	eq
 800367a:	6841      	ldreq	r1, [r0, #4]
 800367c:	4618      	moveq	r0, r3
 800367e:	1909      	addeq	r1, r1, r4
 8003680:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003682:	6844      	ldr	r4, [r0, #4]
 8003684:	1901      	adds	r1, r0, r4
 8003686:	428a      	cmp	r2, r1
 8003688:	d107      	bne.n	800369a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800368a:	4908      	ldr	r1, [pc, #32]	; (80036ac <prvInsertBlockIntoFreeList+0x44>)
 800368c:	6809      	ldr	r1, [r1, #0]
 800368e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003690:	bf1f      	itttt	ne
 8003692:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003694:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003696:	1909      	addne	r1, r1, r4
 8003698:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800369a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800369c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800369e:	bf18      	it	ne
 80036a0:	6018      	strne	r0, [r3, #0]
 80036a2:	bd10      	pop	{r4, pc}
 80036a4:	4613      	mov	r3, r2
 80036a6:	e7e1      	b.n	800366c <prvInsertBlockIntoFreeList+0x4>
 80036a8:	20004fb0 	.word	0x20004fb0
 80036ac:	20000180 	.word	0x20000180

080036b0 <pvPortMalloc>:
{
 80036b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80036b6:	f000 fd77 	bl	80041a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80036ba:	493d      	ldr	r1, [pc, #244]	; (80037b0 <pvPortMalloc+0x100>)
 80036bc:	4d3d      	ldr	r5, [pc, #244]	; (80037b4 <pvPortMalloc+0x104>)
 80036be:	680b      	ldr	r3, [r1, #0]
 80036c0:	b9fb      	cbnz	r3, 8003702 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 80036c2:	4a3d      	ldr	r2, [pc, #244]	; (80037b8 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 80036c4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036c6:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036c8:	bf0f      	iteee	eq
 80036ca:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036ce:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036d0:	4b3a      	ldrne	r3, [pc, #232]	; (80037bc <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036d2:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036d6:	bf18      	it	ne
 80036d8:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036da:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036dc:	4e38      	ldr	r6, [pc, #224]	; (80037c0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80036de:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036e0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80036e4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036e6:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80036e8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80036ea:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80036ec:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036ee:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036f0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036f4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036f6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036f8:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <pvPortMalloc+0x118>)
 80036fa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003700:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003702:	682f      	ldr	r7, [r5, #0]
 8003704:	4227      	tst	r7, r4
 8003706:	d116      	bne.n	8003736 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8003708:	2c00      	cmp	r4, #0
 800370a:	d040      	beq.n	800378e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800370c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003710:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003712:	bf1c      	itt	ne
 8003714:	f023 0307 	bicne.w	r3, r3, #7
 8003718:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800371a:	b163      	cbz	r3, 8003736 <pvPortMalloc+0x86>
 800371c:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <pvPortMalloc+0x118>)
 800371e:	6816      	ldr	r6, [r2, #0]
 8003720:	4690      	mov	r8, r2
 8003722:	42b3      	cmp	r3, r6
 8003724:	d807      	bhi.n	8003736 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8003726:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <pvPortMalloc+0x110>)
 8003728:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800372a:	6868      	ldr	r0, [r5, #4]
 800372c:	4283      	cmp	r3, r0
 800372e:	d804      	bhi.n	800373a <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003730:	6809      	ldr	r1, [r1, #0]
 8003732:	428d      	cmp	r5, r1
 8003734:	d107      	bne.n	8003746 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8003736:	2400      	movs	r4, #0
 8003738:	e029      	b.n	800378e <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800373a:	682c      	ldr	r4, [r5, #0]
 800373c:	2c00      	cmp	r4, #0
 800373e:	d0f7      	beq.n	8003730 <pvPortMalloc+0x80>
 8003740:	462a      	mov	r2, r5
 8003742:	4625      	mov	r5, r4
 8003744:	e7f1      	b.n	800372a <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003746:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003748:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800374a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800374c:	1ac2      	subs	r2, r0, r3
 800374e:	2a10      	cmp	r2, #16
 8003750:	d90f      	bls.n	8003772 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003752:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003754:	0741      	lsls	r1, r0, #29
 8003756:	d008      	beq.n	800376a <pvPortMalloc+0xba>
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	e7fe      	b.n	8003768 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800376a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800376c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800376e:	f7ff ff7b 	bl	8003668 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003772:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003774:	4913      	ldr	r1, [pc, #76]	; (80037c4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003776:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003778:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800377a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800377c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800377e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003782:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003784:	bf38      	it	cc
 8003786:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003788:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800378a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800378c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800378e:	f000 fdab 	bl	80042e8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003792:	0763      	lsls	r3, r4, #29
 8003794:	d008      	beq.n	80037a8 <pvPortMalloc+0xf8>
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	e7fe      	b.n	80037a6 <pvPortMalloc+0xf6>
}
 80037a8:	4620      	mov	r0, r4
 80037aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ae:	bf00      	nop
 80037b0:	20000180 	.word	0x20000180
 80037b4:	20004fa4 	.word	0x20004fa4
 80037b8:	20000184 	.word	0x20000184
 80037bc:	20004fa4 	.word	0x20004fa4
 80037c0:	20004fb0 	.word	0x20004fb0
 80037c4:	20004fac 	.word	0x20004fac
 80037c8:	20004fa8 	.word	0x20004fa8

080037cc <vPortFree>:
{
 80037cc:	b510      	push	{r4, lr}
	if( pv != NULL )
 80037ce:	4604      	mov	r4, r0
 80037d0:	b370      	cbz	r0, 8003830 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <vPortFree+0x68>)
 80037d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	4213      	tst	r3, r2
 80037dc:	d108      	bne.n	80037f0 <vPortFree+0x24>
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	e7fe      	b.n	80037ee <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037f0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80037f4:	b141      	cbz	r1, 8003808 <vPortFree+0x3c>
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	e7fe      	b.n	8003806 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003808:	ea23 0302 	bic.w	r3, r3, r2
 800380c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003810:	f000 fcca 	bl	80041a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003814:	4a08      	ldr	r2, [pc, #32]	; (8003838 <vPortFree+0x6c>)
 8003816:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800381a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800381c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003820:	440b      	add	r3, r1
 8003822:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003824:	f7ff ff20 	bl	8003668 <prvInsertBlockIntoFreeList>
}
 8003828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800382c:	f000 bd5c 	b.w	80042e8 <xTaskResumeAll>
 8003830:	bd10      	pop	{r4, pc}
 8003832:	bf00      	nop
 8003834:	20004fa4 	.word	0x20004fa4
 8003838:	20004fa8 	.word	0x20004fa8

0800383c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800383c:	b510      	push	{r4, lr}
 800383e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003840:	f7ff fe30 	bl	80034a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003844:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003846:	f7ff fe4f 	bl	80034e8 <vPortExitCritical>

	return xReturn;
}
 800384a:	fab4 f084 	clz	r0, r4
 800384e:	0940      	lsrs	r0, r0, #5
 8003850:	bd10      	pop	{r4, pc}

08003852 <prvCopyDataToQueue>:
{
 8003852:	b570      	push	{r4, r5, r6, lr}
 8003854:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003856:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003858:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800385a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800385c:	b942      	cbnz	r2, 8003870 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800385e:	6805      	ldr	r5, [r0, #0]
 8003860:	b99d      	cbnz	r5, 800388a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003862:	6840      	ldr	r0, [r0, #4]
 8003864:	f000 ff24 	bl	80046b0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003868:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800386a:	3601      	adds	r6, #1
 800386c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800386e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003870:	b96d      	cbnz	r5, 800388e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003872:	6880      	ldr	r0, [r0, #8]
 8003874:	f002 fa18 	bl	8005ca8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003878:	68a3      	ldr	r3, [r4, #8]
 800387a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800387c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800387e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003880:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003882:	4293      	cmp	r3, r2
 8003884:	d301      	bcc.n	800388a <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800388a:	2000      	movs	r0, #0
 800388c:	e7ed      	b.n	800386a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800388e:	68c0      	ldr	r0, [r0, #12]
 8003890:	f002 fa0a 	bl	8005ca8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003896:	68e2      	ldr	r2, [r4, #12]
 8003898:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800389a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800389c:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800389e:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80038a0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80038a2:	bf3e      	ittt	cc
 80038a4:	6862      	ldrcc	r2, [r4, #4]
 80038a6:	189b      	addcc	r3, r3, r2
 80038a8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80038aa:	2d02      	cmp	r5, #2
 80038ac:	d1ed      	bne.n	800388a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ae:	b10e      	cbz	r6, 80038b4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80038b0:	3e01      	subs	r6, #1
 80038b2:	e7ea      	b.n	800388a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80038b4:	4630      	mov	r0, r6
 80038b6:	e7d8      	b.n	800386a <prvCopyDataToQueue+0x18>

080038b8 <prvUnlockQueue>:
{
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80038bc:	f7ff fdf2 	bl	80034a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80038c0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038c4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80038c8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ca:	2d00      	cmp	r5, #0
 80038cc:	dc14      	bgt.n	80038f8 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80038ce:	23ff      	movs	r3, #255	; 0xff
 80038d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80038d4:	f7ff fe08 	bl	80034e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80038d8:	f7ff fde4 	bl	80034a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80038dc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80038e4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	dc12      	bgt.n	8003910 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80038ea:	23ff      	movs	r3, #255	; 0xff
 80038ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80038f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80038f4:	f7ff bdf8 	b.w	80034e8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0e7      	beq.n	80038ce <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 fde2 	bl	80044c8 <xTaskRemoveFromEventList>
 8003904:	b108      	cbz	r0, 800390a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003906:	f000 fe69 	bl	80045dc <vTaskMissedYield>
 800390a:	3d01      	subs	r5, #1
 800390c:	b26d      	sxtb	r5, r5
 800390e:	e7dc      	b.n	80038ca <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0e9      	beq.n	80038ea <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003916:	4630      	mov	r0, r6
 8003918:	f000 fdd6 	bl	80044c8 <xTaskRemoveFromEventList>
 800391c:	b108      	cbz	r0, 8003922 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800391e:	f000 fe5d 	bl	80045dc <vTaskMissedYield>
 8003922:	3d01      	subs	r5, #1
 8003924:	b26d      	sxtb	r5, r5
 8003926:	e7de      	b.n	80038e6 <prvUnlockQueue+0x2e>

08003928 <xQueueGenericReset>:
{
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800392c:	4604      	mov	r4, r0
 800392e:	b940      	cbnz	r0, 8003942 <xQueueGenericReset+0x1a>
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	e7fe      	b.n	8003940 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8003942:	f7ff fdaf 	bl	80034a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003946:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	4343      	muls	r3, r0
 800394e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003950:	1a1b      	subs	r3, r3, r0
 8003952:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003954:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003956:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003958:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800395a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800395c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800395e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8003960:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003964:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003968:	b995      	cbnz	r5, 8003990 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	b163      	cbz	r3, 8003988 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800396e:	f104 0010 	add.w	r0, r4, #16
 8003972:	f000 fda9 	bl	80044c8 <xTaskRemoveFromEventList>
 8003976:	b138      	cbz	r0, 8003988 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <xQueueGenericReset+0x7c>)
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003988:	f7ff fdae 	bl	80034e8 <vPortExitCritical>
}
 800398c:	2001      	movs	r0, #1
 800398e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003990:	f104 0010 	add.w	r0, r4, #16
 8003994:	f7ff fced 	bl	8003372 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003998:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800399c:	f7ff fce9 	bl	8003372 <vListInitialise>
 80039a0:	e7f2      	b.n	8003988 <xQueueGenericReset+0x60>
 80039a2:	bf00      	nop
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <xQueueGenericCreate>:
	{
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ac:	4606      	mov	r6, r0
 80039ae:	b940      	cbnz	r0, 80039c2 <xQueueGenericCreate+0x1a>
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80039c4:	3048      	adds	r0, #72	; 0x48
 80039c6:	f7ff fe73 	bl	80036b0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80039ca:	4604      	mov	r4, r0
 80039cc:	b150      	cbz	r0, 80039e4 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80039d4:	b945      	cbnz	r5, 80039e8 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039d6:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80039d8:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039da:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039dc:	2101      	movs	r1, #1
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff ffa2 	bl	8003928 <xQueueGenericReset>
	}
 80039e4:	4620      	mov	r0, r4
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80039e8:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039ec:	6003      	str	r3, [r0, #0]
 80039ee:	e7f3      	b.n	80039d8 <xQueueGenericCreate+0x30>

080039f0 <xQueueGenericSend>:
{
 80039f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f4:	4689      	mov	r9, r1
 80039f6:	9201      	str	r2, [sp, #4]
 80039f8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80039fa:	4604      	mov	r4, r0
 80039fc:	b940      	cbnz	r0, 8003a10 <xQueueGenericSend+0x20>
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	e7fe      	b.n	8003a0e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a10:	2900      	cmp	r1, #0
 8003a12:	f040 8088 	bne.w	8003b26 <xQueueGenericSend+0x136>
 8003a16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8084 	beq.w	8003b26 <xQueueGenericSend+0x136>
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	e7fe      	b.n	8003a2e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a30:	9e01      	ldr	r6, [sp, #4]
 8003a32:	2e00      	cmp	r6, #0
 8003a34:	f000 8082 	beq.w	8003b3c <xQueueGenericSend+0x14c>
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a4a:	9d01      	ldr	r5, [sp, #4]
 8003a4c:	b91d      	cbnz	r5, 8003a56 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8003a4e:	f7ff fd4b 	bl	80034e8 <vPortExitCritical>
			return errQUEUE_FULL;
 8003a52:	2000      	movs	r0, #0
 8003a54:	e058      	b.n	8003b08 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8003a56:	b916      	cbnz	r6, 8003a5e <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a58:	a802      	add	r0, sp, #8
 8003a5a:	f000 fd77 	bl	800454c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003a5e:	f7ff fd43 	bl	80034e8 <vPortExitCritical>
		vTaskSuspendAll();
 8003a62:	f000 fba1 	bl	80041a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a66:	f7ff fd1d 	bl	80034a4 <vPortEnterCritical>
 8003a6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003a6e:	2bff      	cmp	r3, #255	; 0xff
 8003a70:	bf08      	it	eq
 8003a72:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003a76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003a7a:	2bff      	cmp	r3, #255	; 0xff
 8003a7c:	bf08      	it	eq
 8003a7e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003a82:	f7ff fd31 	bl	80034e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a86:	a901      	add	r1, sp, #4
 8003a88:	a802      	add	r0, sp, #8
 8003a8a:	f000 fd6b 	bl	8004564 <xTaskCheckForTimeOut>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d143      	bne.n	8003b1a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a92:	f7ff fd07 	bl	80034a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a96:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003a98:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003a9a:	f7ff fd25 	bl	80034e8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a9e:	42ae      	cmp	r6, r5
 8003aa0:	d135      	bne.n	8003b0e <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aa2:	9901      	ldr	r1, [sp, #4]
 8003aa4:	f104 0010 	add.w	r0, r4, #16
 8003aa8:	f000 fcf4 	bl	8004494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff ff03 	bl	80038b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ab2:	f000 fc19 	bl	80042e8 <xTaskResumeAll>
 8003ab6:	b938      	cbnz	r0, 8003ac8 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8003ab8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003abc:	f8ca 3000 	str.w	r3, [sl]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003aca:	f7ff fceb 	bl	80034a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ace:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d301      	bcc.n	8003ada <xQueueGenericSend+0xea>
 8003ad6:	2f02      	cmp	r7, #2
 8003ad8:	d1b7      	bne.n	8003a4a <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ada:	463a      	mov	r2, r7
 8003adc:	4649      	mov	r1, r9
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff feb7 	bl	8003852 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae6:	b11b      	cbz	r3, 8003af0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003aec:	f000 fcec 	bl	80044c8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003af0:	b138      	cbz	r0, 8003b02 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8003af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af6:	4b18      	ldr	r3, [pc, #96]	; (8003b58 <xQueueGenericSend+0x168>)
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003b02:	f7ff fcf1 	bl	80034e8 <vPortExitCritical>
				return pdPASS;
 8003b06:	2001      	movs	r0, #1
}
 8003b08:	b004      	add	sp, #16
 8003b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f7ff fed2 	bl	80038b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b14:	f000 fbe8 	bl	80042e8 <xTaskResumeAll>
 8003b18:	e7d6      	b.n	8003ac8 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7ff fecc 	bl	80038b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b20:	f000 fbe2 	bl	80042e8 <xTaskResumeAll>
 8003b24:	e795      	b.n	8003a52 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b26:	2f02      	cmp	r7, #2
 8003b28:	d102      	bne.n	8003b30 <xQueueGenericSend+0x140>
 8003b2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10a      	bne.n	8003b46 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b30:	f000 fd5a 	bl	80045e8 <xTaskGetSchedulerState>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	f43f af7b 	beq.w	8003a30 <xQueueGenericSend+0x40>
 8003b3a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003b3c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003b40:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003b58 <xQueueGenericSend+0x168>
 8003b44:	e7c1      	b.n	8003aca <xQueueGenericSend+0xda>
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	e7fe      	b.n	8003b56 <xQueueGenericSend+0x166>
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <xQueueSemaphoreTake>:
{
 8003b5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8003b60:	4604      	mov	r4, r0
{
 8003b62:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003b64:	b940      	cbnz	r0, 8003b78 <xQueueSemaphoreTake+0x1c>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	e7fe      	b.n	8003b76 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b78:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003b7a:	b145      	cbz	r5, 8003b8e <xQueueSemaphoreTake+0x32>
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	e7fe      	b.n	8003b8c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b8e:	f000 fd2b 	bl	80045e8 <xTaskGetSchedulerState>
 8003b92:	b918      	cbnz	r0, 8003b9c <xQueueSemaphoreTake+0x40>
 8003b94:	9d01      	ldr	r5, [sp, #4]
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	f040 8095 	bne.w	8003cc6 <xQueueSemaphoreTake+0x16a>
 8003b9c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8003b9e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003ba0:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8003cd8 <xQueueSemaphoreTake+0x17c>
		taskENTER_CRITICAL();
 8003ba4:	f7ff fc7e 	bl	80034a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003baa:	b1e3      	cbz	r3, 8003be6 <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bac:	3b01      	subs	r3, #1
 8003bae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	b913      	cbnz	r3, 8003bba <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003bb4:	f000 fe24 	bl	8004800 <pvTaskIncrementMutexHeldCount>
 8003bb8:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	b163      	cbz	r3, 8003bd8 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bbe:	f104 0010 	add.w	r0, r4, #16
 8003bc2:	f000 fc81 	bl	80044c8 <xTaskRemoveFromEventList>
 8003bc6:	b138      	cbz	r0, 8003bd8 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8003bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <xQueueSemaphoreTake+0x17c>)
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003bd8:	f7ff fc86 	bl	80034e8 <vPortExitCritical>
				return pdPASS;
 8003bdc:	2501      	movs	r5, #1
}
 8003bde:	4628      	mov	r0, r5
 8003be0:	b004      	add	sp, #16
 8003be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	b963      	cbnz	r3, 8003c04 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003bea:	b145      	cbz	r5, 8003bfe <xQueueSemaphoreTake+0xa2>
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	e7fe      	b.n	8003bfc <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8003bfe:	f7ff fc73 	bl	80034e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003c02:	e7ec      	b.n	8003bde <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8003c04:	b916      	cbnz	r6, 8003c0c <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c06:	a802      	add	r0, sp, #8
 8003c08:	f000 fca0 	bl	800454c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003c0c:	f7ff fc6c 	bl	80034e8 <vPortExitCritical>
		vTaskSuspendAll();
 8003c10:	f000 faca 	bl	80041a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c14:	f7ff fc46 	bl	80034a4 <vPortEnterCritical>
 8003c18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003c1c:	2bff      	cmp	r3, #255	; 0xff
 8003c1e:	bf08      	it	eq
 8003c20:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003c24:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003c28:	2bff      	cmp	r3, #255	; 0xff
 8003c2a:	bf08      	it	eq
 8003c2c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003c30:	f7ff fc5a 	bl	80034e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c34:	a901      	add	r1, sp, #4
 8003c36:	a802      	add	r0, sp, #8
 8003c38:	f000 fc94 	bl	8004564 <xTaskCheckForTimeOut>
 8003c3c:	bb40      	cbnz	r0, 8003c90 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff fdfc 	bl	800383c <prvIsQueueEmpty>
 8003c44:	b1f0      	cbz	r0, 8003c84 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	b93b      	cbnz	r3, 8003c5a <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8003c4a:	f7ff fc2b 	bl	80034a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003c4e:	6860      	ldr	r0, [r4, #4]
 8003c50:	f000 fcda 	bl	8004608 <xTaskPriorityInherit>
 8003c54:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003c56:	f7ff fc47 	bl	80034e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c5a:	9901      	ldr	r1, [sp, #4]
 8003c5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c60:	f000 fc18 	bl	8004494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c64:	4620      	mov	r0, r4
 8003c66:	f7ff fe27 	bl	80038b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c6a:	f000 fb3d 	bl	80042e8 <xTaskResumeAll>
 8003c6e:	b938      	cbnz	r0, 8003c80 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8003c70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c74:	f8c8 3000 	str.w	r3, [r8]
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	2601      	movs	r6, #1
 8003c82:	e78f      	b.n	8003ba4 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7ff fe17 	bl	80038b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c8a:	f000 fb2d 	bl	80042e8 <xTaskResumeAll>
 8003c8e:	e7f7      	b.n	8003c80 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7ff fe11 	bl	80038b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c96:	f000 fb27 	bl	80042e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff fdce 	bl	800383c <prvIsQueueEmpty>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d0ed      	beq.n	8003c80 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8003ca4:	2d00      	cmp	r5, #0
 8003ca6:	d09a      	beq.n	8003bde <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8003ca8:	f7ff fbfc 	bl	80034a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003cac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003cae:	b119      	cbz	r1, 8003cb8 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003cb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003cb8:	6860      	ldr	r0, [r4, #4]
 8003cba:	f000 fd49 	bl	8004750 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8003cbe:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8003cc0:	f7ff fc12 	bl	80034e8 <vPortExitCritical>
 8003cc4:	e78b      	b.n	8003bde <xQueueSemaphoreTake+0x82>
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	e7fe      	b.n	8003cd6 <xQueueSemaphoreTake+0x17a>
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce0:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ce2:	f7ff fbdf 	bl	80034a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003ce8:	4c2d      	ldr	r4, [pc, #180]	; (8003da0 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4f2d      	ldr	r7, [pc, #180]	; (8003da4 <prvAddNewTaskToReadyList+0xc8>)
 8003cee:	3201      	adds	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003cf2:	6825      	ldr	r5, [r4, #0]
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	d145      	bne.n	8003d84 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cf8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d11c      	bne.n	8003d3a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d00:	1978      	adds	r0, r7, r5
 8003d02:	3514      	adds	r5, #20
 8003d04:	f7ff fb35 	bl	8003372 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d08:	2d8c      	cmp	r5, #140	; 0x8c
 8003d0a:	d1f9      	bne.n	8003d00 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d0c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003dd0 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003d10:	4d25      	ldr	r5, [pc, #148]	; (8003da8 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fb2d 	bl	8003372 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7ff fb2a 	bl	8003372 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d1e:	4823      	ldr	r0, [pc, #140]	; (8003dac <prvAddNewTaskToReadyList+0xd0>)
 8003d20:	f7ff fb27 	bl	8003372 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d24:	4822      	ldr	r0, [pc, #136]	; (8003db0 <prvAddNewTaskToReadyList+0xd4>)
 8003d26:	f7ff fb24 	bl	8003372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d2a:	4822      	ldr	r0, [pc, #136]	; (8003db4 <prvAddNewTaskToReadyList+0xd8>)
 8003d2c:	f7ff fb21 	bl	8003372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <prvAddNewTaskToReadyList+0xdc>)
 8003d32:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d36:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <prvAddNewTaskToReadyList+0xe0>)
 8003d38:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8003d3c:	4921      	ldr	r1, [pc, #132]	; (8003dc4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8003d3e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003d40:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003d42:	3301      	adds	r3, #1
 8003d44:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003d46:	2301      	movs	r3, #1
 8003d48:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003d4a:	4093      	lsls	r3, r2
 8003d4c:	4303      	orrs	r3, r0
 8003d4e:	2014      	movs	r0, #20
 8003d50:	600b      	str	r3, [r1, #0]
 8003d52:	fb00 7002 	mla	r0, r0, r2, r7
 8003d56:	1d31      	adds	r1, r6, #4
 8003d58:	f7ff fb19 	bl	800338e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003d5c:	f7ff fbc4 	bl	80034e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <prvAddNewTaskToReadyList+0xec>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	b163      	cbz	r3, 8003d80 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d207      	bcs.n	8003d80 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <prvAddNewTaskToReadyList+0xf0>)
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003d84:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <prvAddNewTaskToReadyList+0xec>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1d6      	bne.n	8003d3a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003d92:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003d94:	bf98      	it	ls
 8003d96:	6026      	strls	r6, [r4, #0]
 8003d98:	e7cf      	b.n	8003d3a <prvAddNewTaskToReadyList+0x5e>
 8003d9a:	bf00      	nop
 8003d9c:	20005050 	.word	0x20005050
 8003da0:	20004fb8 	.word	0x20004fb8
 8003da4:	20004fc4 	.word	0x20004fc4
 8003da8:	2000507c 	.word	0x2000507c
 8003dac:	20005098 	.word	0x20005098
 8003db0:	200050c4 	.word	0x200050c4
 8003db4:	200050b0 	.word	0x200050b0
 8003db8:	20004fbc 	.word	0x20004fbc
 8003dbc:	20004fc0 	.word	0x20004fc0
 8003dc0:	20005060 	.word	0x20005060
 8003dc4:	20005064 	.word	0x20005064
 8003dc8:	200050ac 	.word	0x200050ac
 8003dcc:	e000ed04 	.word	0xe000ed04
 8003dd0:	20005068 	.word	0x20005068

08003dd4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd4:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <prvResetNextTaskUnblockTime+0x1c>)
 8003dd6:	6813      	ldr	r3, [r2, #0]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <prvResetNextTaskUnblockTime+0x20>)
 8003ddc:	b919      	cbnz	r1, 8003de6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	6852      	ldr	r2, [r2, #4]
 8003dee:	e7f8      	b.n	8003de2 <prvResetNextTaskUnblockTime+0xe>
 8003df0:	20004fbc 	.word	0x20004fbc
 8003df4:	20005090 	.word	0x20005090

08003df8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	4681      	mov	r9, r0
 8003dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e00:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003e04:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003e06:	3a01      	subs	r2, #1
 8003e08:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003e0c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003e10:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e12:	f026 0607 	bic.w	r6, r6, #7
 8003e16:	1e4b      	subs	r3, r1, #1
 8003e18:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003e1c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e1e:	7858      	ldrb	r0, [r3, #1]
 8003e20:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003e24:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003e28:	b108      	cbz	r0, 8003e2e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2a:	428b      	cmp	r3, r1
 8003e2c:	d1f7      	bne.n	8003e1e <prvInitialiseNewTask.isra.2+0x26>
 8003e2e:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e30:	2700      	movs	r7, #0
 8003e32:	2d06      	cmp	r5, #6
 8003e34:	bf28      	it	cs
 8003e36:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e38:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003e3a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003e3c:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e3e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8003e42:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e44:	f7ff faa0 	bl	8003388 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e48:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e4c:	f104 0018 	add.w	r0, r4, #24
 8003e50:	f7ff fa9a 	bl	8003388 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003e54:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e56:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e58:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e5a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e5c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e60:	4652      	mov	r2, sl
 8003e62:	4649      	mov	r1, r9
 8003e64:	4630      	mov	r0, r6
 8003e66:	f7ff faf7 	bl	8003458 <pxPortInitialiseStack>
 8003e6a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003e6c:	f1b8 0f00 	cmp.w	r8, #0
 8003e70:	d001      	beq.n	8003e76 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e72:	f8c8 4000 	str.w	r4, [r8]
 8003e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e7a <prvDeleteTCB>:
	{
 8003e7a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e7c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8003e80:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e82:	b93b      	cbnz	r3, 8003e94 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8003e84:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003e86:	f7ff fca1 	bl	80037cc <vPortFree>
				vPortFree( pxTCB );
 8003e8a:	4620      	mov	r0, r4
	}
 8003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8003e90:	f7ff bc9c 	b.w	80037cc <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d0f9      	beq.n	8003e8c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d008      	beq.n	8003eae <prvDeleteTCB+0x34>
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	e7fe      	b.n	8003eac <prvDeleteTCB+0x32>
 8003eae:	bd10      	pop	{r4, pc}

08003eb0 <prvIdleTask>:
{
 8003eb0:	b580      	push	{r7, lr}
				taskYIELD();
 8003eb2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003f10 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003eb6:	4f12      	ldr	r7, [pc, #72]	; (8003f00 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eb8:	4c12      	ldr	r4, [pc, #72]	; (8003f04 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8003eba:	4d13      	ldr	r5, [pc, #76]	; (8003f08 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	b963      	cbnz	r3, 8003eda <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <prvIdleTask+0x5c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d9f8      	bls.n	8003eba <prvIdleTask+0xa>
				taskYIELD();
 8003ec8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ecc:	f8c8 3000 	str.w	r3, [r8]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	e7ee      	b.n	8003eb8 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8003eda:	f7ff fae3 	bl	80034a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee2:	1d30      	adds	r0, r6, #4
 8003ee4:	f7ff fa76 	bl	80033d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003ef4:	f7ff faf8 	bl	80034e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f7ff ffbe 	bl	8003e7a <prvDeleteTCB>
 8003efe:	e7dd      	b.n	8003ebc <prvIdleTask+0xc>
 8003f00:	200050c4 	.word	0x200050c4
 8003f04:	20005054 	.word	0x20005054
 8003f08:	20005050 	.word	0x20005050
 8003f0c:	20004fc4 	.word	0x20004fc4
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f18:	4e1b      	ldr	r6, [pc, #108]	; (8003f88 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8003f1a:	681d      	ldr	r5, [r3, #0]
{
 8003f1c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f1e:	6830      	ldr	r0, [r6, #0]
{
 8003f20:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f22:	3004      	adds	r0, #4
 8003f24:	f7ff fa56 	bl	80033d4 <uxListRemove>
 8003f28:	4633      	mov	r3, r6
 8003f2a:	b940      	cbnz	r0, 8003f3e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	6831      	ldr	r1, [r6, #0]
 8003f30:	4e16      	ldr	r6, [pc, #88]	; (8003f8c <prvAddCurrentTaskToDelayedList+0x78>)
 8003f32:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	4088      	lsls	r0, r1
 8003f38:	ea22 0200 	bic.w	r2, r2, r0
 8003f3c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f3e:	1c62      	adds	r2, r4, #1
 8003f40:	d107      	bne.n	8003f52 <prvAddCurrentTaskToDelayedList+0x3e>
 8003f42:	b137      	cbz	r7, 8003f52 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	4812      	ldr	r0, [pc, #72]	; (8003f90 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003f48:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f4e:	f7ff ba1e 	b.w	800338e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f52:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f54:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8003f56:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f58:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003f5a:	d907      	bls.n	8003f6c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <prvAddCurrentTaskToDelayedList+0x80>)
 8003f5e:	6810      	ldr	r0, [r2, #0]
 8003f60:	6819      	ldr	r1, [r3, #0]
}
 8003f62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f66:	3104      	adds	r1, #4
 8003f68:	f7ff ba1d 	b.w	80033a6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <prvAddCurrentTaskToDelayedList+0x84>)
 8003f6e:	6810      	ldr	r0, [r2, #0]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	3104      	adds	r1, #4
 8003f74:	f7ff fa17 	bl	80033a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <prvAddCurrentTaskToDelayedList+0x88>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003f7e:	bf38      	it	cc
 8003f80:	601c      	strcc	r4, [r3, #0]
 8003f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f84:	200050d8 	.word	0x200050d8
 8003f88:	20004fb8 	.word	0x20004fb8
 8003f8c:	20005064 	.word	0x20005064
 8003f90:	200050b0 	.word	0x200050b0
 8003f94:	20004fc0 	.word	0x20004fc0
 8003f98:	20004fbc 	.word	0x20004fbc
 8003f9c:	20005090 	.word	0x20005090

08003fa0 <xTaskCreateStatic>:
	{
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003fa6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003fa8:	b945      	cbnz	r5, 8003fbc <xTaskCreateStatic+0x1c>
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	e7fe      	b.n	8003fba <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8003fbc:	b944      	cbnz	r4, 8003fd0 <xTaskCreateStatic+0x30>
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	e7fe      	b.n	8003fce <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fd0:	2654      	movs	r6, #84	; 0x54
 8003fd2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fd4:	9e04      	ldr	r6, [sp, #16]
 8003fd6:	2e54      	cmp	r6, #84	; 0x54
 8003fd8:	d008      	beq.n	8003fec <xTaskCreateStatic+0x4c>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	e7fe      	b.n	8003fea <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fec:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fee:	2502      	movs	r5, #2
 8003ff0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ff4:	ad05      	add	r5, sp, #20
 8003ff6:	9501      	str	r5, [sp, #4]
 8003ff8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003ffa:	9402      	str	r4, [sp, #8]
 8003ffc:	9500      	str	r5, [sp, #0]
 8003ffe:	f7ff fefb 	bl	8003df8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004002:	4620      	mov	r0, r4
 8004004:	f7ff fe6a 	bl	8003cdc <prvAddNewTaskToReadyList>
	}
 8004008:	9805      	ldr	r0, [sp, #20]
 800400a:	b006      	add	sp, #24
 800400c:	bd70      	pop	{r4, r5, r6, pc}

0800400e <xTaskCreate>:
	{
 800400e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004012:	4607      	mov	r7, r0
 8004014:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004016:	0090      	lsls	r0, r2, #2
	{
 8004018:	4688      	mov	r8, r1
 800401a:	4616      	mov	r6, r2
 800401c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401e:	f7ff fb47 	bl	80036b0 <pvPortMalloc>
			if( pxStack != NULL )
 8004022:	4605      	mov	r5, r0
 8004024:	b1e8      	cbz	r0, 8004062 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004026:	2054      	movs	r0, #84	; 0x54
 8004028:	f7ff fb42 	bl	80036b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800402c:	4604      	mov	r4, r0
 800402e:	b1a8      	cbz	r0, 800405c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004030:	2300      	movs	r3, #0
 8004032:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8004038:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800403e:	9002      	str	r0, [sp, #8]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	4632      	mov	r2, r6
 8004044:	464b      	mov	r3, r9
 8004046:	4641      	mov	r1, r8
 8004048:	4638      	mov	r0, r7
 800404a:	f7ff fed5 	bl	8003df8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff fe44 	bl	8003cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004054:	2001      	movs	r0, #1
	}
 8004056:	b005      	add	sp, #20
 8004058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800405c:	4628      	mov	r0, r5
 800405e:	f7ff fbb5 	bl	80037cc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004062:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004066:	e7f6      	b.n	8004056 <xTaskCreate+0x48>

08004068 <vTaskDelete>:
	{
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	4604      	mov	r4, r0
 800406c:	4d29      	ldr	r5, [pc, #164]	; (8004114 <vTaskDelete+0xac>)
		taskENTER_CRITICAL();
 800406e:	f7ff fa19 	bl	80034a4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004072:	b904      	cbnz	r4, 8004076 <vTaskDelete+0xe>
 8004074:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004076:	1d26      	adds	r6, r4, #4
 8004078:	4630      	mov	r0, r6
 800407a:	f7ff f9ab 	bl	80033d4 <uxListRemove>
 800407e:	b960      	cbnz	r0, 800409a <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004080:	2114      	movs	r1, #20
 8004082:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <vTaskDelete+0xb0>)
 8004086:	4341      	muls	r1, r0
 8004088:	585b      	ldr	r3, [r3, r1]
 800408a:	b933      	cbnz	r3, 800409a <vTaskDelete+0x32>
 800408c:	2201      	movs	r2, #1
 800408e:	4923      	ldr	r1, [pc, #140]	; (800411c <vTaskDelete+0xb4>)
 8004090:	4082      	lsls	r2, r0
 8004092:	680b      	ldr	r3, [r1, #0]
 8004094:	ea23 0302 	bic.w	r3, r3, r2
 8004098:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800409a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800409c:	b11b      	cbz	r3, 80040a6 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800409e:	f104 0018 	add.w	r0, r4, #24
 80040a2:	f7ff f997 	bl	80033d4 <uxListRemove>
			uxTaskNumber++;
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <vTaskDelete+0xb8>)
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 80040ae:	682b      	ldr	r3, [r5, #0]
 80040b0:	429c      	cmp	r4, r3
 80040b2:	d11b      	bne.n	80040ec <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80040b4:	4631      	mov	r1, r6
 80040b6:	481b      	ldr	r0, [pc, #108]	; (8004124 <vTaskDelete+0xbc>)
 80040b8:	f7ff f969 	bl	800338e <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80040bc:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <vTaskDelete+0xc0>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 80040c4:	f7ff fa10 	bl	80034e8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80040c8:	4b18      	ldr	r3, [pc, #96]	; (800412c <vTaskDelete+0xc4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	b303      	cbz	r3, 8004110 <vTaskDelete+0xa8>
			if( pxTCB == pxCurrentTCB )
 80040ce:	682b      	ldr	r3, [r5, #0]
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d11d      	bne.n	8004110 <vTaskDelete+0xa8>
				configASSERT( uxSchedulerSuspended == 0 );
 80040d4:	4b16      	ldr	r3, [pc, #88]	; (8004130 <vTaskDelete+0xc8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	b193      	cbz	r3, 8004100 <vTaskDelete+0x98>
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	e7fe      	b.n	80040ea <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 80040ec:	4a11      	ldr	r2, [pc, #68]	; (8004134 <vTaskDelete+0xcc>)
				prvDeleteTCB( pxTCB );
 80040ee:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 80040f0:	6813      	ldr	r3, [r2, #0]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80040f6:	f7ff fec0 	bl	8003e7a <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 80040fa:	f7ff fe6b 	bl	8003dd4 <prvResetNextTaskUnblockTime>
 80040fe:	e7e1      	b.n	80040c4 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8004100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <vTaskDelete+0xd0>)
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	bf00      	nop
 8004114:	20004fb8 	.word	0x20004fb8
 8004118:	20004fc4 	.word	0x20004fc4
 800411c:	20005064 	.word	0x20005064
 8004120:	20005060 	.word	0x20005060
 8004124:	200050c4 	.word	0x200050c4
 8004128:	20005054 	.word	0x20005054
 800412c:	200050ac 	.word	0x200050ac
 8004130:	2000505c 	.word	0x2000505c
 8004134:	20005050 	.word	0x20005050
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <vTaskStartScheduler>:
{
 800413c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800413e:	2400      	movs	r4, #0
{
 8004140:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004142:	aa07      	add	r2, sp, #28
 8004144:	a906      	add	r1, sp, #24
 8004146:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004148:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800414a:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800414c:	f000 ff34 	bl	8004fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004150:	9b05      	ldr	r3, [sp, #20]
 8004152:	9400      	str	r4, [sp, #0]
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	9b06      	ldr	r3, [sp, #24]
 8004158:	9a07      	ldr	r2, [sp, #28]
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	490d      	ldr	r1, [pc, #52]	; (8004194 <vTaskStartScheduler+0x58>)
 800415e:	4623      	mov	r3, r4
 8004160:	480d      	ldr	r0, [pc, #52]	; (8004198 <vTaskStartScheduler+0x5c>)
 8004162:	f7ff ff1d 	bl	8003fa0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004166:	b190      	cbz	r0, 800418e <vTaskStartScheduler+0x52>
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <vTaskStartScheduler+0x60>)
 800417e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004180:	2201      	movs	r2, #1
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <vTaskStartScheduler+0x64>)
 8004184:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <vTaskStartScheduler+0x68>)
 8004188:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800418a:	f7ff fa13 	bl	80035b4 <xPortStartScheduler>
}
 800418e:	b008      	add	sp, #32
 8004190:	bd10      	pop	{r4, pc}
 8004192:	bf00      	nop
 8004194:	08006ede 	.word	0x08006ede
 8004198:	08003eb1 	.word	0x08003eb1
 800419c:	20005090 	.word	0x20005090
 80041a0:	200050ac 	.word	0x200050ac
 80041a4:	200050d8 	.word	0x200050d8

080041a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80041a8:	4a02      	ldr	r2, [pc, #8]	; (80041b4 <vTaskSuspendAll+0xc>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	3301      	adds	r3, #1
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000505c 	.word	0x2000505c

080041b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80041b8:	4b01      	ldr	r3, [pc, #4]	; (80041c0 <xTaskGetTickCount+0x8>)
 80041ba:	6818      	ldr	r0, [r3, #0]
}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200050d8 	.word	0x200050d8

080041c4 <xTaskIncrementTick>:
{
 80041c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c8:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <xTaskIncrementTick+0xf8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d153      	bne.n	8004278 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041d0:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <xTaskIncrementTick+0xfc>)
 80041d2:	681c      	ldr	r4, [r3, #0]
 80041d4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80041d6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041d8:	b9bc      	cbnz	r4, 800420a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80041da:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <xTaskIncrementTick+0x100>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	b142      	cbz	r2, 80041f4 <xTaskIncrementTick+0x30>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	e7fe      	b.n	80041f2 <xTaskIncrementTick+0x2e>
 80041f4:	4a34      	ldr	r2, [pc, #208]	; (80042c8 <xTaskIncrementTick+0x104>)
 80041f6:	6819      	ldr	r1, [r3, #0]
 80041f8:	6810      	ldr	r0, [r2, #0]
 80041fa:	6018      	str	r0, [r3, #0]
 80041fc:	6011      	str	r1, [r2, #0]
 80041fe:	4a33      	ldr	r2, [pc, #204]	; (80042cc <xTaskIncrementTick+0x108>)
 8004200:	6813      	ldr	r3, [r2, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	f7ff fde5 	bl	8003dd4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800420a:	4d31      	ldr	r5, [pc, #196]	; (80042d0 <xTaskIncrementTick+0x10c>)
 800420c:	f04f 0b00 	mov.w	fp, #0
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	4f30      	ldr	r7, [pc, #192]	; (80042d4 <xTaskIncrementTick+0x110>)
 8004214:	429c      	cmp	r4, r3
 8004216:	d33e      	bcc.n	8004296 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004218:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80042c4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800421c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80042e4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004220:	f8d8 2000 	ldr.w	r2, [r8]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	bb72      	cbnz	r2, 8004286 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	602a      	str	r2, [r5, #0]
					break;
 800422e:	e032      	b.n	8004296 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004230:	f106 0a04 	add.w	sl, r6, #4
 8004234:	4650      	mov	r0, sl
 8004236:	f7ff f8cd 	bl	80033d4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800423a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800423c:	b119      	cbz	r1, 8004246 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800423e:	f106 0018 	add.w	r0, r6, #24
 8004242:	f7ff f8c7 	bl	80033d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004246:	2201      	movs	r2, #1
 8004248:	f04f 0e14 	mov.w	lr, #20
 800424c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800424e:	f8d9 3000 	ldr.w	r3, [r9]
 8004252:	fa02 f100 	lsl.w	r1, r2, r0
 8004256:	4319      	orrs	r1, r3
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <xTaskIncrementTick+0x114>)
 800425a:	f8c9 1000 	str.w	r1, [r9]
 800425e:	fb0e 3000 	mla	r0, lr, r0, r3
 8004262:	4651      	mov	r1, sl
 8004264:	f7ff f893 	bl	800338e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004268:	6838      	ldr	r0, [r7, #0]
 800426a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800426c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800426e:	4291      	cmp	r1, r2
 8004270:	bf28      	it	cs
 8004272:	f04f 0b01 	movcs.w	fp, #1
 8004276:	e7d3      	b.n	8004220 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800427a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	e011      	b.n	80042aa <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004286:	f8d8 2000 	ldr.w	r2, [r8]
 800428a:	68d2      	ldr	r2, [r2, #12]
 800428c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800428e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004290:	428c      	cmp	r4, r1
 8004292:	d2cd      	bcs.n	8004230 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004294:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <xTaskIncrementTick+0x114>)
 800429a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800429c:	2214      	movs	r2, #20
 800429e:	434a      	muls	r2, r1
 80042a0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80042a2:	2a02      	cmp	r2, #2
 80042a4:	bf28      	it	cs
 80042a6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80042aa:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <xTaskIncrementTick+0x11c>)
 80042ac:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80042ae:	2a00      	cmp	r2, #0
 80042b0:	bf18      	it	ne
 80042b2:	f04f 0b01 	movne.w	fp, #1
}
 80042b6:	4658      	mov	r0, fp
 80042b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042bc:	2000505c 	.word	0x2000505c
 80042c0:	200050d8 	.word	0x200050d8
 80042c4:	20004fbc 	.word	0x20004fbc
 80042c8:	20004fc0 	.word	0x20004fc0
 80042cc:	20005094 	.word	0x20005094
 80042d0:	20005090 	.word	0x20005090
 80042d4:	20004fb8 	.word	0x20004fb8
 80042d8:	20004fc4 	.word	0x20004fc4
 80042dc:	20005058 	.word	0x20005058
 80042e0:	200050dc 	.word	0x200050dc
 80042e4:	20005064 	.word	0x20005064

080042e8 <xTaskResumeAll>:
{
 80042e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80042ec:	4c31      	ldr	r4, [pc, #196]	; (80043b4 <xTaskResumeAll+0xcc>)
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	b943      	cbnz	r3, 8004304 <xTaskResumeAll+0x1c>
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	e7fe      	b.n	8004302 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004304:	f7ff f8ce 	bl	80034a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	3b01      	subs	r3, #1
 800430c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800430e:	6824      	ldr	r4, [r4, #0]
 8004310:	b12c      	cbz	r4, 800431e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004312:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004314:	f7ff f8e8 	bl	80034e8 <vPortExitCritical>
}
 8004318:	4620      	mov	r0, r4
 800431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800431e:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <xTaskResumeAll+0xd0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f5      	beq.n	8004312 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004326:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80043d0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800432a:	4f24      	ldr	r7, [pc, #144]	; (80043bc <xTaskResumeAll+0xd4>)
 800432c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80043d4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004330:	f8d9 3000 	ldr.w	r3, [r9]
 8004334:	b9e3      	cbnz	r3, 8004370 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004336:	b10c      	cbz	r4, 800433c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004338:	f7ff fd4c 	bl	8003dd4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800433c:	4d20      	ldr	r5, [pc, #128]	; (80043c0 <xTaskResumeAll+0xd8>)
 800433e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004340:	b144      	cbz	r4, 8004354 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8004342:	2701      	movs	r7, #1
 8004344:	4e1f      	ldr	r6, [pc, #124]	; (80043c4 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8004346:	f7ff ff3d 	bl	80041c4 <xTaskIncrementTick>
 800434a:	b100      	cbz	r0, 800434e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800434c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800434e:	3c01      	subs	r4, #1
 8004350:	d1f9      	bne.n	8004346 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8004352:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <xTaskResumeAll+0xdc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0da      	beq.n	8004312 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <xTaskResumeAll+0xe0>)
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800436c:	2401      	movs	r4, #1
 800436e:	e7d1      	b.n	8004314 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004370:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8004374:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004376:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004378:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800437a:	f104 0018 	add.w	r0, r4, #24
 800437e:	f7ff f829 	bl	80033d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004382:	4630      	mov	r0, r6
 8004384:	f7ff f826 	bl	80033d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004388:	2014      	movs	r0, #20
 800438a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	fa05 f302 	lsl.w	r3, r5, r2
 8004392:	430b      	orrs	r3, r1
 8004394:	fb00 8002 	mla	r0, r0, r2, r8
 8004398:	4631      	mov	r1, r6
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	f7fe fff7 	bl	800338e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <xTaskResumeAll+0xe4>)
 80043a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80043aa:	bf24      	itt	cs
 80043ac:	4b05      	ldrcs	r3, [pc, #20]	; (80043c4 <xTaskResumeAll+0xdc>)
 80043ae:	601d      	strcs	r5, [r3, #0]
 80043b0:	e7be      	b.n	8004330 <xTaskResumeAll+0x48>
 80043b2:	bf00      	nop
 80043b4:	2000505c 	.word	0x2000505c
 80043b8:	20005050 	.word	0x20005050
 80043bc:	20005064 	.word	0x20005064
 80043c0:	20005058 	.word	0x20005058
 80043c4:	200050dc 	.word	0x200050dc
 80043c8:	e000ed04 	.word	0xe000ed04
 80043cc:	20004fb8 	.word	0x20004fb8
 80043d0:	20005098 	.word	0x20005098
 80043d4:	20004fc4 	.word	0x20004fc4

080043d8 <vTaskDelay>:
	{
 80043d8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043da:	b940      	cbnz	r0, 80043ee <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80043dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <vTaskDelay+0x40>)
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <vTaskDelay+0x44>)
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	b141      	cbz	r1, 8004406 <vTaskDelay+0x2e>
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	e7fe      	b.n	8004404 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004406:	f7ff fecf 	bl	80041a8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800440a:	f7ff fd83 	bl	8003f14 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800440e:	f7ff ff6b 	bl	80042e8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004412:	2800      	cmp	r0, #0
 8004414:	d0e2      	beq.n	80043dc <vTaskDelay+0x4>
 8004416:	bd08      	pop	{r3, pc}
 8004418:	e000ed04 	.word	0xe000ed04
 800441c:	2000505c 	.word	0x2000505c

08004420 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <vTaskSwitchContext+0x60>)
{
 8004422:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <vTaskSwitchContext+0x64>)
 8004428:	b112      	cbz	r2, 8004430 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800442a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004430:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <vTaskSwitchContext+0x68>)
 8004434:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	2214      	movs	r2, #20
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f1c3 031f 	rsb	r3, r3, #31
 8004442:	435a      	muls	r2, r3
 8004444:	4911      	ldr	r1, [pc, #68]	; (800448c <vTaskSwitchContext+0x6c>)
 8004446:	588c      	ldr	r4, [r1, r2]
 8004448:	1888      	adds	r0, r1, r2
 800444a:	b944      	cbnz	r4, 800445e <vTaskSwitchContext+0x3e>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	e7fe      	b.n	800445c <vTaskSwitchContext+0x3c>
 800445e:	6844      	ldr	r4, [r0, #4]
 8004460:	3208      	adds	r2, #8
 8004462:	6864      	ldr	r4, [r4, #4]
 8004464:	440a      	add	r2, r1
 8004466:	4294      	cmp	r4, r2
 8004468:	bf08      	it	eq
 800446a:	6862      	ldreq	r2, [r4, #4]
 800446c:	6044      	str	r4, [r0, #4]
 800446e:	bf08      	it	eq
 8004470:	6042      	streq	r2, [r0, #4]
 8004472:	2214      	movs	r2, #20
 8004474:	fb02 1303 	mla	r3, r2, r3, r1
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <vTaskSwitchContext+0x70>)
 800447e:	e7d5      	b.n	800442c <vTaskSwitchContext+0xc>
 8004480:	2000505c 	.word	0x2000505c
 8004484:	200050dc 	.word	0x200050dc
 8004488:	20005064 	.word	0x20005064
 800448c:	20004fc4 	.word	0x20004fc4
 8004490:	20004fb8 	.word	0x20004fb8

08004494 <vTaskPlaceOnEventList>:
{
 8004494:	b510      	push	{r4, lr}
 8004496:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004498:	b940      	cbnz	r0, 80044ac <vTaskPlaceOnEventList+0x18>
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	e7fe      	b.n	80044aa <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <vTaskPlaceOnEventList+0x30>)
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	3118      	adds	r1, #24
 80044b2:	f7fe ff78 	bl	80033a6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044b6:	4620      	mov	r0, r4
}
 80044b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044bc:	2101      	movs	r1, #1
 80044be:	f7ff bd29 	b.w	8003f14 <prvAddCurrentTaskToDelayedList>
 80044c2:	bf00      	nop
 80044c4:	20004fb8 	.word	0x20004fb8

080044c8 <xTaskRemoveFromEventList>:
{
 80044c8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80044ca:	68c3      	ldr	r3, [r0, #12]
 80044cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80044ce:	b944      	cbnz	r4, 80044e2 <xTaskRemoveFromEventList+0x1a>
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	e7fe      	b.n	80044e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044e2:	f104 0518 	add.w	r5, r4, #24
 80044e6:	4628      	mov	r0, r5
 80044e8:	f7fe ff74 	bl	80033d4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <xTaskRemoveFromEventList+0x6c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b9e3      	cbnz	r3, 800452c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044f2:	1d25      	adds	r5, r4, #4
 80044f4:	4628      	mov	r0, r5
 80044f6:	f7fe ff6d 	bl	80033d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044fa:	2301      	movs	r3, #1
 80044fc:	490e      	ldr	r1, [pc, #56]	; (8004538 <xTaskRemoveFromEventList+0x70>)
 80044fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004500:	6808      	ldr	r0, [r1, #0]
 8004502:	4093      	lsls	r3, r2
 8004504:	4303      	orrs	r3, r0
 8004506:	2014      	movs	r0, #20
 8004508:	600b      	str	r3, [r1, #0]
 800450a:	4629      	mov	r1, r5
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <xTaskRemoveFromEventList+0x74>)
 800450e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004512:	f7fe ff3c 	bl	800338e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <xTaskRemoveFromEventList+0x78>)
 8004518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004520:	bf85      	ittet	hi
 8004522:	2001      	movhi	r0, #1
 8004524:	4b07      	ldrhi	r3, [pc, #28]	; (8004544 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8004526:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004528:	6018      	strhi	r0, [r3, #0]
}
 800452a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800452c:	4629      	mov	r1, r5
 800452e:	4806      	ldr	r0, [pc, #24]	; (8004548 <xTaskRemoveFromEventList+0x80>)
 8004530:	e7ef      	b.n	8004512 <xTaskRemoveFromEventList+0x4a>
 8004532:	bf00      	nop
 8004534:	2000505c 	.word	0x2000505c
 8004538:	20005064 	.word	0x20005064
 800453c:	20004fc4 	.word	0x20004fc4
 8004540:	20004fb8 	.word	0x20004fb8
 8004544:	200050dc 	.word	0x200050dc
 8004548:	20005098 	.word	0x20005098

0800454c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <vTaskInternalSetTimeOutState+0x10>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004552:	4b03      	ldr	r3, [pc, #12]	; (8004560 <vTaskInternalSetTimeOutState+0x14>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6043      	str	r3, [r0, #4]
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20005094 	.word	0x20005094
 8004560:	200050d8 	.word	0x200050d8

08004564 <xTaskCheckForTimeOut>:
{
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004568:	4605      	mov	r5, r0
 800456a:	b940      	cbnz	r0, 800457e <xTaskCheckForTimeOut+0x1a>
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	e7fe      	b.n	800457c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800457e:	b941      	cbnz	r1, 8004592 <xTaskCheckForTimeOut+0x2e>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	e7fe      	b.n	8004590 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004592:	f7fe ff87 	bl	80034a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004596:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004598:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800459a:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	1c58      	adds	r0, r3, #1
 80045a0:	d00e      	beq.n	80045c0 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045a2:	480d      	ldr	r0, [pc, #52]	; (80045d8 <xTaskCheckForTimeOut+0x74>)
 80045a4:	682e      	ldr	r6, [r5, #0]
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	4286      	cmp	r6, r0
 80045aa:	d001      	beq.n	80045b0 <xTaskCheckForTimeOut+0x4c>
 80045ac:	428a      	cmp	r2, r1
 80045ae:	d20e      	bcs.n	80045ce <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045b0:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d209      	bcs.n	80045ca <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045ba:	4628      	mov	r0, r5
 80045bc:	f7ff ffc6 	bl	800454c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80045c0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80045c2:	f7fe ff91 	bl	80034e8 <vPortExitCritical>
}
 80045c6:	4620      	mov	r0, r4
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80045ce:	2401      	movs	r4, #1
 80045d0:	e7f7      	b.n	80045c2 <xTaskCheckForTimeOut+0x5e>
 80045d2:	bf00      	nop
 80045d4:	200050d8 	.word	0x200050d8
 80045d8:	20005094 	.word	0x20005094

080045dc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80045dc:	2201      	movs	r2, #1
 80045de:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <vTaskMissedYield+0x8>)
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	4770      	bx	lr
 80045e4:	200050dc 	.word	0x200050dc

080045e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <xTaskGetSchedulerState+0x18>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b133      	cbz	r3, 80045fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <xTaskGetSchedulerState+0x1c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80045f4:	bf0c      	ite	eq
 80045f6:	2002      	moveq	r0, #2
 80045f8:	2000      	movne	r0, #0
 80045fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045fc:	2001      	movs	r0, #1
	}
 80045fe:	4770      	bx	lr
 8004600:	200050ac 	.word	0x200050ac
 8004604:	2000505c 	.word	0x2000505c

08004608 <xTaskPriorityInherit>:
	{
 8004608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800460c:	4604      	mov	r4, r0
 800460e:	2800      	cmp	r0, #0
 8004610:	d042      	beq.n	8004698 <xTaskPriorityInherit+0x90>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <xTaskPriorityInherit+0x9c>)
 8004614:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004616:	6811      	ldr	r1, [r2, #0]
 8004618:	4617      	mov	r7, r2
 800461a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800461c:	428b      	cmp	r3, r1
 800461e:	d232      	bcs.n	8004686 <xTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004620:	2614      	movs	r6, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004622:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004624:	4d20      	ldr	r5, [pc, #128]	; (80046a8 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004626:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004628:	bfa8      	it	ge
 800462a:	683a      	ldrge	r2, [r7, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800462c:	fb06 5303 	mla	r3, r6, r3, r5
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004630:	bfa2      	ittt	ge
 8004632:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8004634:	f1c2 0207 	rsbge	r2, r2, #7
 8004638:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800463a:	6942      	ldr	r2, [r0, #20]
 800463c:	429a      	cmp	r2, r3
 800463e:	d12d      	bne.n	800469c <xTaskPriorityInherit+0x94>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004640:	f100 0804 	add.w	r8, r0, #4
 8004644:	4640      	mov	r0, r8
 8004646:	f7fe fec5 	bl	80033d4 <uxListRemove>
 800464a:	4b18      	ldr	r3, [pc, #96]	; (80046ac <xTaskPriorityInherit+0xa4>)
 800464c:	b948      	cbnz	r0, 8004662 <xTaskPriorityInherit+0x5a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800464e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004650:	4346      	muls	r6, r0
 8004652:	59aa      	ldr	r2, [r5, r6]
 8004654:	b92a      	cbnz	r2, 8004662 <xTaskPriorityInherit+0x5a>
 8004656:	2101      	movs	r1, #1
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4081      	lsls	r1, r0
 800465c:	ea22 0201 	bic.w	r2, r2, r1
 8004660:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004662:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004664:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004666:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004668:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800466a:	2401      	movs	r4, #1
 800466c:	fa04 f002 	lsl.w	r0, r4, r2
 8004670:	4308      	orrs	r0, r1
 8004672:	6018      	str	r0, [r3, #0]
 8004674:	2014      	movs	r0, #20
 8004676:	4641      	mov	r1, r8
 8004678:	fb00 5002 	mla	r0, r0, r2, r5
 800467c:	f7fe fe87 	bl	800338e <vListInsertEnd>
				xReturn = pdTRUE;
 8004680:	2001      	movs	r0, #1
	}
 8004682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800468a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800468c:	42a0      	cmp	r0, r4
 800468e:	bf2c      	ite	cs
 8004690:	2000      	movcs	r0, #0
 8004692:	2001      	movcc	r0, #1
 8004694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 8004698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80046a2:	e7ed      	b.n	8004680 <xTaskPriorityInherit+0x78>
 80046a4:	20004fb8 	.word	0x20004fb8
 80046a8:	20004fc4 	.word	0x20004fc4
 80046ac:	20005064 	.word	0x20005064

080046b0 <xTaskPriorityDisinherit>:
	{
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80046b2:	4604      	mov	r4, r0
 80046b4:	b908      	cbnz	r0, 80046ba <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80046b6:	2000      	movs	r0, #0
 80046b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80046ba:	4b22      	ldr	r3, [pc, #136]	; (8004744 <xTaskPriorityDisinherit+0x94>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4298      	cmp	r0, r3
 80046c0:	d008      	beq.n	80046d4 <xTaskPriorityDisinherit+0x24>
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	e7fe      	b.n	80046d2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80046d4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80046d6:	b943      	cbnz	r3, 80046ea <xTaskPriorityDisinherit+0x3a>
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	e7fe      	b.n	80046e8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80046ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80046ee:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046f0:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80046f2:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046f4:	d0df      	beq.n	80046b6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1dd      	bne.n	80046b6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046fa:	1d05      	adds	r5, r0, #4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f7fe fe69 	bl	80033d4 <uxListRemove>
 8004702:	4e11      	ldr	r6, [pc, #68]	; (8004748 <xTaskPriorityDisinherit+0x98>)
 8004704:	4a11      	ldr	r2, [pc, #68]	; (800474c <xTaskPriorityDisinherit+0x9c>)
 8004706:	b950      	cbnz	r0, 800471e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004708:	2114      	movs	r1, #20
 800470a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800470c:	4379      	muls	r1, r7
 800470e:	5873      	ldr	r3, [r6, r1]
 8004710:	b92b      	cbnz	r3, 800471e <xTaskPriorityDisinherit+0x6e>
 8004712:	2001      	movs	r0, #1
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	40b8      	lsls	r0, r7
 8004718:	ea23 0300 	bic.w	r3, r3, r0
 800471c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800471e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004720:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004724:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004726:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004728:	2401      	movs	r4, #1
 800472a:	6811      	ldr	r1, [r2, #0]
 800472c:	fa04 f003 	lsl.w	r0, r4, r3
 8004730:	4308      	orrs	r0, r1
 8004732:	6010      	str	r0, [r2, #0]
 8004734:	2014      	movs	r0, #20
 8004736:	4629      	mov	r1, r5
 8004738:	fb00 6003 	mla	r0, r0, r3, r6
 800473c:	f7fe fe27 	bl	800338e <vListInsertEnd>
					xReturn = pdTRUE;
 8004740:	4620      	mov	r0, r4
	}
 8004742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004744:	20004fb8 	.word	0x20004fb8
 8004748:	20004fc4 	.word	0x20004fc4
 800474c:	20005064 	.word	0x20005064

08004750 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004752:	4604      	mov	r4, r0
 8004754:	2800      	cmp	r0, #0
 8004756:	d04b      	beq.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
			configASSERT( pxTCB->uxMutexesHeld );
 8004758:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800475a:	b942      	cbnz	r2, 800476e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	e7fe      	b.n	800476c <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800476e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004770:	4299      	cmp	r1, r3
 8004772:	bf38      	it	cc
 8004774:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004776:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004778:	428b      	cmp	r3, r1
 800477a:	d039      	beq.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800477c:	2a01      	cmp	r2, #1
 800477e:	d137      	bne.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					configASSERT( pxTCB != pxCurrentTCB );
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	4290      	cmp	r0, r2
 8004786:	d108      	bne.n	800479a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	e7fe      	b.n	8004798 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800479a:	2614      	movs	r6, #20
 800479c:	4d16      	ldr	r5, [pc, #88]	; (80047f8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800479e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047a0:	fb06 5303 	mla	r3, r6, r3, r5
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047a4:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047a6:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 80047a8:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047aa:	bfa4      	itt	ge
 80047ac:	f1c1 0107 	rsbge	r1, r1, #7
 80047b0:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d11c      	bne.n	80047f0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b6:	1d07      	adds	r7, r0, #4
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7fe fe0b 	bl	80033d4 <uxListRemove>
 80047be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047c0:	4c0e      	ldr	r4, [pc, #56]	; (80047fc <vTaskPriorityDisinheritAfterTimeout+0xac>)
 80047c2:	b940      	cbnz	r0, 80047d6 <vTaskPriorityDisinheritAfterTimeout+0x86>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047c4:	4356      	muls	r6, r2
 80047c6:	59ab      	ldr	r3, [r5, r6]
 80047c8:	b92b      	cbnz	r3, 80047d6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80047ca:	2101      	movs	r1, #1
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	4091      	lsls	r1, r2
 80047d0:	ea23 0301 	bic.w	r3, r3, r1
 80047d4:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 80047d6:	2301      	movs	r3, #1
 80047d8:	2014      	movs	r0, #20
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	4093      	lsls	r3, r2
 80047de:	430b      	orrs	r3, r1
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	4639      	mov	r1, r7
 80047e4:	fb00 5002 	mla	r0, r0, r2, r5
	}
 80047e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80047ec:	f7fe bdcf 	b.w	800338e <vListInsertEnd>
 80047f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20004fb8 	.word	0x20004fb8
 80047f8:	20004fc4 	.word	0x20004fc4
 80047fc:	20005064 	.word	0x20005064

08004800 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <pvTaskIncrementMutexHeldCount+0x14>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	b11a      	cbz	r2, 800480e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800480a:	3201      	adds	r2, #1
 800480c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800480e:	6818      	ldr	r0, [r3, #0]
	}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20004fb8 	.word	0x20004fb8

08004818 <xAligningTask>:
#include "structures.h"

extern xSemaphoreHandle xNewPressureSemaphore;


void xAligningTask(void *arguments){
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float impUpCoeff = 2.0;
	float impDownCoeff = -2.0;
	float impCoeff = 0.0;

	xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 800481c:	4c64      	ldr	r4, [pc, #400]	; (80049b0 <xAligningTask+0x198>)
void xAligningTask(void *arguments){
 800481e:	b087      	sub	sp, #28
	xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8004820:	f04f 31ff 	mov.w	r1, #4294967295
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	f7ff f999 	bl	8003b5c <xQueueSemaphoreTake>
	float impDownCoeff = -2.0;
 800482a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800482e:	9304      	str	r3, [sp, #16]
	float impUpCoeff = 2.0;
 8004830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	uint8_t currentTry = 0;
 8004834:	2700      	movs	r7, #0
 8004836:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80049c4 <xAligningTask+0x1ac>

			if (pressIsLower){
				impTime = (int32_t)(impUpCoeff * (float) deltaPressure);
				if (impTime <= 0) impTime = 1000;
				else if (impTime > 5000) impTime = 5000;
				VALVE_UP_ON;
 800483a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80049c8 <xAligningTask+0x1b0>
	float impUpCoeff = 2.0;
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	9405      	str	r4, [sp, #20]
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8004842:	9b05      	ldr	r3, [sp, #20]
 8004844:	f04f 31ff 	mov.w	r1, #4294967295
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	f7ff f987 	bl	8003b5c <xQueueSemaphoreTake>
		if (xStatus == pdPASS){
 800484e:	2801      	cmp	r0, #1
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8004850:	4605      	mov	r5, r0
		if (xStatus == pdPASS){
 8004852:	d1f6      	bne.n	8004842 <xAligningTask+0x2a>
			if (currentTry > MAX_ALIGNING_TRIES){
 8004854:	2f08      	cmp	r7, #8
 8004856:	4e57      	ldr	r6, [pc, #348]	; (80049b4 <xAligningTask+0x19c>)
 8004858:	d118      	bne.n	800488c <xAligningTask+0x74>
				vTaskDelay(DELAY_AFTER_ALIGNING_MS);
 800485a:	4857      	ldr	r0, [pc, #348]	; (80049b8 <xAligningTask+0x1a0>)
 800485c:	f7ff fdbc 	bl	80043d8 <vTaskDelay>
				testingParams.testStartPressure = controllerState.sensorData;
 8004860:	8873      	ldrh	r3, [r6, #2]
				xTaskCreate(xTestingTask, "testing", 200, NULL, 1, NULL);
 8004862:	2400      	movs	r4, #0
				testingParams.testStartPressure = controllerState.sensorData;
 8004864:	f8aa 300a 	strh.w	r3, [sl, #10]
				testingParams.timePassed = 0;
 8004868:	2200      	movs	r2, #0
 800486a:	2300      	movs	r3, #0
				xTaskCreate(xTestingTask, "testing", 200, NULL, 1, NULL);
 800486c:	9401      	str	r4, [sp, #4]
				testingParams.timePassed = 0;
 800486e:	e9ca 2304 	strd	r2, r3, [sl, #16]
				xTaskCreate(xTestingTask, "testing", 200, NULL, 1, NULL);
 8004872:	9500      	str	r5, [sp, #0]
 8004874:	4623      	mov	r3, r4
 8004876:	22c8      	movs	r2, #200	; 0xc8
 8004878:	4950      	ldr	r1, [pc, #320]	; (80049bc <xAligningTask+0x1a4>)
 800487a:	4851      	ldr	r0, [pc, #324]	; (80049c0 <xAligningTask+0x1a8>)
 800487c:	f7ff fbc7 	bl	800400e <xTaskCreate>
				vTaskDelete(NULL);
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff fbf1 	bl	8004068 <vTaskDelete>
				continue;
 8004886:	e7dc      	b.n	8004842 <xAligningTask+0x2a>
				currentTry = MAX_ALIGNING_TRIES + 1;
 8004888:	2708      	movs	r7, #8
 800488a:	e7da      	b.n	8004842 <xAligningTask+0x2a>
			startPressure = controllerState.sensorData;
 800488c:	8875      	ldrh	r5, [r6, #2]
			deltaPressure = testingParams.testPressure - startPressure;
 800488e:	f8ba 3000 	ldrh.w	r3, [sl]
 8004892:	1b58      	subs	r0, r3, r5
			deltaPressure = abs(deltaPressure);
 8004894:	b200      	sxth	r0, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	bfb8      	it	lt
 800489a:	4240      	neglt	r0, r0
 800489c:	b200      	sxth	r0, r0
			if (deltaPressure > PRESSURE_ACCURACY_THRESHOLD){
 800489e:	281e      	cmp	r0, #30
 80048a0:	ddf2      	ble.n	8004888 <xAligningTask+0x70>
				if (testingParams.testPressure > startPressure){
 80048a2:	b22a      	sxth	r2, r5
 80048a4:	4293      	cmp	r3, r2
 80048a6:	dc76      	bgt.n	8004996 <xAligningTask+0x17e>
				controllerState.valveIsOpen = 1;
			}
			else{
				impTime = (int32_t)(impDownCoeff * (float) deltaPressure);
 80048a8:	f7fc f96e 	bl	8000b88 <__aeabi_i2f>
 80048ac:	9904      	ldr	r1, [sp, #16]
 80048ae:	f7fc f9bf 	bl	8000c30 <__aeabi_fmul>
 80048b2:	f7fc fb83 	bl	8000fbc <__aeabi_f2iz>
				if (impTime <= 0) impTime = 1000;
 80048b6:	1e04      	subs	r4, r0, #0
 80048b8:	dc57      	bgt.n	800496a <xAligningTask+0x152>
 80048ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80048be:	e059      	b.n	8004974 <xAligningTask+0x15c>
 80048c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80048c4:	4284      	cmp	r4, r0
 80048c6:	bfa8      	it	ge
 80048c8:	4604      	movge	r4, r0
				controllerState.valveIsOpen = 1;
 80048ca:	f04f 0801 	mov.w	r8, #1
				VALVE_UP_ON;
 80048ce:	2201      	movs	r2, #1
 80048d0:	2102      	movs	r1, #2
 80048d2:	4648      	mov	r0, r9
 80048d4:	f7fd f9a6 	bl	8001c24 <HAL_GPIO_WritePin>
				controllerState.valveIsOpen = 1;
 80048d8:	f886 8014 	strb.w	r8, [r6, #20]
				else if (impTime > 5000) impTime = 5000;
				VALVE_DOWN_ON;
				controllerState.valveIsOpen = -1;
			}

			curImpCounter = xTaskGetTickCount();
 80048dc:	f7ff fc6c 	bl	80041b8 <xTaskGetTickCount>
 80048e0:	4683      	mov	fp, r0

			while(1){
				vTaskDelay(10);
 80048e2:	200a      	movs	r0, #10
 80048e4:	f7ff fd78 	bl	80043d8 <vTaskDelay>
				dImpCounter = xTaskGetTickCount() -  curImpCounter;
 80048e8:	f7ff fc66 	bl	80041b8 <xTaskGetTickCount>
 80048ec:	eba0 000b 	sub.w	r0, r0, fp
				if (dImpCounter > impTime){
 80048f0:	4284      	cmp	r4, r0
 80048f2:	daf6      	bge.n	80048e2 <xAligningTask+0xca>
					controllerState.valveIsOpen = 0;
 80048f4:	f04f 0b00 	mov.w	fp, #0
					VALVE_UP_OFF;
 80048f8:	2102      	movs	r1, #2
 80048fa:	465a      	mov	r2, fp
 80048fc:	4648      	mov	r0, r9
					controllerState.valveIsOpen = 0;
 80048fe:	f886 b014 	strb.w	fp, [r6, #20]
					VALVE_UP_OFF;
 8004902:	f7fd f98f 	bl	8001c24 <HAL_GPIO_WritePin>
					VALVE_DOWN_OFF;
 8004906:	465a      	mov	r2, fp
 8004908:	2104      	movs	r1, #4
 800490a:	4648      	mov	r0, r9
 800490c:	f7fd f98a 	bl	8001c24 <HAL_GPIO_WritePin>
					break;
				}
			}

			vTaskDelay(3000);
 8004910:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004914:	f7ff fd60 	bl	80043d8 <vTaskDelay>

			deltaPressure = controllerState.sensorData - startPressure;
 8004918:	8873      	ldrh	r3, [r6, #2]
			impCoeff = (float)impTime / (float) deltaPressure;
 800491a:	4620      	mov	r0, r4
			deltaPressure = controllerState.sensorData - startPressure;
 800491c:	1b5d      	subs	r5, r3, r5
			impCoeff = (float)impTime / (float) deltaPressure;
 800491e:	f7fc f933 	bl	8000b88 <__aeabi_i2f>
			deltaPressure = controllerState.sensorData - startPressure;
 8004922:	b22d      	sxth	r5, r5
			impCoeff = (float)impTime / (float) deltaPressure;
 8004924:	4683      	mov	fp, r0
 8004926:	4628      	mov	r0, r5
 8004928:	f7fc f92e 	bl	8000b88 <__aeabi_i2f>
 800492c:	4601      	mov	r1, r0
 800492e:	4658      	mov	r0, fp
 8004930:	f7fc fa32 	bl	8000d98 <__aeabi_fdiv>
			if (pressIsLower){
				if (impCoeff >= 0.0) impUpCoeff = impCoeff;
 8004934:	2100      	movs	r1, #0
			impCoeff = (float)impTime / (float) deltaPressure;
 8004936:	4683      	mov	fp, r0
			if (pressIsLower){
 8004938:	f1b8 0f00 	cmp.w	r8, #0
 800493c:	d024      	beq.n	8004988 <xAligningTask+0x170>
				if (impCoeff >= 0.0) impUpCoeff = impCoeff;
 800493e:	f7fc fb29 	bl	8000f94 <__aeabi_fcmpge>
 8004942:	b108      	cbz	r0, 8004948 <xAligningTask+0x130>
 8004944:	f8cd b00c 	str.w	fp, [sp, #12]
			}
			else{
				if (impCoeff <= 0.0) impDownCoeff = impCoeff;
			}

			deltaPressure = abs(deltaPressure);
 8004948:	2d00      	cmp	r5, #0
 800494a:	bfb8      	it	lt
 800494c:	426d      	neglt	r5, r5
			if (deltaPressure < PRESSURE_ACCURACY_THRESHOLD && impTime > 1000){
 800494e:	b22d      	sxth	r5, r5
 8004950:	2d1d      	cmp	r5, #29
 8004952:	dc07      	bgt.n	8004964 <xAligningTask+0x14c>
 8004954:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8004958:	dd04      	ble.n	8004964 <xAligningTask+0x14c>
				controllerState.state = TEST_ERROR;
 800495a:	2302      	movs	r3, #2
				vTaskDelete(NULL);
 800495c:	2000      	movs	r0, #0
				controllerState.state = TEST_ERROR;
 800495e:	72b3      	strb	r3, [r6, #10]
				vTaskDelete(NULL);
 8004960:	f7ff fb82 	bl	8004068 <vTaskDelete>
			}

			currentTry += 1;
 8004964:	3701      	adds	r7, #1
 8004966:	b2ff      	uxtb	r7, r7
 8004968:	e76b      	b.n	8004842 <xAligningTask+0x2a>
 800496a:	f241 3088 	movw	r0, #5000	; 0x1388
 800496e:	4284      	cmp	r4, r0
 8004970:	bfa8      	it	ge
 8004972:	4604      	movge	r4, r0
				VALVE_DOWN_ON;
 8004974:	2201      	movs	r2, #1
 8004976:	2104      	movs	r1, #4
 8004978:	4648      	mov	r0, r9
 800497a:	f7fd f953 	bl	8001c24 <HAL_GPIO_WritePin>
				controllerState.valveIsOpen = -1;
 800497e:	23ff      	movs	r3, #255	; 0xff
					pressIsLower = 0;
 8004980:	f04f 0800 	mov.w	r8, #0
				controllerState.valveIsOpen = -1;
 8004984:	7533      	strb	r3, [r6, #20]
 8004986:	e7a9      	b.n	80048dc <xAligningTask+0xc4>
				if (impCoeff <= 0.0) impDownCoeff = impCoeff;
 8004988:	f7fc fafa 	bl	8000f80 <__aeabi_fcmple>
 800498c:	2800      	cmp	r0, #0
 800498e:	d0db      	beq.n	8004948 <xAligningTask+0x130>
 8004990:	f8cd b010 	str.w	fp, [sp, #16]
 8004994:	e7d8      	b.n	8004948 <xAligningTask+0x130>
				impTime = (int32_t)(impUpCoeff * (float) deltaPressure);
 8004996:	f7fc f8f7 	bl	8000b88 <__aeabi_i2f>
 800499a:	9903      	ldr	r1, [sp, #12]
 800499c:	f7fc f948 	bl	8000c30 <__aeabi_fmul>
 80049a0:	f7fc fb0c 	bl	8000fbc <__aeabi_f2iz>
				if (impTime <= 0) impTime = 1000;
 80049a4:	1e04      	subs	r4, r0, #0
 80049a6:	dc8b      	bgt.n	80048c0 <xAligningTask+0xa8>
 80049a8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80049ac:	e78d      	b.n	80048ca <xAligningTask+0xb2>
 80049ae:	bf00      	nop
 80049b0:	200054b4 	.word	0x200054b4
 80049b4:	2000533c 	.word	0x2000533c
 80049b8:	000927c0 	.word	0x000927c0
 80049bc:	08006ee3 	.word	0x08006ee3
 80049c0:	080059a9 	.word	0x080059a9
 80049c4:	20005378 	.word	0x20005378
 80049c8:	40010800 	.word	0x40010800

080049cc <scanAnalogInput>:
extern uint16_t adcRawData;
extern uint8_t symbolsToShow[2];

extern xSemaphoreHandle xNewPressureSemaphore;

void scanAnalogInput(void *arguments){
 80049cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d0:	b086      	sub	sp, #24
	uint16_t array[10] = {1};
 80049d2:	f10d 0804 	add.w	r8, sp, #4
 80049d6:	2214      	movs	r2, #20
 80049d8:	2100      	movs	r1, #0
 80049da:	4640      	mov	r0, r8
 80049dc:	f001 f96f 	bl	8005cbe <memset>
 80049e0:	2301      	movs	r3, #1
	uint8_t pArray = 0;
 80049e2:	2600      	movs	r6, #0
			controllerState.sensorData = (uint16_t)(sum / 10);

			controllerState.dataToSend[0] = controllerState.sensorData;

			controllerState.sensorDataBar = adc_to_bar(controllerState.sensorData);
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 80049e4:	2400      	movs	r4, #0
			controllerState.sensorData = (uint16_t)(sum / 10);
 80049e6:	4f28      	ldr	r7, [pc, #160]	; (8004a88 <scanAnalogInput+0xbc>)
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 80049e8:	4d28      	ldr	r5, [pc, #160]	; (8004a8c <scanAnalogInput+0xc0>)
	uint16_t array[10] = {1};
 80049ea:	f8ad 3004 	strh.w	r3, [sp, #4]
		if (pArray == 10){
 80049ee:	2e0a      	cmp	r6, #10
 80049f0:	d139      	bne.n	8004a66 <scanAnalogInput+0x9a>
 80049f2:	2300      	movs	r3, #0
 80049f4:	4618      	mov	r0, r3
				sum += array[i];
 80049f6:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80049fa:	3301      	adds	r3, #1
			for (i = 0; i < 10; i++){
 80049fc:	2b0a      	cmp	r3, #10
				sum += array[i];
 80049fe:	4410      	add	r0, r2
			for (i = 0; i < 10; i++){
 8004a00:	d1f9      	bne.n	80049f6 <scanAnalogInput+0x2a>
			controllerState.sensorData = (uint16_t)(sum / 10);
 8004a02:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a06:	b280      	uxth	r0, r0
 8004a08:	8078      	strh	r0, [r7, #2]
			controllerState.dataToSend[0] = controllerState.sensorData;
 8004a0a:	81f8      	strh	r0, [r7, #14]
			controllerState.sensorDataBar = adc_to_bar(controllerState.sensorData);
 8004a0c:	f001 f862 	bl	8005ad4 <adc_to_bar>
 8004a10:	6078      	str	r0, [r7, #4]
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 8004a12:	f7fb fd71 	bl	80004f8 <__aeabi_f2d>
 8004a16:	4622      	mov	r2, r4
 8004a18:	462b      	mov	r3, r5
 8004a1a:	f7fb fdc1 	bl	80005a0 <__aeabi_dmul>
 8004a1e:	f7fb ffd1 	bl	80009c4 <__aeabi_d2iz>
 8004a22:	b200      	sxth	r0, r0
			if (controllerState.valueToShow > 99) controllerState.valueToShow = 99;
 8004a24:	2863      	cmp	r0, #99	; 0x63
 8004a26:	bfca      	itet	gt
 8004a28:	2363      	movgt	r3, #99	; 0x63
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 8004a2a:	8138      	strhle	r0, [r7, #8]
			if (controllerState.valueToShow > 99) controllerState.valueToShow = 99;
 8004a2c:	813b      	strhgt	r3, [r7, #8]

			if (controllerState.valueToShow < 0){
 8004a2e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8004a32:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <scanAnalogInput+0xc4>)
 8004a34:	2900      	cmp	r1, #0
				symbolsToShow[0] = 11;
				symbolsToShow[1] = 1;
			}
			else{
				symbolsToShow[0] = controllerState.valueToShow / 10;
 8004a36:	bfab      	itete	ge
 8004a38:	200a      	movge	r0, #10
				symbolsToShow[0] = 11;
 8004a3a:	220b      	movlt	r2, #11
				symbolsToShow[0] = controllerState.valueToShow / 10;
 8004a3c:	fb91 f2f0 	sdivge	r2, r1, r0
				symbolsToShow[0] = 11;
 8004a40:	701a      	strblt	r2, [r3, #0]
				symbolsToShow[1] = 1;
 8004a42:	bfb2      	itee	lt
 8004a44:	2201      	movlt	r2, #1
				symbolsToShow[0] = controllerState.valueToShow / 10;
 8004a46:	701a      	strbge	r2, [r3, #0]
				symbolsToShow[1] = controllerState.valueToShow % 10;
 8004a48:	fb00 1212 	mlsge	r2, r0, r2, r1
 8004a4c:	705a      	strb	r2, [r3, #1]
			}

			if (controllerState.state == TESTING) {
 8004a4e:	7abb      	ldrb	r3, [r7, #10]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d106      	bne.n	8004a62 <scanAnalogInput+0x96>
				//giving semaphore
				xSemaphoreGive(xNewPressureSemaphore);
 8004a54:	2300      	movs	r3, #0
 8004a56:	480f      	ldr	r0, [pc, #60]	; (8004a94 <scanAnalogInput+0xc8>)
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6800      	ldr	r0, [r0, #0]
 8004a5e:	f7fe ffc7 	bl	80039f0 <xQueueGenericSend>
			pArray = 0;
 8004a62:	2600      	movs	r6, #0
 8004a64:	e008      	b.n	8004a78 <scanAnalogInput+0xac>
			}

		}
		else{
			array[pArray] = adcRawData;
 8004a66:	4a0c      	ldr	r2, [pc, #48]	; (8004a98 <scanAnalogInput+0xcc>)
 8004a68:	ab06      	add	r3, sp, #24
 8004a6a:	8812      	ldrh	r2, [r2, #0]
 8004a6c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
			pArray++;
 8004a70:	3601      	adds	r6, #1
			array[pArray] = adcRawData;
 8004a72:	f823 2c14 	strh.w	r2, [r3, #-20]
			pArray++;
 8004a76:	b2f6      	uxtb	r6, r6
		}

		HAL_ADC_Start_IT(&hadc1);
 8004a78:	4808      	ldr	r0, [pc, #32]	; (8004a9c <scanAnalogInput+0xd0>)
 8004a7a:	f7fc fdeb 	bl	8001654 <HAL_ADC_Start_IT>



		vTaskDelay(50);
 8004a7e:	2032      	movs	r0, #50	; 0x32
 8004a80:	f7ff fcaa 	bl	80043d8 <vTaskDelay>
		if (pArray == 10){
 8004a84:	e7b3      	b.n	80049ee <scanAnalogInput+0x22>
 8004a86:	bf00      	nop
 8004a88:	2000533c 	.word	0x2000533c
 8004a8c:	40240000 	.word	0x40240000
 8004a90:	20005339 	.word	0x20005339
 8004a94:	200054b4 	.word	0x200054b4
 8004a98:	20005334 	.word	0x20005334
 8004a9c:	200054bc 	.word	0x200054bc

08004aa0 <get_modbus_address>:
void testing_led_blynk(uint8_t curStep);
void step_error_led_blynk(uint8_t curStep);

xSemaphoreHandle xNewPressureSemaphore;

uint8_t get_modbus_address(){
 8004aa0:	b510      	push	{r4, lr}
	uint8_t addr = 0;

	if (!HAL_GPIO_ReadPin(ADDR_0_PORT, ADDR_0_PIN)){
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	481b      	ldr	r0, [pc, #108]	; (8004b14 <get_modbus_address+0x74>)
 8004aa6:	f7fd f8b7 	bl	8001c18 <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 8004aaa:	fab0 f480 	clz	r4, r0
		addr |= (1 << 0);
	}
	if (!HAL_GPIO_ReadPin(ADDR_1_PORT, ADDR_1_PIN)){
 8004aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ab2:	4818      	ldr	r0, [pc, #96]	; (8004b14 <get_modbus_address+0x74>)
	uint8_t addr = 0;
 8004ab4:	0964      	lsrs	r4, r4, #5
	if (!HAL_GPIO_ReadPin(ADDR_1_PORT, ADDR_1_PIN)){
 8004ab6:	f7fd f8af 	bl	8001c18 <HAL_GPIO_ReadPin>
 8004aba:	b908      	cbnz	r0, 8004ac0 <get_modbus_address+0x20>
		addr |= (1 << 1);
 8004abc:	f044 0402 	orr.w	r4, r4, #2
	}
	if (!HAL_GPIO_ReadPin(ADDR_2_PORT, ADDR_2_PIN)){
 8004ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ac4:	4813      	ldr	r0, [pc, #76]	; (8004b14 <get_modbus_address+0x74>)
 8004ac6:	f7fd f8a7 	bl	8001c18 <HAL_GPIO_ReadPin>
 8004aca:	b910      	cbnz	r0, 8004ad2 <get_modbus_address+0x32>
		addr |= (1 << 2);
 8004acc:	f044 0404 	orr.w	r4, r4, #4
 8004ad0:	b2e4      	uxtb	r4, r4
	}
	if (!HAL_GPIO_ReadPin(ADDR_3_PORT, ADDR_3_PIN)){
 8004ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ad6:	4810      	ldr	r0, [pc, #64]	; (8004b18 <get_modbus_address+0x78>)
 8004ad8:	f7fd f89e 	bl	8001c18 <HAL_GPIO_ReadPin>
 8004adc:	b910      	cbnz	r0, 8004ae4 <get_modbus_address+0x44>
		addr |= (1 << 3);
 8004ade:	f044 0408 	orr.w	r4, r4, #8
 8004ae2:	b2e4      	uxtb	r4, r4
	}
	if (!HAL_GPIO_ReadPin(ADDR_4_PORT, ADDR_4_PIN)){
 8004ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ae8:	480b      	ldr	r0, [pc, #44]	; (8004b18 <get_modbus_address+0x78>)
 8004aea:	f7fd f895 	bl	8001c18 <HAL_GPIO_ReadPin>
 8004aee:	b910      	cbnz	r0, 8004af6 <get_modbus_address+0x56>
		addr |= (1 << 4);
 8004af0:	f044 0410 	orr.w	r4, r4, #16
 8004af4:	b2e4      	uxtb	r4, r4
	}
	if (!HAL_GPIO_ReadPin(ADDR_5_PORT, ADDR_5_PIN)){
 8004af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004afa:	4807      	ldr	r0, [pc, #28]	; (8004b18 <get_modbus_address+0x78>)
 8004afc:	f7fd f88c 	bl	8001c18 <HAL_GPIO_ReadPin>
 8004b00:	b920      	cbnz	r0, 8004b0c <get_modbus_address+0x6c>
		addr |= (1 << 5);
 8004b02:	f044 0420 	orr.w	r4, r4, #32
 8004b06:	b2e4      	uxtb	r4, r4
	}

	if (addr == 0) addr = 1;

	return addr;
}
 8004b08:	4620      	mov	r0, r4
 8004b0a:	bd10      	pop	{r4, pc}
	if (addr == 0) addr = 1;
 8004b0c:	2c00      	cmp	r4, #0
 8004b0e:	bf08      	it	eq
 8004b10:	2401      	moveq	r4, #1
 8004b12:	e7f9      	b.n	8004b08 <get_modbus_address+0x68>
 8004b14:	40010c00 	.word	0x40010c00
 8004b18:	40011000 	.word	0x40011000

08004b1c <controller_init>:



void controller_init(){
 8004b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	controllerState.modbusAddr = get_modbus_address();
 8004b1e:	f7ff ffbf 	bl	8004aa0 <get_modbus_address>

	eMBErrorCode    eStatus;
	eStatus = eMBInit( MB_RTU, (UCHAR)controllerState.modbusAddr, 0, 38400, MB_PAR_NONE );
 8004b22:	2400      	movs	r4, #0
	controllerState.modbusAddr = get_modbus_address();
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <controller_init+0x94>)
 8004b26:	4601      	mov	r1, r0
 8004b28:	7018      	strb	r0, [r3, #0]
	eStatus = eMBInit( MB_RTU, (UCHAR)controllerState.modbusAddr, 0, 38400, MB_PAR_NONE );
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8004b30:	9400      	str	r4, [sp, #0]
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7fe f8fa 	bl	8002d2c <eMBInit>
	//eStatus = eMBInit( MB_RTU, 17, 0, 38400, MB_PAR_NONE );

	eStatus = eMBEnable(  );
 8004b38:	f7fe f950 	bl	8002ddc <eMBEnable>

	vSemaphoreCreateBinary(xNewPressureSemaphore);
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	4621      	mov	r1, r4
 8004b40:	2001      	movs	r0, #1
 8004b42:	f7fe ff31 	bl	80039a8 <xQueueGenericCreate>
 8004b46:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <controller_init+0x98>)
 8004b48:	6010      	str	r0, [r2, #0]
 8004b4a:	b120      	cbz	r0, 8004b56 <controller_init+0x3a>
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	4622      	mov	r2, r4
 8004b50:	4621      	mov	r1, r4
 8004b52:	f7fe ff4d 	bl	80039f0 <xQueueGenericSend>

	testProgram.testPressure[0] = 21;
 8004b56:	2215      	movs	r2, #21
 8004b58:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <controller_init+0x9c>)
//
//	testProgram.testPressure[4] = 25;
//	testProgram.testTime[4] = 5;
//	testProgram.testDiffPressure[4] = 15;

	xTaskCreate(indicationTask, "Blynk", 200, NULL, 1, NULL);
 8004b5a:	2400      	movs	r4, #0
	testProgram.testPressure[0] = 21;
 8004b5c:	801a      	strh	r2, [r3, #0]
	testProgram.testTime[0] = 5;
 8004b5e:	2205      	movs	r2, #5
	xTaskCreate(indicationTask, "Blynk", 200, NULL, 1, NULL);
 8004b60:	2501      	movs	r5, #1
	testProgram.testTime[0] = 5;
 8004b62:	815a      	strh	r2, [r3, #10]
	testProgram.testDiffPressure[0] = 11;
 8004b64:	220b      	movs	r2, #11
	xTaskCreate(indicationTask, "Blynk", 200, NULL, 1, NULL);
 8004b66:	4915      	ldr	r1, [pc, #84]	; (8004bbc <controller_init+0xa0>)
	testProgram.testDiffPressure[0] = 11;
 8004b68:	829a      	strh	r2, [r3, #20]
	xTaskCreate(indicationTask, "Blynk", 200, NULL, 1, NULL);
 8004b6a:	4815      	ldr	r0, [pc, #84]	; (8004bc0 <controller_init+0xa4>)
 8004b6c:	4623      	mov	r3, r4
 8004b6e:	9401      	str	r4, [sp, #4]
 8004b70:	9500      	str	r5, [sp, #0]
 8004b72:	22c8      	movs	r2, #200	; 0xc8
 8004b74:	f7ff fa4b 	bl	800400e <xTaskCreate>
	xTaskCreate(scanBtnsTask, "Btns", 200, NULL, 1, NULL);
 8004b78:	4623      	mov	r3, r4
 8004b7a:	9401      	str	r4, [sp, #4]
 8004b7c:	9500      	str	r5, [sp, #0]
 8004b7e:	22c8      	movs	r2, #200	; 0xc8
 8004b80:	4910      	ldr	r1, [pc, #64]	; (8004bc4 <controller_init+0xa8>)
 8004b82:	4811      	ldr	r0, [pc, #68]	; (8004bc8 <controller_init+0xac>)
 8004b84:	f7ff fa43 	bl	800400e <xTaskCreate>
	xTaskCreate(scanAnalogInput, "analog", 200, NULL, 1, NULL);
 8004b88:	4623      	mov	r3, r4
 8004b8a:	9401      	str	r4, [sp, #4]
 8004b8c:	9500      	str	r5, [sp, #0]
 8004b8e:	22c8      	movs	r2, #200	; 0xc8
 8004b90:	490e      	ldr	r1, [pc, #56]	; (8004bcc <controller_init+0xb0>)
 8004b92:	480f      	ldr	r0, [pc, #60]	; (8004bd0 <controller_init+0xb4>)
 8004b94:	f7ff fa3b 	bl	800400e <xTaskCreate>
	xTaskCreate(xModbusPollTask, "modbus", 300, NULL, 1, NULL);
 8004b98:	9401      	str	r4, [sp, #4]
 8004b9a:	9500      	str	r5, [sp, #0]
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ba2:	490c      	ldr	r1, [pc, #48]	; (8004bd4 <controller_init+0xb8>)
 8004ba4:	480c      	ldr	r0, [pc, #48]	; (8004bd8 <controller_init+0xbc>)
 8004ba6:	f7ff fa32 	bl	800400e <xTaskCreate>

}
 8004baa:	b003      	add	sp, #12
 8004bac:	bd30      	pop	{r4, r5, pc}
 8004bae:	bf00      	nop
 8004bb0:	2000533c 	.word	0x2000533c
 8004bb4:	200054b4 	.word	0x200054b4
 8004bb8:	20005354 	.word	0x20005354
 8004bbc:	08006eeb 	.word	0x08006eeb
 8004bc0:	08004f15 	.word	0x08004f15
 8004bc4:	08006ef1 	.word	0x08006ef1
 8004bc8:	08005455 	.word	0x08005455
 8004bcc:	08006ef6 	.word	0x08006ef6
 8004bd0:	080049cd 	.word	0x080049cd
 8004bd4:	08006efd 	.word	0x08006efd
 8004bd8:	08005249 	.word	0x08005249

08004bdc <testing_led_blynk>:
	}
	vTaskDelete(NULL);
}

void testing_led_blynk(uint8_t curStep){
	switch(curStep){
 8004bdc:	3801      	subs	r0, #1
void testing_led_blynk(uint8_t curStep){
 8004bde:	b508      	push	{r3, lr}
	switch(curStep){
 8004be0:	2804      	cmp	r0, #4
 8004be2:	d865      	bhi.n	8004cb0 <testing_led_blynk+0xd4>
 8004be4:	e8df f000 	tbb	[pc, r0]
 8004be8:	36271d03 	.word	0x36271d03
 8004bec:	4a          	.byte	0x4a
 8004bed:	00          	.byte	0x00
		case(1):{
			HAL_GPIO_TogglePin(LED_STEP_1_PORT, LED_STEP_1_PIN);
 8004bee:	2110      	movs	r1, #16
 8004bf0:	4848      	ldr	r0, [pc, #288]	; (8004d14 <testing_led_blynk+0x138>)
 8004bf2:	f7fd f81c 	bl	8001c2e <HAL_GPIO_TogglePin>
			LED_STEP_2_OFF;
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	4846      	ldr	r0, [pc, #280]	; (8004d14 <testing_led_blynk+0x138>)
 8004bfc:	f7fd f812 	bl	8001c24 <HAL_GPIO_WritePin>
			break;
		}
		case(2):{
			LED_STEP_1_ON;
			HAL_GPIO_TogglePin(LED_STEP_2_PORT, LED_STEP_2_PIN);
			LED_STEP_3_OFF;
 8004c00:	2200      	movs	r2, #0
 8004c02:	2140      	movs	r1, #64	; 0x40
 8004c04:	4843      	ldr	r0, [pc, #268]	; (8004d14 <testing_led_blynk+0x138>)
 8004c06:	f7fd f80d 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_4_OFF;
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	4841      	ldr	r0, [pc, #260]	; (8004d14 <testing_led_blynk+0x138>)
 8004c10:	f7fd f808 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_5_OFF;
 8004c14:	2200      	movs	r2, #0
 8004c16:	2110      	movs	r1, #16
 8004c18:	483f      	ldr	r0, [pc, #252]	; (8004d18 <testing_led_blynk+0x13c>)
			  LED_ERR_3_OFF;
			  LED_ERR_4_OFF;
			  LED_ERR_5_OFF;
		}
	}
}
 8004c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			  LED_ERR_5_OFF;
 8004c1e:	f7fd b801 	b.w	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_1_ON;
 8004c22:	2201      	movs	r2, #1
 8004c24:	2110      	movs	r1, #16
 8004c26:	483b      	ldr	r0, [pc, #236]	; (8004d14 <testing_led_blynk+0x138>)
 8004c28:	f7fc fffc 	bl	8001c24 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_STEP_2_PORT, LED_STEP_2_PIN);
 8004c2c:	2120      	movs	r1, #32
 8004c2e:	4839      	ldr	r0, [pc, #228]	; (8004d14 <testing_led_blynk+0x138>)
 8004c30:	f7fc fffd 	bl	8001c2e <HAL_GPIO_TogglePin>
 8004c34:	e7e4      	b.n	8004c00 <testing_led_blynk+0x24>
			LED_STEP_1_ON;
 8004c36:	2201      	movs	r2, #1
 8004c38:	2110      	movs	r1, #16
 8004c3a:	4836      	ldr	r0, [pc, #216]	; (8004d14 <testing_led_blynk+0x138>)
 8004c3c:	f7fc fff2 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_2_ON;
 8004c40:	2201      	movs	r2, #1
 8004c42:	2120      	movs	r1, #32
 8004c44:	4833      	ldr	r0, [pc, #204]	; (8004d14 <testing_led_blynk+0x138>)
 8004c46:	f7fc ffed 	bl	8001c24 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_STEP_3_PORT, LED_STEP_3_PIN);
 8004c4a:	2140      	movs	r1, #64	; 0x40
 8004c4c:	4831      	ldr	r0, [pc, #196]	; (8004d14 <testing_led_blynk+0x138>)
 8004c4e:	f7fc ffee 	bl	8001c2e <HAL_GPIO_TogglePin>
 8004c52:	e7da      	b.n	8004c0a <testing_led_blynk+0x2e>
			LED_STEP_1_ON;
 8004c54:	2201      	movs	r2, #1
 8004c56:	2110      	movs	r1, #16
 8004c58:	482e      	ldr	r0, [pc, #184]	; (8004d14 <testing_led_blynk+0x138>)
 8004c5a:	f7fc ffe3 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_2_ON;
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2120      	movs	r1, #32
 8004c62:	482c      	ldr	r0, [pc, #176]	; (8004d14 <testing_led_blynk+0x138>)
 8004c64:	f7fc ffde 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_3_ON;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	2140      	movs	r1, #64	; 0x40
 8004c6c:	4829      	ldr	r0, [pc, #164]	; (8004d14 <testing_led_blynk+0x138>)
 8004c6e:	f7fc ffd9 	bl	8001c24 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_STEP_4_PORT, LED_STEP_4_PIN);
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	4827      	ldr	r0, [pc, #156]	; (8004d14 <testing_led_blynk+0x138>)
 8004c76:	f7fc ffda 	bl	8001c2e <HAL_GPIO_TogglePin>
 8004c7a:	e7cb      	b.n	8004c14 <testing_led_blynk+0x38>
			LED_STEP_1_ON;
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	2110      	movs	r1, #16
 8004c80:	4824      	ldr	r0, [pc, #144]	; (8004d14 <testing_led_blynk+0x138>)
 8004c82:	f7fc ffcf 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_2_ON;
 8004c86:	2201      	movs	r2, #1
 8004c88:	2120      	movs	r1, #32
 8004c8a:	4822      	ldr	r0, [pc, #136]	; (8004d14 <testing_led_blynk+0x138>)
 8004c8c:	f7fc ffca 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_3_ON;
 8004c90:	2201      	movs	r2, #1
 8004c92:	2140      	movs	r1, #64	; 0x40
 8004c94:	481f      	ldr	r0, [pc, #124]	; (8004d14 <testing_led_blynk+0x138>)
 8004c96:	f7fc ffc5 	bl	8001c24 <HAL_GPIO_WritePin>
			LED_STEP_4_ON;
 8004c9a:	2180      	movs	r1, #128	; 0x80
 8004c9c:	481d      	ldr	r0, [pc, #116]	; (8004d14 <testing_led_blynk+0x138>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f7fc ffc0 	bl	8001c24 <HAL_GPIO_WritePin>
}
 8004ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_TogglePin(LED_STEP_5_PORT, LED_STEP_5_PIN);
 8004ca8:	2110      	movs	r1, #16
 8004caa:	481b      	ldr	r0, [pc, #108]	; (8004d18 <testing_led_blynk+0x13c>)
 8004cac:	f7fc bfbf 	b.w	8001c2e <HAL_GPIO_TogglePin>
			  LED_STEP_1_OFF;
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2110      	movs	r1, #16
 8004cb4:	4817      	ldr	r0, [pc, #92]	; (8004d14 <testing_led_blynk+0x138>)
 8004cb6:	f7fc ffb5 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2120      	movs	r1, #32
 8004cbe:	4815      	ldr	r0, [pc, #84]	; (8004d14 <testing_led_blynk+0x138>)
 8004cc0:	f7fc ffb0 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2140      	movs	r1, #64	; 0x40
 8004cc8:	4812      	ldr	r0, [pc, #72]	; (8004d14 <testing_led_blynk+0x138>)
 8004cca:	f7fc ffab 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	4810      	ldr	r0, [pc, #64]	; (8004d14 <testing_led_blynk+0x138>)
 8004cd4:	f7fc ffa6 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2110      	movs	r1, #16
 8004cdc:	480e      	ldr	r0, [pc, #56]	; (8004d18 <testing_led_blynk+0x13c>)
 8004cde:	f7fc ffa1 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2108      	movs	r1, #8
 8004ce6:	480b      	ldr	r0, [pc, #44]	; (8004d14 <testing_led_blynk+0x138>)
 8004ce8:	f7fc ff9c 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 8004cec:	2200      	movs	r2, #0
 8004cee:	2120      	movs	r1, #32
 8004cf0:	4809      	ldr	r0, [pc, #36]	; (8004d18 <testing_led_blynk+0x13c>)
 8004cf2:	f7fc ff97 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2104      	movs	r1, #4
 8004cfa:	4808      	ldr	r0, [pc, #32]	; (8004d1c <testing_led_blynk+0x140>)
 8004cfc:	f7fc ff92 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 8004d00:	2200      	movs	r2, #0
 8004d02:	2102      	movs	r1, #2
 8004d04:	4805      	ldr	r0, [pc, #20]	; (8004d1c <testing_led_blynk+0x140>)
 8004d06:	f7fc ff8d 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_5_OFF;
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4803      	ldr	r0, [pc, #12]	; (8004d1c <testing_led_blynk+0x140>)
 8004d10:	e783      	b.n	8004c1a <testing_led_blynk+0x3e>
 8004d12:	bf00      	nop
 8004d14:	40010800 	.word	0x40010800
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40010c00 	.word	0x40010c00

08004d20 <step_error_led_blynk>:

void step_error_led_blynk(uint8_t curStep){
	switch(curStep){
 8004d20:	3801      	subs	r0, #1
void step_error_led_blynk(uint8_t curStep){
 8004d22:	b508      	push	{r3, lr}
	switch(curStep){
 8004d24:	2804      	cmp	r0, #4
 8004d26:	d82c      	bhi.n	8004d82 <step_error_led_blynk+0x62>
 8004d28:	e8df f000 	tbb	[pc, r0]
 8004d2c:	1c150e03 	.word	0x1c150e03
 8004d30:	23          	.byte	0x23
 8004d31:	00          	.byte	0x00
		case(1):{
			HAL_GPIO_TogglePin(LED_ERR_1_PORT, LED_ERR_1_PIN);
 8004d32:	2108      	movs	r1, #8
 8004d34:	482b      	ldr	r0, [pc, #172]	; (8004de4 <step_error_led_blynk+0xc4>)
 8004d36:	f7fc ff7a 	bl	8001c2e <HAL_GPIO_TogglePin>
			LED_STEP_1_ON;
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	2110      	movs	r1, #16
			LED_STEP_3_ON;
			break;
		}
		case(4):{
			HAL_GPIO_TogglePin(LED_ERR_4_PORT, LED_ERR_4_PIN);
			LED_STEP_4_ON;
 8004d3e:	4829      	ldr	r0, [pc, #164]	; (8004de4 <step_error_led_blynk+0xc4>)
			  LED_ERR_3_OFF;
			  LED_ERR_4_OFF;
			  LED_ERR_5_OFF;
		}
	}
}
 8004d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			  LED_ERR_5_OFF;
 8004d44:	f7fc bf6e 	b.w	8001c24 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_ERR_2_PORT, LED_ERR_2_PIN);
 8004d48:	2120      	movs	r1, #32
 8004d4a:	4827      	ldr	r0, [pc, #156]	; (8004de8 <step_error_led_blynk+0xc8>)
 8004d4c:	f7fc ff6f 	bl	8001c2e <HAL_GPIO_TogglePin>
			LED_STEP_2_ON;
 8004d50:	2201      	movs	r2, #1
 8004d52:	2120      	movs	r1, #32
 8004d54:	e7f3      	b.n	8004d3e <step_error_led_blynk+0x1e>
			HAL_GPIO_TogglePin(LED_ERR_3_PORT, LED_ERR_3_PIN);
 8004d56:	2104      	movs	r1, #4
 8004d58:	4824      	ldr	r0, [pc, #144]	; (8004dec <step_error_led_blynk+0xcc>)
 8004d5a:	f7fc ff68 	bl	8001c2e <HAL_GPIO_TogglePin>
			LED_STEP_3_ON;
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2140      	movs	r1, #64	; 0x40
 8004d62:	e7ec      	b.n	8004d3e <step_error_led_blynk+0x1e>
			HAL_GPIO_TogglePin(LED_ERR_4_PORT, LED_ERR_4_PIN);
 8004d64:	2102      	movs	r1, #2
 8004d66:	4821      	ldr	r0, [pc, #132]	; (8004dec <step_error_led_blynk+0xcc>)
 8004d68:	f7fc ff61 	bl	8001c2e <HAL_GPIO_TogglePin>
			LED_STEP_4_ON;
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	e7e5      	b.n	8004d3e <step_error_led_blynk+0x1e>
			HAL_GPIO_TogglePin(LED_ERR_5_PORT, LED_ERR_5_PIN);
 8004d72:	2101      	movs	r1, #1
 8004d74:	481d      	ldr	r0, [pc, #116]	; (8004dec <step_error_led_blynk+0xcc>)
 8004d76:	f7fc ff5a 	bl	8001c2e <HAL_GPIO_TogglePin>
			LED_STEP_5_ON;
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	481a      	ldr	r0, [pc, #104]	; (8004de8 <step_error_led_blynk+0xc8>)
 8004d80:	e7de      	b.n	8004d40 <step_error_led_blynk+0x20>
			  LED_STEP_1_OFF;
 8004d82:	2200      	movs	r2, #0
 8004d84:	2110      	movs	r1, #16
 8004d86:	4817      	ldr	r0, [pc, #92]	; (8004de4 <step_error_led_blynk+0xc4>)
 8004d88:	f7fc ff4c 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2120      	movs	r1, #32
 8004d90:	4814      	ldr	r0, [pc, #80]	; (8004de4 <step_error_led_blynk+0xc4>)
 8004d92:	f7fc ff47 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8004d96:	2200      	movs	r2, #0
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	4812      	ldr	r0, [pc, #72]	; (8004de4 <step_error_led_blynk+0xc4>)
 8004d9c:	f7fc ff42 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 8004da0:	2200      	movs	r2, #0
 8004da2:	2180      	movs	r1, #128	; 0x80
 8004da4:	480f      	ldr	r0, [pc, #60]	; (8004de4 <step_error_led_blynk+0xc4>)
 8004da6:	f7fc ff3d 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 8004daa:	2200      	movs	r2, #0
 8004dac:	2110      	movs	r1, #16
 8004dae:	480e      	ldr	r0, [pc, #56]	; (8004de8 <step_error_led_blynk+0xc8>)
 8004db0:	f7fc ff38 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 8004db4:	2200      	movs	r2, #0
 8004db6:	2108      	movs	r1, #8
 8004db8:	480a      	ldr	r0, [pc, #40]	; (8004de4 <step_error_led_blynk+0xc4>)
 8004dba:	f7fc ff33 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2120      	movs	r1, #32
 8004dc2:	4809      	ldr	r0, [pc, #36]	; (8004de8 <step_error_led_blynk+0xc8>)
 8004dc4:	f7fc ff2e 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2104      	movs	r1, #4
 8004dcc:	4807      	ldr	r0, [pc, #28]	; (8004dec <step_error_led_blynk+0xcc>)
 8004dce:	f7fc ff29 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2102      	movs	r1, #2
 8004dd6:	4805      	ldr	r0, [pc, #20]	; (8004dec <step_error_led_blynk+0xcc>)
 8004dd8:	f7fc ff24 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_5_OFF;
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2101      	movs	r1, #1
 8004de0:	4802      	ldr	r0, [pc, #8]	; (8004dec <step_error_led_blynk+0xcc>)
 8004de2:	e7ad      	b.n	8004d40 <step_error_led_blynk+0x20>
 8004de4:	40010800 	.word	0x40010800
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40010c00 	.word	0x40010c00

08004df0 <idle_led_blynk>:

void idle_led_blynk(uint8_t i){
 8004df0:	b508      	push	{r3, lr}
	  switch(i){
 8004df2:	2809      	cmp	r0, #9
 8004df4:	d85c      	bhi.n	8004eb0 <idle_led_blynk+0xc0>
 8004df6:	e8df f000 	tbb	[pc, r0]
 8004dfa:	0d05      	.short	0x0d05
 8004dfc:	31292119 	.word	0x31292119
 8004e00:	534a423a 	.word	0x534a423a
		  case 0:{
			  LED_STEP_1_ON;
 8004e04:	2201      	movs	r2, #1
 8004e06:	2110      	movs	r1, #16
 8004e08:	483f      	ldr	r0, [pc, #252]	; (8004f08 <idle_led_blynk+0x118>)
			  LED_STEP_4_OFF;
			  LED_STEP_5_OFF;
			  LED_ERR_1_OFF;
			  LED_ERR_2_OFF;
			  LED_ERR_3_OFF;
			  LED_ERR_4_OFF;
 8004e0a:	f7fc ff0b 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_5_OFF;
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2101      	movs	r1, #1
 8004e12:	e043      	b.n	8004e9c <idle_led_blynk+0xac>
			  LED_STEP_2_ON;
 8004e14:	2201      	movs	r2, #1
 8004e16:	2120      	movs	r1, #32
 8004e18:	483b      	ldr	r0, [pc, #236]	; (8004f08 <idle_led_blynk+0x118>)
 8004e1a:	f7fc ff03 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_1_OFF;
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2110      	movs	r1, #16
			  LED_ERR_1_OFF;
 8004e22:	4839      	ldr	r0, [pc, #228]	; (8004f08 <idle_led_blynk+0x118>)
			  break;
		  }
	  }
}
 8004e24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			  LED_ERR_5_OFF;
 8004e28:	f7fc befc 	b.w	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_3_ON;
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	2140      	movs	r1, #64	; 0x40
 8004e30:	4835      	ldr	r0, [pc, #212]	; (8004f08 <idle_led_blynk+0x118>)
 8004e32:	f7fc fef7 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 8004e36:	2200      	movs	r2, #0
 8004e38:	2120      	movs	r1, #32
 8004e3a:	e7f2      	b.n	8004e22 <idle_led_blynk+0x32>
			  LED_STEP_4_ON;
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	4831      	ldr	r0, [pc, #196]	; (8004f08 <idle_led_blynk+0x118>)
 8004e42:	f7fc feef 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8004e46:	2200      	movs	r2, #0
 8004e48:	2140      	movs	r1, #64	; 0x40
 8004e4a:	e7ea      	b.n	8004e22 <idle_led_blynk+0x32>
			  LED_STEP_5_ON;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	2110      	movs	r1, #16
 8004e50:	482e      	ldr	r0, [pc, #184]	; (8004f0c <idle_led_blynk+0x11c>)
 8004e52:	f7fc fee7 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 8004e56:	2200      	movs	r2, #0
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	e7e2      	b.n	8004e22 <idle_led_blynk+0x32>
			  LED_ERR_1_ON;
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	2108      	movs	r1, #8
 8004e60:	4829      	ldr	r0, [pc, #164]	; (8004f08 <idle_led_blynk+0x118>)
 8004e62:	f7fc fedf 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 8004e66:	2200      	movs	r2, #0
 8004e68:	2110      	movs	r1, #16
			  LED_ERR_2_OFF;
 8004e6a:	4828      	ldr	r0, [pc, #160]	; (8004f0c <idle_led_blynk+0x11c>)
 8004e6c:	e7da      	b.n	8004e24 <idle_led_blynk+0x34>
			  LED_ERR_2_ON;
 8004e6e:	2201      	movs	r2, #1
 8004e70:	2120      	movs	r1, #32
 8004e72:	4826      	ldr	r0, [pc, #152]	; (8004f0c <idle_led_blynk+0x11c>)
 8004e74:	f7fc fed6 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2108      	movs	r1, #8
 8004e7c:	e7d1      	b.n	8004e22 <idle_led_blynk+0x32>
			  LED_ERR_3_ON;
 8004e7e:	2201      	movs	r2, #1
 8004e80:	2104      	movs	r1, #4
 8004e82:	4823      	ldr	r0, [pc, #140]	; (8004f10 <idle_led_blynk+0x120>)
 8004e84:	f7fc fece 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2120      	movs	r1, #32
 8004e8c:	e7ed      	b.n	8004e6a <idle_led_blynk+0x7a>
			  LED_ERR_4_ON;
 8004e8e:	2201      	movs	r2, #1
 8004e90:	2102      	movs	r1, #2
 8004e92:	481f      	ldr	r0, [pc, #124]	; (8004f10 <idle_led_blynk+0x120>)
 8004e94:	f7fc fec6 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2104      	movs	r1, #4
			  LED_ERR_5_OFF;
 8004e9c:	481c      	ldr	r0, [pc, #112]	; (8004f10 <idle_led_blynk+0x120>)
 8004e9e:	e7c1      	b.n	8004e24 <idle_led_blynk+0x34>
			  LED_ERR_5_ON;
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	481b      	ldr	r0, [pc, #108]	; (8004f10 <idle_led_blynk+0x120>)
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	f7fc febd 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2102      	movs	r1, #2
 8004eae:	e7f5      	b.n	8004e9c <idle_led_blynk+0xac>
			  LED_STEP_1_OFF;
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	4814      	ldr	r0, [pc, #80]	; (8004f08 <idle_led_blynk+0x118>)
 8004eb6:	f7fc feb5 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2120      	movs	r1, #32
 8004ebe:	4812      	ldr	r0, [pc, #72]	; (8004f08 <idle_led_blynk+0x118>)
 8004ec0:	f7fc feb0 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2140      	movs	r1, #64	; 0x40
 8004ec8:	480f      	ldr	r0, [pc, #60]	; (8004f08 <idle_led_blynk+0x118>)
 8004eca:	f7fc feab 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	480d      	ldr	r0, [pc, #52]	; (8004f08 <idle_led_blynk+0x118>)
 8004ed4:	f7fc fea6 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2110      	movs	r1, #16
 8004edc:	480b      	ldr	r0, [pc, #44]	; (8004f0c <idle_led_blynk+0x11c>)
 8004ede:	f7fc fea1 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2108      	movs	r1, #8
 8004ee6:	4808      	ldr	r0, [pc, #32]	; (8004f08 <idle_led_blynk+0x118>)
 8004ee8:	f7fc fe9c 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 8004eec:	2200      	movs	r2, #0
 8004eee:	2120      	movs	r1, #32
 8004ef0:	4806      	ldr	r0, [pc, #24]	; (8004f0c <idle_led_blynk+0x11c>)
 8004ef2:	f7fc fe97 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2104      	movs	r1, #4
 8004efa:	4805      	ldr	r0, [pc, #20]	; (8004f10 <idle_led_blynk+0x120>)
 8004efc:	f7fc fe92 	bl	8001c24 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 8004f00:	2200      	movs	r2, #0
 8004f02:	2102      	movs	r1, #2
 8004f04:	4802      	ldr	r0, [pc, #8]	; (8004f10 <idle_led_blynk+0x120>)
 8004f06:	e780      	b.n	8004e0a <idle_led_blynk+0x1a>
 8004f08:	40010800 	.word	0x40010800
 8004f0c:	40011000 	.word	0x40011000
 8004f10:	40010c00 	.word	0x40010c00

08004f14 <indicationTask>:
void indicationTask(void *arguments){
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch(controllerState.state){
 8004f16:	4e24      	ldr	r6, [pc, #144]	; (8004fa8 <indicationTask+0x94>)
	uint8_t i = 0;
 8004f18:	2400      	movs	r4, #0
 8004f1a:	4637      	mov	r7, r6
				HAL_GPIO_TogglePin(LED_ERR_1_PORT, LED_ERR_1_PIN);
 8004f1c:	4d23      	ldr	r5, [pc, #140]	; (8004fac <indicationTask+0x98>)
		switch(controllerState.state){
 8004f1e:	7ab3      	ldrb	r3, [r6, #10]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d80c      	bhi.n	8004f3e <indicationTask+0x2a>
 8004f24:	e8df f003 	tbb	[pc, r3]
 8004f28:	102d1803 	.word	0x102d1803
 8004f2c:	14          	.byte	0x14
 8004f2d:	00          	.byte	0x00
				idle_led_blynk(i);
 8004f2e:	4620      	mov	r0, r4
				i++;
 8004f30:	3401      	adds	r4, #1
 8004f32:	b2e4      	uxtb	r4, r4
				idle_led_blynk(i);
 8004f34:	f7ff ff5c 	bl	8004df0 <idle_led_blynk>
				if (i > 9) i = 0;
 8004f38:	2c0a      	cmp	r4, #10
 8004f3a:	bf28      	it	cs
 8004f3c:	2400      	movcs	r4, #0
		vTaskDelay(500);
 8004f3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f42:	f7ff fa49 	bl	80043d8 <vTaskDelay>
		switch(controllerState.state){
 8004f46:	e7ea      	b.n	8004f1e <indicationTask+0xa>
				testing_led_blynk(controllerState.currentStep);
 8004f48:	7af8      	ldrb	r0, [r7, #11]
 8004f4a:	f7ff fe47 	bl	8004bdc <testing_led_blynk>
				break;
 8004f4e:	e7f6      	b.n	8004f3e <indicationTask+0x2a>
				step_error_led_blynk(controllerState.currentStep);
 8004f50:	7af8      	ldrb	r0, [r7, #11]
 8004f52:	f7ff fee5 	bl	8004d20 <step_error_led_blynk>
				break;
 8004f56:	e7f2      	b.n	8004f3e <indicationTask+0x2a>
				HAL_GPIO_TogglePin(LED_STEP_1_PORT, LED_STEP_1_PIN);
 8004f58:	2110      	movs	r1, #16
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f7fc fe67 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_2_PORT, LED_STEP_2_PIN);
 8004f60:	2120      	movs	r1, #32
 8004f62:	4628      	mov	r0, r5
 8004f64:	f7fc fe63 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_3_PORT, LED_STEP_3_PIN);
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f7fc fe5f 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_4_PORT, LED_STEP_4_PIN);
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7fc fe5b 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_5_PORT, LED_STEP_5_PIN);
 8004f78:	2110      	movs	r1, #16
 8004f7a:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <indicationTask+0x9c>)
				HAL_GPIO_TogglePin(LED_ERR_5_PORT, LED_ERR_5_PIN);
 8004f7c:	f7fc fe57 	bl	8001c2e <HAL_GPIO_TogglePin>
				break;
 8004f80:	e7dd      	b.n	8004f3e <indicationTask+0x2a>
				HAL_GPIO_TogglePin(LED_ERR_1_PORT, LED_ERR_1_PIN);
 8004f82:	2108      	movs	r1, #8
 8004f84:	4628      	mov	r0, r5
 8004f86:	f7fc fe52 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_2_PORT, LED_ERR_2_PIN);
 8004f8a:	2120      	movs	r1, #32
 8004f8c:	4808      	ldr	r0, [pc, #32]	; (8004fb0 <indicationTask+0x9c>)
 8004f8e:	f7fc fe4e 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_3_PORT, LED_ERR_3_PIN);
 8004f92:	2104      	movs	r1, #4
 8004f94:	4807      	ldr	r0, [pc, #28]	; (8004fb4 <indicationTask+0xa0>)
 8004f96:	f7fc fe4a 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_4_PORT, LED_ERR_4_PIN);
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <indicationTask+0xa0>)
 8004f9e:	f7fc fe46 	bl	8001c2e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_5_PORT, LED_ERR_5_PIN);
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	4803      	ldr	r0, [pc, #12]	; (8004fb4 <indicationTask+0xa0>)
 8004fa6:	e7e9      	b.n	8004f7c <indicationTask+0x68>
 8004fa8:	2000533c 	.word	0x2000533c
 8004fac:	40010800 	.word	0x40010800
 8004fb0:	40011000 	.word	0x40011000
 8004fb4:	40010c00 	.word	0x40010c00

08004fb8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004fb8:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <vApplicationGetIdleTaskMemory+0x10>)
 8004fba:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <vApplicationGetIdleTaskMemory+0x14>)
 8004fbe:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	200052e0 	.word	0x200052e0
 8004fcc:	200050e0 	.word	0x200050e0

08004fd0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fd0:	2238      	movs	r2, #56	; 0x38
{
 8004fd2:	b530      	push	{r4, r5, lr}
 8004fd4:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fd6:	eb0d 0002 	add.w	r0, sp, r2
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f000 fe6f 	bl	8005cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fe0:	2214      	movs	r2, #20
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	a801      	add	r0, sp, #4
 8004fe6:	f000 fe6a 	bl	8005cbe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fea:	2220      	movs	r2, #32
 8004fec:	2100      	movs	r1, #0
 8004fee:	a806      	add	r0, sp, #24
 8004ff0:	f000 fe65 	bl	8005cbe <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ff8:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ffa:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ffc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ffe:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005000:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005004:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005006:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005008:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800500a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800500c:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800500e:	f7fc fe15 	bl	8001c3c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005012:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005014:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005018:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800501a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800501c:	4621      	mov	r1, r4
 800501e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005020:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005022:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005024:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005026:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005028:	f7fd f86a 	bl	8002100 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800502c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005030:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005032:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005034:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005036:	f7fd f921 	bl	800227c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800503a:	4b02      	ldr	r3, [pc, #8]	; (8005044 <SystemClock_Config+0x74>)
 800503c:	601d      	str	r5, [r3, #0]
}
 800503e:	b01d      	add	sp, #116	; 0x74
 8005040:	bd30      	pop	{r4, r5, pc}
 8005042:	bf00      	nop
 8005044:	42420070 	.word	0x42420070

08005048 <main>:
{
 8005048:	b500      	push	{lr}
 800504a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800504c:	f7fc f9a8 	bl	80013a0 <HAL_Init>
  SystemClock_Config();
 8005050:	f7ff ffbe 	bl	8004fd0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005054:	2210      	movs	r2, #16
 8005056:	2100      	movs	r1, #0
 8005058:	eb0d 0002 	add.w	r0, sp, r2
 800505c:	f000 fe2f 	bl	8005cbe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005060:	4b64      	ldr	r3, [pc, #400]	; (80051f4 <main+0x1ac>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8005062:	f648 11fe 	movw	r1, #35326	; 0x89fe
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005066:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8005068:	4863      	ldr	r0, [pc, #396]	; (80051f8 <main+0x1b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800506a:	f042 0210 	orr.w	r2, r2, #16
 800506e:	619a      	str	r2, [r3, #24]
 8005070:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005072:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005074:	f002 0210 	and.w	r2, r2, #16
 8005078:	9200      	str	r2, [sp, #0]
 800507a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800507c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800507e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005080:	f042 0220 	orr.w	r2, r2, #32
 8005084:	619a      	str	r2, [r3, #24]
 8005086:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005088:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800508a:	f002 0220 	and.w	r2, r2, #32
 800508e:	9201      	str	r2, [sp, #4]
 8005090:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	f042 0204 	orr.w	r2, r2, #4
 8005098:	619a      	str	r2, [r3, #24]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	f002 0204 	and.w	r2, r2, #4
 80050a0:	9202      	str	r2, [sp, #8]
 80050a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	f042 0208 	orr.w	r2, r2, #8
 80050aa:	619a      	str	r2, [r3, #24]
 80050ac:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80050ae:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	9303      	str	r3, [sp, #12]
 80050b6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80050b8:	f7fc fdb4 	bl	8001c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10 
 80050bc:	2200      	movs	r2, #0
 80050be:	f641 6130 	movw	r1, #7728	; 0x1e30
 80050c2:	484e      	ldr	r0, [pc, #312]	; (80051fc <main+0x1b4>)
 80050c4:	f7fc fdae 	bl	8001c24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80050c8:	2200      	movs	r2, #0
 80050ca:	217f      	movs	r1, #127	; 0x7f
 80050cc:	484c      	ldr	r0, [pc, #304]	; (8005200 <main+0x1b8>)
 80050ce:	f7fc fda9 	bl	8001c24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80050d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d6:	a904      	add	r1, sp, #16
 80050d8:	4848      	ldr	r0, [pc, #288]	; (80051fc <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80050da:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050dc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050e0:	f7fc fcb8 	bl	8001a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80050e4:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050e6:	a904      	add	r1, sp, #16
 80050e8:	4844      	ldr	r0, [pc, #272]	; (80051fc <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80050ea:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ee:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f0:	f7fc fcb0 	bl	8001a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80050f4:	f648 13fe 	movw	r3, #35326	; 0x89fe
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f8:	a904      	add	r1, sp, #16
 80050fa:	483f      	ldr	r0, [pc, #252]	; (80051f8 <main+0x1b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80050fc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050fe:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005100:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005102:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005104:	f7fc fca6 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10 
 8005108:	f641 6330 	movw	r3, #7728	; 0x1e30
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800510c:	a904      	add	r1, sp, #16
 800510e:	483b      	ldr	r0, [pc, #236]	; (80051fc <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10 
 8005110:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005112:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005114:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005116:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005118:	f7fc fc9c 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800511c:	237f      	movs	r3, #127	; 0x7f
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800511e:	a904      	add	r1, sp, #16
 8005120:	4837      	ldr	r0, [pc, #220]	; (8005200 <main+0x1b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005122:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005124:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005128:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800512a:	f7fc fc93 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800512e:	f44f 7360 	mov.w	r3, #896	; 0x380
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005132:	a904      	add	r1, sp, #16
 8005134:	4832      	ldr	r0, [pc, #200]	; (8005200 <main+0x1b8>)
  hadc1.Instance = ADC1;
 8005136:	4d33      	ldr	r5, [pc, #204]	; (8005204 <main+0x1bc>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005138:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800513a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800513c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513e:	f7fc fc89 	bl	8001a54 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8005142:	4b31      	ldr	r3, [pc, #196]	; (8005208 <main+0x1c0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005144:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8005146:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005148:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 800514c:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800514e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005150:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005152:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005154:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005156:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005158:	9404      	str	r4, [sp, #16]
 800515a:	9405      	str	r4, [sp, #20]
 800515c:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800515e:	f7fc fb01 	bl	8001764 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005162:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005164:	a904      	add	r1, sp, #16
 8005166:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005168:	9605      	str	r6, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800516a:	9306      	str	r3, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_0;
 800516c:	9404      	str	r4, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800516e:	f7fc f9b5 	bl	80014dc <HAL_ADC_ConfigChannel>
  htim6.Init.Prescaler = 72;
 8005172:	2348      	movs	r3, #72	; 0x48
 8005174:	4a25      	ldr	r2, [pc, #148]	; (800520c <main+0x1c4>)
  htim6.Instance = TIM6;
 8005176:	4d26      	ldr	r5, [pc, #152]	; (8005210 <main+0x1c8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005178:	9404      	str	r4, [sp, #16]
  htim6.Init.Prescaler = 72;
 800517a:	e885 000c 	stmia.w	r5, {r2, r3}
  htim6.Init.Period = 4999;
 800517e:	f241 3387 	movw	r3, #4999	; 0x1387
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005182:	4628      	mov	r0, r5
  htim6.Init.Period = 4999;
 8005184:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005186:	9405      	str	r4, [sp, #20]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005188:	60ac      	str	r4, [r5, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800518a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800518c:	f7fd fa40 	bl	8002610 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005190:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005192:	a904      	add	r1, sp, #16
 8005194:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005196:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005198:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800519a:	f7fd fa53 	bl	8002644 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 38200;
 800519e:	f249 5338 	movw	r3, #38200	; 0x9538
  huart1.Instance = USART1;
 80051a2:	481c      	ldr	r0, [pc, #112]	; (8005214 <main+0x1cc>)
  huart1.Init.BaudRate = 38200;
 80051a4:	491c      	ldr	r1, [pc, #112]	; (8005218 <main+0x1d0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051a6:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 38200;
 80051a8:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051ac:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051ae:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051b0:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051b2:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051b4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051b6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051b8:	f7fd faac 	bl	8002714 <HAL_UART_Init>
  htim7.Init.Prescaler = 71;
 80051bc:	2347      	movs	r3, #71	; 0x47
  htim7.Instance = TIM7;
 80051be:	4e17      	ldr	r6, [pc, #92]	; (800521c <main+0x1d4>)
  htim7.Init.Prescaler = 71;
 80051c0:	4817      	ldr	r0, [pc, #92]	; (8005220 <main+0x1d8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051c2:	9404      	str	r4, [sp, #16]
  htim7.Init.Prescaler = 71;
 80051c4:	e886 0009 	stmia.w	r6, {r0, r3}
  htim7.Init.Period = 49;
 80051c8:	2331      	movs	r3, #49	; 0x31
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80051ca:	4630      	mov	r0, r6
  htim7.Init.Period = 49;
 80051cc:	60f3      	str	r3, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051ce:	9405      	str	r4, [sp, #20]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d0:	60b4      	str	r4, [r6, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051d2:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80051d4:	f7fd fa1c 	bl	8002610 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051d8:	a904      	add	r1, sp, #16
 80051da:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051dc:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051de:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051e0:	f7fd fa30 	bl	8002644 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim6);
 80051e4:	4628      	mov	r0, r5
 80051e6:	f7fd f907 	bl	80023f8 <HAL_TIM_Base_Start_IT>
  controller_init();
 80051ea:	f7ff fc97 	bl	8004b1c <controller_init>
  osKernelStart();
 80051ee:	f7fe f8bb 	bl	8003368 <osKernelStart>
 80051f2:	e7fe      	b.n	80051f2 <main+0x1aa>
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40010800 	.word	0x40010800
 80051fc:	40011000 	.word	0x40011000
 8005200:	40010c00 	.word	0x40010c00
 8005204:	200054bc 	.word	0x200054bc
 8005208:	40012400 	.word	0x40012400
 800520c:	40001000 	.word	0x40001000
 8005210:	2000552c 	.word	0x2000552c
 8005214:	200054ec 	.word	0x200054ec
 8005218:	40013800 	.word	0x40013800
 800521c:	2000556c 	.word	0x2000556c
 8005220:	40001400 	.word	0x40001400

08005224 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8005224:	b510      	push	{r4, lr}
 8005226:	4604      	mov	r4, r0

	adcRawData = HAL_ADC_GetValue(hadc1);
 8005228:	f7fc f8de 	bl	80013e8 <HAL_ADC_GetValue>
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_ADC_ConvCpltCallback+0x18>)
 800522e:	8018      	strh	r0, [r3, #0]
	HAL_ADC_Stop_IT(hadc1);
 8005230:	4620      	mov	r0, r4

}
 8005232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Stop_IT(hadc1);
 8005236:	f7fc bb15 	b.w	8001864 <HAL_ADC_Stop_IT>
 800523a:	bf00      	nop
 800523c:	20005334 	.word	0x20005334

08005240 <__critical_enter>:

void __critical_enter(void){
	portENTER_CRITICAL();
 8005240:	f7fe b930 	b.w	80034a4 <vPortEnterCritical>

08005244 <__critical_exit>:
}
void __critical_exit(void){
	portEXIT_CRITICAL();
 8005244:	f7fe b950 	b.w	80034e8 <vPortExitCritical>

08005248 <xModbusPollTask>:
#define REG_COILS_SIZE      16

/* ----------------------- Static variables ---------------------------------*/
static unsigned char ucRegCoilsBuf[REG_COILS_SIZE / 8];

void xModbusPollTask(void *arguments){
 8005248:	b508      	push	{r3, lr}
	for(;;){
		( void )eMBPoll(  );
 800524a:	f7fd fdd9 	bl	8002e00 <eMBPoll>
		vTaskDelay(50);
 800524e:	2032      	movs	r0, #50	; 0x32
 8005250:	f7ff f8c2 	bl	80043d8 <vTaskDelay>
 8005254:	e7f9      	b.n	800524a <xModbusPollTask+0x2>
	...

08005258 <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int8_t         iRegIndex;

    if( ( usAddress == REG_STATE_START ) && ( usAddress + usNRegs <= REG_STATE_START + REG_STATE_NREGS))
 8005258:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
{
 800525c:	b570      	push	{r4, r5, r6, lr}
    if( ( usAddress == REG_STATE_START ) && ( usAddress + usNRegs <= REG_STATE_START + REG_STATE_NREGS))
 800525e:	d11b      	bne.n	8005298 <eMBRegInputCB+0x40>
 8005260:	2a04      	cmp	r2, #4
 8005262:	dc48      	bgt.n	80052f6 <eMBRegInputCB+0x9e>
    {
        iRegIndex = (int8_t)( usAddress - REG_STATE_START );
        controllerState.dataToSend[1] = controllerState.currentStep;
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <eMBRegInputCB+0xa4>)
        controllerState.dataToSend[2] = (uint16_t)controllerState.state;
        while( usNRegs > 0 )
 8005266:	4614      	mov	r4, r2
        controllerState.dataToSend[1] = controllerState.currentStep;
 8005268:	7ad9      	ldrb	r1, [r3, #11]
 800526a:	8219      	strh	r1, [r3, #16]
        controllerState.dataToSend[2] = (uint16_t)controllerState.state;
 800526c:	7a99      	ldrb	r1, [r3, #10]
 800526e:	8259      	strh	r1, [r3, #18]
 8005270:	4619      	mov	r1, r3
 8005272:	1b13      	subs	r3, r2, r4
 8005274:	b25b      	sxtb	r3, r3
 8005276:	3002      	adds	r0, #2
        while( usNRegs > 0 )
 8005278:	b90c      	cbnz	r4, 800527e <eMBRegInputCB+0x26>
    eMBErrorCode    eStatus = MB_ENOERR;
 800527a:	2000      	movs	r0, #0
 800527c:	bd70      	pop	{r4, r5, r6, pc}
        {
            *pucRegBuffer++ =
                ( unsigned char )( controllerState.dataToSend[iRegIndex] >> 8 );
 800527e:	3304      	adds	r3, #4
 8005280:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005284:	88dd      	ldrh	r5, [r3, #6]
            *pucRegBuffer++ =
                ( unsigned char )( controllerState.dataToSend[iRegIndex] & 0xFF );
            iRegIndex++;
            usNRegs--;
 8005286:	3c01      	subs	r4, #1
                ( unsigned char )( controllerState.dataToSend[iRegIndex] >> 8 );
 8005288:	0a2d      	lsrs	r5, r5, #8
 800528a:	f800 5c02 	strb.w	r5, [r0, #-2]
                ( unsigned char )( controllerState.dataToSend[iRegIndex] & 0xFF );
 800528e:	88db      	ldrh	r3, [r3, #6]
            usNRegs--;
 8005290:	b2a4      	uxth	r4, r4
                ( unsigned char )( controllerState.dataToSend[iRegIndex] & 0xFF );
 8005292:	f800 3c01 	strb.w	r3, [r0, #-1]
 8005296:	e7ec      	b.n	8005272 <eMBRegInputCB+0x1a>
//                ( unsigned char )( controllerState.dataToSend[iRegIndex] & 0xFF );
//            iRegIndex++;
//            usNRegs--;
//        }
    }
    else if( ( usAddress == REG_TEST_PROGRAM_START ) && ( usAddress + usNRegs <= REG_TEST_PROGRAM_START + REG_TEST_PROGRAM_NREGS ) )
 8005298:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 800529c:	d12b      	bne.n	80052f6 <eMBRegInputCB+0x9e>
 800529e:	2a10      	cmp	r2, #16
 80052a0:	dc29      	bgt.n	80052f6 <eMBRegInputCB+0x9e>
    {
        iRegIndex = ( int )( usAddress - REG_TEST_PROGRAM_START );
        usNRegs = usNRegs / 3;
 80052a2:	2303      	movs	r3, #3
 80052a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a8:	4611      	mov	r1, r2
        while( usNRegs > 0 )
        {
            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] >> 8 );
 80052aa:	4c15      	ldr	r4, [pc, #84]	; (8005300 <eMBRegInputCB+0xa8>)
 80052ac:	1a53      	subs	r3, r2, r1
 80052ae:	b25b      	sxtb	r3, r3
 80052b0:	3006      	adds	r0, #6
        while( usNRegs > 0 )
 80052b2:	2900      	cmp	r1, #0
 80052b4:	d0e1      	beq.n	800527a <eMBRegInputCB+0x22>
            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] >> 8 );
 80052b6:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] >> 8 );
            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] & 0xFF );
            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] >> 8 );
            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] & 0xFF );
            iRegIndex++;
            usNRegs--;
 80052ba:	3901      	subs	r1, #1
            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] >> 8 );
 80052bc:	0a2d      	lsrs	r5, r5, #8
 80052be:	f800 5c06 	strb.w	r5, [r0, #-6]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] & 0xFF );
 80052c2:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
            usNRegs--;
 80052c6:	b289      	uxth	r1, r1
            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] & 0xFF );
 80052c8:	f800 5c05 	strb.w	r5, [r0, #-5]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] >> 8 );
 80052cc:	1d1d      	adds	r5, r3, #4
 80052ce:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80052d2:	886e      	ldrh	r6, [r5, #2]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] >> 8 );
 80052d4:	3308      	adds	r3, #8
            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] >> 8 );
 80052d6:	0a36      	lsrs	r6, r6, #8
 80052d8:	f800 6c04 	strb.w	r6, [r0, #-4]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] & 0xFF );
 80052dc:	886d      	ldrh	r5, [r5, #2]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] >> 8 );
 80052de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] & 0xFF );
 80052e2:	f800 5c03 	strb.w	r5, [r0, #-3]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] >> 8 );
 80052e6:	889d      	ldrh	r5, [r3, #4]
 80052e8:	0a2d      	lsrs	r5, r5, #8
 80052ea:	f800 5c02 	strb.w	r5, [r0, #-2]
            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] & 0xFF );
 80052ee:	889b      	ldrh	r3, [r3, #4]
 80052f0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80052f4:	e7da      	b.n	80052ac <eMBRegInputCB+0x54>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80052f6:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	bf00      	nop
 80052fc:	2000533c 	.word	0x2000533c
 8005300:	20005354 	.word	0x20005354

08005304 <eMBRegHoldingCB>:
                 eMBRegisterMode eMode )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int8_t         iRegIndex;

    if( ( usAddress == REG_TEST_PROGRAM_START ) && ( usAddress + usNRegs <= REG_TEST_PROGRAM_START + REG_TEST_PROGRAM_NREGS ) )
 8005304:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
{
 8005308:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( usAddress == REG_TEST_PROGRAM_START ) && ( usAddress + usNRegs <= REG_TEST_PROGRAM_START + REG_TEST_PROGRAM_NREGS ) )
 800530a:	d153      	bne.n	80053b4 <eMBRegHoldingCB+0xb0>
 800530c:	2a10      	cmp	r2, #16
 800530e:	dc51      	bgt.n	80053b4 <eMBRegHoldingCB+0xb0>
    {
        iRegIndex = ( int )( usAddress - REG_TEST_PROGRAM_START );
        usNRegs = usNRegs / 3;
 8005310:	2103      	movs	r1, #3
 8005312:	fbb2 f2f1 	udiv	r2, r2, r1

        switch (eMode){
 8005316:	b32b      	cbz	r3, 8005364 <eMBRegHoldingCB+0x60>
 8005318:	2b01      	cmp	r3, #1
 800531a:	d129      	bne.n	8005370 <eMBRegHoldingCB+0x6c>
 800531c:	4611      	mov	r1, r2
		        break;
			}
			case MB_REG_WRITE:{
				while( usNRegs > 0 ){
					//testProgram.testPressure[iRegIndex] = (uint16_t) ((*pucRegBuffer) << 8) + (*(pucRegBuffer + 1));
					testProgram.testPressure[iRegIndex] = (uint16_t) ((*pucRegBuffer++) << 8);
 800531e:	4d26      	ldr	r5, [pc, #152]	; (80053b8 <eMBRegHoldingCB+0xb4>)
 8005320:	1a53      	subs	r3, r2, r1
 8005322:	b25b      	sxtb	r3, r3
 8005324:	3006      	adds	r0, #6
				while( usNRegs > 0 ){
 8005326:	b319      	cbz	r1, 8005370 <eMBRegHoldingCB+0x6c>
					testProgram.testPressure[iRegIndex] = (uint16_t) ((*pucRegBuffer++) << 8);
 8005328:	f810 4c06 	ldrb.w	r4, [r0, #-6]
					pucRegBuffer++;
					testProgram.testDiffPressure[iRegIndex] = (uint16_t) ((*pucRegBuffer) << 8) + (*(pucRegBuffer + 1));
					pucRegBuffer++;
					pucRegBuffer++;
		            iRegIndex++;
		            usNRegs--;
 800532c:	3901      	subs	r1, #1
					testProgram.testPressure[iRegIndex] = (uint16_t) ((*pucRegBuffer++) << 8);
 800532e:	0224      	lsls	r4, r4, #8
 8005330:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
					testProgram.testPressure[iRegIndex] += *pucRegBuffer++;
 8005334:	f810 6c05 	ldrb.w	r6, [r0, #-5]
		            usNRegs--;
 8005338:	b289      	uxth	r1, r1
					testProgram.testPressure[iRegIndex] += *pucRegBuffer++;
 800533a:	4434      	add	r4, r6
					testProgram.testTime[iRegIndex] = (uint16_t) ((*pucRegBuffer) << 8) + (*(pucRegBuffer + 1));
 800533c:	eb05 0643 	add.w	r6, r5, r3, lsl #1
					testProgram.testPressure[iRegIndex] += *pucRegBuffer++;
 8005340:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
					testProgram.testDiffPressure[iRegIndex] = (uint16_t) ((*pucRegBuffer) << 8) + (*(pucRegBuffer + 1));
 8005344:	4633      	mov	r3, r6
					testProgram.testTime[iRegIndex] = (uint16_t) ((*pucRegBuffer) << 8) + (*(pucRegBuffer + 1));
 8005346:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800534a:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 800534e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8005352:	8174      	strh	r4, [r6, #10]
					testProgram.testDiffPressure[iRegIndex] = (uint16_t) ((*pucRegBuffer) << 8) + (*(pucRegBuffer + 1));
 8005354:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8005358:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800535c:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8005360:	829c      	strh	r4, [r3, #20]
 8005362:	e7dd      	b.n	8005320 <eMBRegHoldingCB+0x1c>
        switch (eMode){
 8005364:	4611      	mov	r1, r2
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] >> 8 );
 8005366:	4c14      	ldr	r4, [pc, #80]	; (80053b8 <eMBRegHoldingCB+0xb4>)
 8005368:	1a53      	subs	r3, r2, r1
 800536a:	b25b      	sxtb	r3, r3
 800536c:	3006      	adds	r0, #6
		        while( usNRegs > 0 )
 800536e:	b909      	cbnz	r1, 8005374 <eMBRegHoldingCB+0x70>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005370:	2000      	movs	r0, #0
    }
    else{
    	eStatus = MB_ENOREG;
    }
    return eStatus;
}
 8005372:	bdf0      	pop	{r4, r5, r6, r7, pc}
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] >> 8 );
 8005374:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
		            usNRegs--;
 8005378:	3901      	subs	r1, #1
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] >> 8 );
 800537a:	0a2d      	lsrs	r5, r5, #8
 800537c:	f800 5c06 	strb.w	r5, [r0, #-6]
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] & 0xFF );
 8005380:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
		            usNRegs--;
 8005384:	b289      	uxth	r1, r1
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testPressure[iRegIndex] & 0xFF );
 8005386:	f800 5c05 	strb.w	r5, [r0, #-5]
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] >> 8 );
 800538a:	1d1d      	adds	r5, r3, #4
 800538c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8005390:	886e      	ldrh	r6, [r5, #2]
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] >> 8 );
 8005392:	3308      	adds	r3, #8
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] >> 8 );
 8005394:	0a36      	lsrs	r6, r6, #8
 8005396:	f800 6c04 	strb.w	r6, [r0, #-4]
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] & 0xFF );
 800539a:	886d      	ldrh	r5, [r5, #2]
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] >> 8 );
 800539c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testTime[iRegIndex] & 0xFF );
 80053a0:	f800 5c03 	strb.w	r5, [r0, #-3]
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] >> 8 );
 80053a4:	889d      	ldrh	r5, [r3, #4]
 80053a6:	0a2d      	lsrs	r5, r5, #8
 80053a8:	f800 5c02 	strb.w	r5, [r0, #-2]
		            *pucRegBuffer++ = ( unsigned char )( testProgram.testDiffPressure[iRegIndex] & 0xFF );
 80053ac:	889b      	ldrh	r3, [r3, #4]
 80053ae:	f800 3c01 	strb.w	r3, [r0, #-1]
 80053b2:	e7d9      	b.n	8005368 <eMBRegHoldingCB+0x64>
    	eStatus = MB_ENOREG;
 80053b4:	2001      	movs	r0, #1
 80053b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b8:	20005354 	.word	0x20005354

080053bc <eMBRegCoilsCB>:
    eMBErrorCode    eStatus = MB_ENOERR;
    short           iNCoils = ( short )usNCoils;
    unsigned short  usBitOffset;

    /* Check if we have registers mapped at this block. */
    if( ( usAddress >= REG_COILS_START ) &&
 80053bc:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
{
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ( usAddress >= REG_COILS_START ) &&
 80053c2:	d33e      	bcc.n	8005442 <eMBRegCoilsCB+0x86>
        ( usAddress + usNCoils <= REG_COILS_START + REG_COILS_SIZE ) )
 80053c4:	188c      	adds	r4, r1, r2
    if( ( usAddress >= REG_COILS_START ) &&
 80053c6:	f5b4 6ffc 	cmp.w	r4, #2016	; 0x7e0
 80053ca:	dc3a      	bgt.n	8005442 <eMBRegCoilsCB+0x86>
    {
        usBitOffset = ( unsigned short )( usAddress - REG_COILS_START );
 80053cc:	f5a1 61fa 	sub.w	r1, r1, #2000	; 0x7d0
    short           iNCoils = ( short )usNCoils;
 80053d0:	b214      	sxth	r4, r2
        usBitOffset = ( unsigned short )( usAddress - REG_COILS_START );
 80053d2:	b28d      	uxth	r5, r1
        switch ( eMode )
 80053d4:	b18b      	cbz	r3, 80053fa <eMBRegCoilsCB+0x3e>
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d113      	bne.n	8005402 <eMBRegCoilsCB+0x46>

                /* Update current register values. */
            case MB_REG_WRITE:
                while( iNCoils > 0 )
                {
                    xMBUtilSetBits( ucRegCoilsBuf, usBitOffset,
 80053da:	4f1b      	ldr	r7, [pc, #108]	; (8005448 <eMBRegCoilsCB+0x8c>)
 80053dc:	1e46      	subs	r6, r0, #1
                while( iNCoils > 0 )
 80053de:	2c00      	cmp	r4, #0
 80053e0:	dc21      	bgt.n	8005426 <eMBRegCoilsCB+0x6a>
                                    ( unsigned char )( iNCoils > 8 ? 8 : iNCoils ),
                                    *pucRegBuffer++ );
                    iNCoils -= 8;
                }

                if (ucRegCoilsBuf[0] & 0x01) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80053e2:	4b19      	ldr	r3, [pc, #100]	; (8005448 <eMBRegCoilsCB+0x8c>)
                else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80053e4:	2101      	movs	r1, #1
                if (ucRegCoilsBuf[0] & 0x01) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80053e6:	7818      	ldrb	r0, [r3, #0]
 80053e8:	f010 0401 	ands.w	r4, r0, #1
 80053ec:	bf14      	ite	ne
 80053ee:	2201      	movne	r2, #1
                else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80053f0:	4622      	moveq	r2, r4
 80053f2:	4816      	ldr	r0, [pc, #88]	; (800544c <eMBRegCoilsCB+0x90>)
 80053f4:	f7fc fc16 	bl	8001c24 <HAL_GPIO_WritePin>
 80053f8:	e003      	b.n	8005402 <eMBRegCoilsCB+0x46>
                        xMBUtilGetBits( ucRegCoilsBuf, usBitOffset,
 80053fa:	4f13      	ldr	r7, [pc, #76]	; (8005448 <eMBRegCoilsCB+0x8c>)
 80053fc:	1e46      	subs	r6, r0, #1
                while( iNCoils > 0 )
 80053fe:	2c00      	cmp	r4, #0
 8005400:	dc01      	bgt.n	8005406 <eMBRegCoilsCB+0x4a>
    eMBErrorCode    eStatus = MB_ENOERR;
 8005402:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
 8005404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        xMBUtilGetBits( ucRegCoilsBuf, usBitOffset,
 8005406:	2c08      	cmp	r4, #8
 8005408:	4622      	mov	r2, r4
 800540a:	bfa8      	it	ge
 800540c:	2208      	movge	r2, #8
 800540e:	4629      	mov	r1, r5
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	4638      	mov	r0, r7
 8005414:	f7fd fc70 	bl	8002cf8 <xMBUtilGetBits>
 8005418:	3c08      	subs	r4, #8
                    usBitOffset += 8;
 800541a:	3508      	adds	r5, #8
                    *pucRegBuffer++ =
 800541c:	f806 0f01 	strb.w	r0, [r6, #1]!
 8005420:	b224      	sxth	r4, r4
                    usBitOffset += 8;
 8005422:	b2ad      	uxth	r5, r5
 8005424:	e7eb      	b.n	80053fe <eMBRegCoilsCB+0x42>
                    xMBUtilSetBits( ucRegCoilsBuf, usBitOffset,
 8005426:	2c08      	cmp	r4, #8
 8005428:	4622      	mov	r2, r4
 800542a:	bfa8      	it	ge
 800542c:	2208      	movge	r2, #8
 800542e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	4629      	mov	r1, r5
 8005436:	4638      	mov	r0, r7
 8005438:	3c08      	subs	r4, #8
 800543a:	f7fd fc33 	bl	8002ca4 <xMBUtilSetBits>
 800543e:	b224      	sxth	r4, r4
 8005440:	e7cd      	b.n	80053de <eMBRegCoilsCB+0x22>
        eStatus = MB_ENOREG;
 8005442:	2001      	movs	r0, #1
 8005444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005446:	bf00      	nop
 8005448:	20005336 	.word	0x20005336
 800544c:	40011000 	.word	0x40011000

08005450 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
 8005450:	2001      	movs	r0, #1
 8005452:	4770      	bx	lr

08005454 <scanBtnsTask>:

#include "utils.h"

#include "aligningTask.h"

void scanBtnsTask(void *arguments){
 8005454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t prevBtn1State = 0;
 8005458:	2600      	movs	r6, #0
	uint8_t prevBtn2State = 0;
	uint8_t i = 0;
	for(;;){
		if(HAL_GPIO_ReadPin(BTN_UP_PORT, BTN_UP_PIN))
 800545a:	4d35      	ldr	r5, [pc, #212]	; (8005530 <scanBtnsTask+0xdc>)
			VALVE_UP_ON;
		else{
			if (controllerState.valveIsOpen != 1){
 800545c:	4c35      	ldr	r4, [pc, #212]	; (8005534 <scanBtnsTask+0xe0>)
				VALVE_UP_OFF;
 800545e:	4f36      	ldr	r7, [pc, #216]	; (8005538 <scanBtnsTask+0xe4>)
		if(HAL_GPIO_ReadPin(BTN_UP_PORT, BTN_UP_PIN))
 8005460:	2101      	movs	r1, #1
 8005462:	4628      	mov	r0, r5
 8005464:	f7fc fbd8 	bl	8001c18 <HAL_GPIO_ReadPin>
 8005468:	4602      	mov	r2, r0
 800546a:	b128      	cbz	r0, 8005478 <scanBtnsTask+0x24>
			VALVE_UP_ON;
 800546c:	2201      	movs	r2, #1
				VALVE_UP_OFF;
 800546e:	2102      	movs	r1, #2
 8005470:	4638      	mov	r0, r7
 8005472:	f7fc fbd7 	bl	8001c24 <HAL_GPIO_WritePin>
 8005476:	e003      	b.n	8005480 <scanBtnsTask+0x2c>
			if (controllerState.valveIsOpen != 1){
 8005478:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d1f6      	bne.n	800546e <scanBtnsTask+0x1a>
			}
		}

		if(HAL_GPIO_ReadPin(BTN_DOWN_PORT, BTN_DOWN_PIN))
 8005480:	2104      	movs	r1, #4
 8005482:	4628      	mov	r0, r5
 8005484:	f7fc fbc8 	bl	8001c18 <HAL_GPIO_ReadPin>
 8005488:	4602      	mov	r2, r0
 800548a:	b128      	cbz	r0, 8005498 <scanBtnsTask+0x44>
			VALVE_DOWN_ON;
 800548c:	2201      	movs	r2, #1
		else{
			if (controllerState.valveIsOpen != -1){
				VALVE_DOWN_OFF;
 800548e:	2104      	movs	r1, #4
 8005490:	4638      	mov	r0, r7
 8005492:	f7fc fbc7 	bl	8001c24 <HAL_GPIO_WritePin>
 8005496:	e003      	b.n	80054a0 <scanBtnsTask+0x4c>
			if (controllerState.valveIsOpen != -1){
 8005498:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800549c:	3301      	adds	r3, #1
 800549e:	d1f6      	bne.n	800548e <scanBtnsTask+0x3a>
			}
		}

		if(HAL_GPIO_ReadPin(BTN_1_PORT, BTN_1_PIN) != prevBtn1State){
 80054a0:	2102      	movs	r1, #2
 80054a2:	4628      	mov	r0, r5
 80054a4:	f7fc fbb8 	bl	8001c18 <HAL_GPIO_ReadPin>
 80054a8:	4286      	cmp	r6, r0
 80054aa:	d033      	beq.n	8005514 <scanBtnsTask+0xc0>
			vTaskDelay(2);
 80054ac:	2002      	movs	r0, #2
 80054ae:	f7fe ff93 	bl	80043d8 <vTaskDelay>
			if(HAL_GPIO_ReadPin(BTN_1_PORT, BTN_1_PIN) != prevBtn1State){
 80054b2:	2102      	movs	r1, #2
 80054b4:	4628      	mov	r0, r5
 80054b6:	f7fc fbaf 	bl	8001c18 <HAL_GPIO_ReadPin>
 80054ba:	4286      	cmp	r6, r0
 80054bc:	d02a      	beq.n	8005514 <scanBtnsTask+0xc0>
				prevBtn1State = HAL_GPIO_ReadPin(BTN_1_PORT, BTN_1_PIN);
 80054be:	2102      	movs	r1, #2
 80054c0:	4628      	mov	r0, r5
 80054c2:	f7fc fba9 	bl	8001c18 <HAL_GPIO_ReadPin>

				if (prevBtn1State){
 80054c6:	4606      	mov	r6, r0
 80054c8:	b320      	cbz	r0, 8005514 <scanBtnsTask+0xc0>
					switch(controllerState.state){
 80054ca:	7aa3      	ldrb	r3, [r4, #10]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d821      	bhi.n	8005514 <scanBtnsTask+0xc0>
 80054d0:	e8df f003 	tbb	[pc, r3]
 80054d4:	27272703 	.word	0x27272703
 80054d8:	27          	.byte	0x27
 80054d9:	00          	.byte	0x00
						case IDLE:{
							if (controllerState.sensorData == 0){
 80054da:	8863      	ldrh	r3, [r4, #2]
 80054dc:	b913      	cbnz	r3, 80054e4 <scanBtnsTask+0x90>
								//create aligning task
								xTaskCreate(xAligningTask, "aligning", 400, NULL, 1, NULL);
							}
							else{
								all_led_off();
								controllerState.state = TEST_ERROR;
 80054de:	2302      	movs	r3, #2
 80054e0:	72a3      	strb	r3, [r4, #10]
 80054e2:	e017      	b.n	8005514 <scanBtnsTask+0xc0>
							controllerState.currentStep = 0;
 80054e4:	f04f 0800 	mov.w	r8, #0
							controllerState.currentStep = calculate_test_params(controllerState.currentStep);
 80054e8:	4640      	mov	r0, r8
							controllerState.currentStep = 0;
 80054ea:	f884 800b 	strb.w	r8, [r4, #11]
							controllerState.currentStep = calculate_test_params(controllerState.currentStep);
 80054ee:	f000 fb55 	bl	8005b9c <calculate_test_params>
 80054f2:	72e0      	strb	r0, [r4, #11]
							if (controllerState.currentStep > 0){
 80054f4:	b190      	cbz	r0, 800551c <scanBtnsTask+0xc8>
								all_led_off();
 80054f6:	f000 faaf 	bl	8005a58 <all_led_off>
								controllerState.state = TESTING;
 80054fa:	2303      	movs	r3, #3
 80054fc:	72a3      	strb	r3, [r4, #10]
								xTaskCreate(xAligningTask, "aligning", 400, NULL, 1, NULL);
 80054fe:	2301      	movs	r3, #1
 8005500:	f8cd 8004 	str.w	r8, [sp, #4]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800550a:	4643      	mov	r3, r8
 800550c:	490b      	ldr	r1, [pc, #44]	; (800553c <scanBtnsTask+0xe8>)
 800550e:	480c      	ldr	r0, [pc, #48]	; (8005540 <scanBtnsTask+0xec>)
 8005510:	f7fe fd7d 	bl	800400e <xTaskCreate>
					}
				}
			}

		}
		vTaskDelay(5);
 8005514:	2005      	movs	r0, #5
 8005516:	f7fe ff5f 	bl	80043d8 <vTaskDelay>
		if(HAL_GPIO_ReadPin(BTN_UP_PORT, BTN_UP_PIN))
 800551a:	e7a1      	b.n	8005460 <scanBtnsTask+0xc>
								all_led_off();
 800551c:	f000 fa9c 	bl	8005a58 <all_led_off>
 8005520:	e7dd      	b.n	80054de <scanBtnsTask+0x8a>
							all_led_off();
 8005522:	f000 fa99 	bl	8005a58 <all_led_off>
							controllerState.state = IDLE;
 8005526:	2300      	movs	r3, #0
 8005528:	72a3      	strb	r3, [r4, #10]
							controllerState.currentStep = 0;
 800552a:	72e3      	strb	r3, [r4, #11]
							break;
 800552c:	e7f2      	b.n	8005514 <scanBtnsTask+0xc0>
 800552e:	bf00      	nop
 8005530:	40011000 	.word	0x40011000
 8005534:	2000533c 	.word	0x2000533c
 8005538:	40010800 	.word	0x40010800
 800553c:	08006f04 	.word	0x08006f04
 8005540:	08004819 	.word	0x08004819

08005544 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005544:	4b11      	ldr	r3, [pc, #68]	; (800558c <HAL_MspInit+0x48>)
{
 8005546:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005548:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800554a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	619a      	str	r2, [r3, #24]
 8005552:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005554:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005558:	f002 0201 	and.w	r2, r2, #1
 800555c:	9200      	str	r2, [sp, #0]
 800555e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005566:	61da      	str	r2, [r3, #28]
 8005568:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800556a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005574:	f7fc f9a8 	bl	80018c8 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005578:	4a05      	ldr	r2, [pc, #20]	; (8005590 <HAL_MspInit+0x4c>)
 800557a:	6853      	ldr	r3, [r2, #4]
 800557c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005586:	b003      	add	sp, #12
 8005588:	f85d fb04 	ldr.w	pc, [sp], #4
 800558c:	40021000 	.word	0x40021000
 8005590:	40010000 	.word	0x40010000

08005594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005594:	b510      	push	{r4, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559a:	2210      	movs	r2, #16
 800559c:	2100      	movs	r1, #0
 800559e:	a802      	add	r0, sp, #8
 80055a0:	f000 fb8d 	bl	8005cbe <memset>
  if(hadc->Instance==ADC1)
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <HAL_ADC_MspInit+0x64>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d123      	bne.n	80055f4 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055ac:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80055b0:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b2:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b8:	619a      	str	r2, [r3, #24]
 80055ba:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055bc:	480f      	ldr	r0, [pc, #60]	; (80055fc <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055be:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80055c2:	9200      	str	r2, [sp, #0]
 80055c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	f042 0204 	orr.w	r2, r2, #4
 80055cc:	619a      	str	r2, [r3, #24]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80055d8:	2301      	movs	r3, #1
 80055da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055dc:	2303      	movs	r3, #3
 80055de:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e0:	f7fc fa38 	bl	8001a54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80055e4:	2012      	movs	r0, #18
 80055e6:	2200      	movs	r2, #0
 80055e8:	2105      	movs	r1, #5
 80055ea:	f7fc f96d 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80055ee:	2012      	movs	r0, #18
 80055f0:	f7fc f99e 	bl	8001930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80055f4:	b006      	add	sp, #24
 80055f6:	bd10      	pop	{r4, pc}
 80055f8:	40012400 	.word	0x40012400
 80055fc:	40010800 	.word	0x40010800

08005600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005600:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 8005602:	6803      	ldr	r3, [r0, #0]
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <HAL_TIM_Base_MspInit+0x5c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d114      	bne.n	8005634 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800560a:	4b15      	ldr	r3, [pc, #84]	; (8005660 <HAL_TIM_Base_MspInit+0x60>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800560c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800560e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8005610:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005612:	f042 0210 	orr.w	r2, r2, #16
 8005616:	61da      	str	r2, [r3, #28]
 8005618:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800561a:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8005624:	f7fc f950 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005628:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800562a:	f7fc f981 	bl	8001930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800562e:	b003      	add	sp, #12
 8005630:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8005634:	4a0b      	ldr	r2, [pc, #44]	; (8005664 <HAL_TIM_Base_MspInit+0x64>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d1f9      	bne.n	800562e <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800563c:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 800563e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005640:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005642:	f042 0220 	orr.w	r2, r2, #32
 8005646:	61da      	str	r2, [r3, #28]
 8005648:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800564a:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005654:	f7fc f938 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005658:	2037      	movs	r0, #55	; 0x37
 800565a:	e7e6      	b.n	800562a <HAL_TIM_Base_MspInit+0x2a>
 800565c:	40001000 	.word	0x40001000
 8005660:	40021000 	.word	0x40021000
 8005664:	40001400 	.word	0x40001400

08005668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005668:	b510      	push	{r4, lr}
 800566a:	4604      	mov	r4, r0
 800566c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800566e:	2210      	movs	r2, #16
 8005670:	2100      	movs	r1, #0
 8005672:	a802      	add	r0, sp, #8
 8005674:	f000 fb23 	bl	8005cbe <memset>
  if(huart->Instance==USART1)
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <HAL_UART_MspInit+0x80>)
 800567c:	429a      	cmp	r2, r3
 800567e:	d130      	bne.n	80056e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005680:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005684:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005686:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8005688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568c:	619a      	str	r2, [r3, #24]
 800568e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005690:	4816      	ldr	r0, [pc, #88]	; (80056ec <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005692:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005696:	9200      	str	r2, [sp, #0]
 8005698:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800569a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800569c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800569e:	f042 0204 	orr.w	r2, r2, #4
 80056a2:	619a      	str	r2, [r3, #24]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b4:	2302      	movs	r3, #2
 80056b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056b8:	2303      	movs	r3, #3
 80056ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056bc:	f7fc f9ca 	bl	8001a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c4:	a902      	add	r1, sp, #8
 80056c6:	4809      	ldr	r0, [pc, #36]	; (80056ec <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056cc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ce:	f7fc f9c1 	bl	8001a54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80056d2:	2025      	movs	r0, #37	; 0x25
 80056d4:	4622      	mov	r2, r4
 80056d6:	2105      	movs	r1, #5
 80056d8:	f7fc f8f6 	bl	80018c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056dc:	2025      	movs	r0, #37	; 0x25
 80056de:	f7fc f927 	bl	8001930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80056e2:	b006      	add	sp, #24
 80056e4:	bd10      	pop	{r4, pc}
 80056e6:	bf00      	nop
 80056e8:	40013800 	.word	0x40013800
 80056ec:	40010800 	.word	0x40010800

080056f0 <draw_digit>:
uint8_t debugCurDigit = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void draw_digit(uint8_t digit){
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4605      	mov	r5, r0
	if (digitSegments[digit] & (1 << 0)) 	IND_A_ON;
 80056f4:	4c23      	ldr	r4, [pc, #140]	; (8005784 <draw_digit+0x94>)
	else				  					IND_A_OFF;
 80056f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	if (digitSegments[digit] & (1 << 0)) 	IND_A_ON;
 80056fa:	5c22      	ldrb	r2, [r4, r0]
	else				  					IND_A_OFF;
 80056fc:	4822      	ldr	r0, [pc, #136]	; (8005788 <draw_digit+0x98>)
	if (digitSegments[digit] & (1 << 0)) 	IND_A_ON;
 80056fe:	f012 0201 	ands.w	r2, r2, #1
 8005702:	bf18      	it	ne
 8005704:	2201      	movne	r2, #1
	else				  					IND_A_OFF;
 8005706:	f7fc fa8d 	bl	8001c24 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 1)) 	IND_B_ON;
 800570a:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_B_OFF;
 800570c:	f44f 6180 	mov.w	r1, #1024	; 0x400
	if (digitSegments[digit] & (1 << 1)) 	IND_B_ON;
 8005710:	f012 0202 	ands.w	r2, r2, #2
 8005714:	bf18      	it	ne
 8005716:	2201      	movne	r2, #1
	else				  					IND_B_OFF;
 8005718:	481c      	ldr	r0, [pc, #112]	; (800578c <draw_digit+0x9c>)
 800571a:	f7fc fa83 	bl	8001c24 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 2)) 	IND_C_ON;
 800571e:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_C_OFF;
 8005720:	2108      	movs	r1, #8
	if (digitSegments[digit] & (1 << 2)) 	IND_C_ON;
 8005722:	f012 0204 	ands.w	r2, r2, #4
 8005726:	bf18      	it	ne
 8005728:	2201      	movne	r2, #1
	else				  					IND_C_OFF;
 800572a:	4819      	ldr	r0, [pc, #100]	; (8005790 <draw_digit+0xa0>)
 800572c:	f7fc fa7a 	bl	8001c24 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 3)) 	IND_D_ON;
 8005730:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_D_OFF;
 8005732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	if (digitSegments[digit] & (1 << 3)) 	IND_D_ON;
 8005736:	f012 0208 	ands.w	r2, r2, #8
 800573a:	bf18      	it	ne
 800573c:	2201      	movne	r2, #1
	else				  					IND_D_OFF;
 800573e:	4813      	ldr	r0, [pc, #76]	; (800578c <draw_digit+0x9c>)
 8005740:	f7fc fa70 	bl	8001c24 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 4)) 	IND_E_ON;
 8005744:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_E_OFF;
 8005746:	f44f 6100 	mov.w	r1, #2048	; 0x800
	if (digitSegments[digit] & (1 << 4)) 	IND_E_ON;
 800574a:	f012 0210 	ands.w	r2, r2, #16
 800574e:	bf18      	it	ne
 8005750:	2201      	movne	r2, #1
	else				  					IND_E_OFF;
 8005752:	480e      	ldr	r0, [pc, #56]	; (800578c <draw_digit+0x9c>)
 8005754:	f7fc fa66 	bl	8001c24 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 5)) 	IND_F_ON;
 8005758:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_F_OFF;
 800575a:	f44f 7180 	mov.w	r1, #256	; 0x100
	if (digitSegments[digit] & (1 << 5)) 	IND_F_ON;
 800575e:	f012 0220 	ands.w	r2, r2, #32
 8005762:	bf18      	it	ne
 8005764:	2201      	movne	r2, #1
	else				  					IND_F_OFF;
 8005766:	4808      	ldr	r0, [pc, #32]	; (8005788 <draw_digit+0x98>)
 8005768:	f7fc fa5c 	bl	8001c24 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 6)) 	IND_G_ON;
 800576c:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_G_OFF;
 800576e:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 8005772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (digitSegments[digit] & (1 << 6)) 	IND_G_ON;
 8005776:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800577a:	bf18      	it	ne
 800577c:	2201      	movne	r2, #1
	else				  					IND_G_OFF;
 800577e:	4803      	ldr	r0, [pc, #12]	; (800578c <draw_digit+0x9c>)
 8005780:	f7fc ba50 	b.w	8001c24 <HAL_GPIO_WritePin>
 8005784:	20000092 	.word	0x20000092
 8005788:	40010800 	.word	0x40010800
 800578c:	40011000 	.word	0x40011000
 8005790:	40010c00 	.word	0x40010c00

08005794 <NMI_Handler>:
 8005794:	4770      	bx	lr

08005796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005796:	e7fe      	b.n	8005796 <HardFault_Handler>

08005798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005798:	e7fe      	b.n	8005798 <MemManage_Handler>

0800579a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800579a:	e7fe      	b.n	800579a <BusFault_Handler>

0800579c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800579c:	e7fe      	b.n	800579c <UsageFault_Handler>

0800579e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800579e:	4770      	bx	lr

080057a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057a2:	f7fb fe0f 	bl	80013c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80057a6:	f7fe ff1f 	bl	80045e8 <xTaskGetSchedulerState>
 80057aa:	2801      	cmp	r0, #1
 80057ac:	d003      	beq.n	80057b6 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80057b2:	f7fd becf 	b.w	8003554 <xPortSysTickHandler>
 80057b6:	bd08      	pop	{r3, pc}

080057b8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <ADC1_2_IRQHandler+0x8>)
 80057ba:	f7fb be19 	b.w	80013f0 <HAL_ADC_IRQHandler>
 80057be:	bf00      	nop
 80057c0:	200054bc 	.word	0x200054bc

080057c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80057c4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t isrflags   = READ_REG(huart1.Instance->SR);
 80057c6:	4c17      	ldr	r4, [pc, #92]	; (8005824 <USART1_IRQHandler+0x60>)
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	681e      	ldr	r6, [r3, #0]
	uint32_t cr1its     = READ_REG(huart1.Instance->CR1);
 80057cc:	68dd      	ldr	r5, [r3, #12]
	//uint32_t cr3its     = READ_REG(huart1.Instance->CR3);

	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ce:	06b2      	lsls	r2, r6, #26
 80057d0:	d503      	bpl.n	80057da <USART1_IRQHandler+0x16>
 80057d2:	06ab      	lsls	r3, r5, #26
 80057d4:	d501      	bpl.n	80057da <USART1_IRQHandler+0x16>
	{
		prvvUARTRxISR();
 80057d6:	f7fd fbf5 	bl	8002fc4 <prvvUARTRxISR>
	}

	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057da:	0630      	lsls	r0, r6, #24
 80057dc:	d50f      	bpl.n	80057fe <USART1_IRQHandler+0x3a>
 80057de:	0629      	lsls	r1, r5, #24
 80057e0:	d50d      	bpl.n	80057fe <USART1_IRQHandler+0x3a>
	{
		prvvUARTTxReadyISR();
 80057e2:	f7fd fbe9 	bl	8002fb8 <prvvUARTTxReadyISR>
		if (counter_mb_ext == 0){
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <USART1_IRQHandler+0x64>)
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b943      	cbnz	r3, 80057fe <USART1_IRQHandler+0x3a>
			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f4:	60da      	str	r2, [r3, #12]
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057fc:	60da      	str	r2, [r3, #12]
		}
	}
	    /* UART in mode Transmitter end --------------------------------------------*/
	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057fe:	0672      	lsls	r2, r6, #25
 8005800:	d50b      	bpl.n	800581a <USART1_IRQHandler+0x56>
 8005802:	066b      	lsls	r3, r5, #25
 8005804:	d509      	bpl.n	800581a <USART1_IRQHandler+0x56>
	{
        __HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580e:	60da      	str	r2, [r3, #12]
		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_TC);
 8005810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005814:	601a      	str	r2, [r3, #0]
		prvvUARTTxReadyISR();
 8005816:	f7fd fbcf 	bl	8002fb8 <prvvUARTTxReadyISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800581a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_IRQHandler(&huart1);
 800581e:	4801      	ldr	r0, [pc, #4]	; (8005824 <USART1_IRQHandler+0x60>)
 8005820:	f7fc bfe8 	b.w	80027f4 <HAL_UART_IRQHandler>
 8005824:	200054ec 	.word	0x200054ec
 8005828:	20000090 	.word	0x20000090

0800582c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800582c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800582e:	4818      	ldr	r0, [pc, #96]	; (8005890 <TIM6_IRQHandler+0x64>)
 8005830:	f7fc fe0b 	bl	800244a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  if (debugCurDigit == 0){
 8005834:	4b17      	ldr	r3, [pc, #92]	; (8005894 <TIM6_IRQHandler+0x68>)
 8005836:	4d18      	ldr	r5, [pc, #96]	; (8005898 <TIM6_IRQHandler+0x6c>)
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	b9ba      	cbnz	r2, 800586c <TIM6_IRQHandler+0x40>
	  debugCurDigit = 1;
 800583c:	2401      	movs	r4, #1
	  IND_DIG_2_OFF;
 800583e:	2140      	movs	r1, #64	; 0x40
 8005840:	4816      	ldr	r0, [pc, #88]	; (800589c <TIM6_IRQHandler+0x70>)
	  debugCurDigit = 1;
 8005842:	701c      	strb	r4, [r3, #0]
	  IND_DIG_2_OFF;
 8005844:	f7fc f9ee 	bl	8001c24 <HAL_GPIO_WritePin>
	  draw_digit(symbolsToShow[0]);
 8005848:	7828      	ldrb	r0, [r5, #0]
 800584a:	f7ff ff51 	bl	80056f0 <draw_digit>

	  if (symbolsToShow[0] < 10) IND_DP_ON;
 800584e:	782b      	ldrb	r3, [r5, #0]
 8005850:	2b09      	cmp	r3, #9
 8005852:	d804      	bhi.n	800585e <TIM6_IRQHandler+0x32>
 8005854:	4622      	mov	r2, r4
 8005856:	2110      	movs	r1, #16
 8005858:	4810      	ldr	r0, [pc, #64]	; (800589c <TIM6_IRQHandler+0x70>)
 800585a:	f7fc f9e3 	bl	8001c24 <HAL_GPIO_WritePin>

	  IND_DIG_1_ON;
 800585e:	2201      	movs	r2, #1
 8005860:	2120      	movs	r1, #32
	  draw_digit(symbolsToShow[1]);
	  IND_DP_OFF;
	  IND_DIG_2_ON;
  }
  /* USER CODE END TIM6_IRQn 1 */
}
 8005862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  IND_DIG_2_ON;
 8005866:	480d      	ldr	r0, [pc, #52]	; (800589c <TIM6_IRQHandler+0x70>)
 8005868:	f7fc b9dc 	b.w	8001c24 <HAL_GPIO_WritePin>
	  debugCurDigit = 0;
 800586c:	2400      	movs	r4, #0
	  IND_DIG_1_OFF;
 800586e:	2120      	movs	r1, #32
 8005870:	4622      	mov	r2, r4
 8005872:	480a      	ldr	r0, [pc, #40]	; (800589c <TIM6_IRQHandler+0x70>)
	  debugCurDigit = 0;
 8005874:	701c      	strb	r4, [r3, #0]
	  IND_DIG_1_OFF;
 8005876:	f7fc f9d5 	bl	8001c24 <HAL_GPIO_WritePin>
	  draw_digit(symbolsToShow[1]);
 800587a:	7868      	ldrb	r0, [r5, #1]
 800587c:	f7ff ff38 	bl	80056f0 <draw_digit>
	  IND_DP_OFF;
 8005880:	4622      	mov	r2, r4
 8005882:	2110      	movs	r1, #16
 8005884:	4805      	ldr	r0, [pc, #20]	; (800589c <TIM6_IRQHandler+0x70>)
 8005886:	f7fc f9cd 	bl	8001c24 <HAL_GPIO_WritePin>
	  IND_DIG_2_ON;
 800588a:	2201      	movs	r2, #1
 800588c:	2140      	movs	r1, #64	; 0x40
 800588e:	e7e8      	b.n	8005862 <TIM6_IRQHandler+0x36>
 8005890:	2000552c 	.word	0x2000552c
 8005894:	20005338 	.word	0x20005338
 8005898:	20005339 	.word	0x20005339
 800589c:	40010c00 	.word	0x40010c00

080058a0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <TIM7_IRQHandler+0x8>)
 80058a2:	f7fc bdd2 	b.w	800244a <HAL_TIM_IRQHandler>
 80058a6:	bf00      	nop
 80058a8:	2000556c 	.word	0x2000556c

080058ac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80058ac:	2001      	movs	r0, #1
 80058ae:	4770      	bx	lr

080058b0 <_kill>:

int _kill(int pid, int sig)
{
 80058b0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80058b2:	f000 f9e1 	bl	8005c78 <__errno>
 80058b6:	2316      	movs	r3, #22
 80058b8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80058ba:	f04f 30ff 	mov.w	r0, #4294967295
 80058be:	bd08      	pop	{r3, pc}

080058c0 <_exit>:

void _exit (int status)
{
 80058c0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80058c2:	f000 f9d9 	bl	8005c78 <__errno>
 80058c6:	2316      	movs	r3, #22
 80058c8:	6003      	str	r3, [r0, #0]
 80058ca:	e7fe      	b.n	80058ca <_exit+0xa>

080058cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	460e      	mov	r6, r1
 80058d0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058d2:	460c      	mov	r4, r1
 80058d4:	1ba3      	subs	r3, r4, r6
 80058d6:	429d      	cmp	r5, r3
 80058d8:	dc01      	bgt.n	80058de <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80058da:	4628      	mov	r0, r5
 80058dc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80058de:	f3af 8000 	nop.w
 80058e2:	f804 0b01 	strb.w	r0, [r4], #1
 80058e6:	e7f5      	b.n	80058d4 <_read+0x8>

080058e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	460e      	mov	r6, r1
 80058ec:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ee:	460c      	mov	r4, r1
 80058f0:	1ba3      	subs	r3, r4, r6
 80058f2:	429d      	cmp	r5, r3
 80058f4:	dc01      	bgt.n	80058fa <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80058f6:	4628      	mov	r0, r5
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80058fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80058fe:	f3af 8000 	nop.w
 8005902:	e7f5      	b.n	80058f0 <_write+0x8>

08005904 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8005904:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005906:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <_sbrk+0x2c>)
{
 8005908:	4602      	mov	r2, r0
	if (heap_end == 0)
 800590a:	6819      	ldr	r1, [r3, #0]
 800590c:	b909      	cbnz	r1, 8005912 <_sbrk+0xe>
		heap_end = &end;
 800590e:	4909      	ldr	r1, [pc, #36]	; (8005934 <_sbrk+0x30>)
 8005910:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005912:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005914:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005916:	4402      	add	r2, r0
 8005918:	428a      	cmp	r2, r1
 800591a:	d906      	bls.n	800592a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800591c:	f000 f9ac 	bl	8005c78 <__errno>
 8005920:	230c      	movs	r3, #12
 8005922:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800592a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800592c:	bd08      	pop	{r3, pc}
 800592e:	bf00      	nop
 8005930:	20005390 	.word	0x20005390
 8005934:	200055b0 	.word	0x200055b0

08005938 <_close>:

int _close(int file)
{
	return -1;
}
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	4770      	bx	lr

0800593e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800593e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005942:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005944:	604b      	str	r3, [r1, #4]
}
 8005946:	4770      	bx	lr

08005948 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005948:	2001      	movs	r0, #1
 800594a:	4770      	bx	lr

0800594c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800594c:	2000      	movs	r0, #0
 800594e:	4770      	bx	lr

08005950 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005950:	4b12      	ldr	r3, [pc, #72]	; (800599c <SystemInit+0x4c>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <SystemInit+0x50>)
 800595e:	400a      	ands	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005968:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800596c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005974:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800597c:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8005984:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8005986:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800598a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 800598c:	2200      	movs	r2, #0
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005990:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <SystemInit+0x54>)
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000
 80059a0:	f0ff0000 	.word	0xf0ff0000
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <xTestingTask>:
#include "structures.h"

extern xSemaphoreHandle xNewPressureSemaphore;


void xTestingTask(void *arguments){
 80059a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	portBASE_TYPE xStatus;
	uint8_t badPressTicksCounter = 0;
	int16_t deltaPressure = 0;

	xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 80059ac:	4f25      	ldr	r7, [pc, #148]	; (8005a44 <xTestingTask+0x9c>)
 80059ae:	f04f 31ff 	mov.w	r1, #4294967295
 80059b2:	6838      	ldr	r0, [r7, #0]
 80059b4:	f7fe f8d2 	bl	8003b5c <xQueueSemaphoreTake>
	uint8_t badPressTicksCounter = 0;
 80059b8:	2400      	movs	r4, #0
					controllerState.state = STEP_ERROR;
					vTaskDelete(NULL);
				}
			}
			else{
				testingParams.timePassed += CHECKING_DELAY_MS;
 80059ba:	f64e 2860 	movw	r8, #60000	; 0xea60
 80059be:	f04f 0900 	mov.w	r9, #0
			deltaPressure = testingParams.testStartPressure - controllerState.sensorData;
 80059c2:	4d21      	ldr	r5, [pc, #132]	; (8005a48 <xTestingTask+0xa0>)
 80059c4:	4e21      	ldr	r6, [pc, #132]	; (8005a4c <xTestingTask+0xa4>)
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 80059c6:	f04f 31ff 	mov.w	r1, #4294967295
 80059ca:	6838      	ldr	r0, [r7, #0]
 80059cc:	f7fe f8c6 	bl	8003b5c <xQueueSemaphoreTake>
		if (xStatus == pdPASS){
 80059d0:	2801      	cmp	r0, #1
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 80059d2:	4682      	mov	sl, r0
		if (xStatus == pdPASS){
 80059d4:	d1f7      	bne.n	80059c6 <xTestingTask+0x1e>
			vTaskDelay(CHECKING_DELAY_MS);
 80059d6:	f64e 2060 	movw	r0, #60000	; 0xea60
 80059da:	f7fe fcfd 	bl	80043d8 <vTaskDelay>
			deltaPressure = testingParams.testStartPressure - controllerState.sensorData;
 80059de:	8872      	ldrh	r2, [r6, #2]
 80059e0:	896b      	ldrh	r3, [r5, #10]
 80059e2:	1a9b      	subs	r3, r3, r2
			if (deltaPressure > testingParams.testDiffPressure){
 80059e4:	892a      	ldrh	r2, [r5, #8]
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	4293      	cmp	r3, r2
 80059ea:	dd09      	ble.n	8005a00 <xTestingTask+0x58>
				badPressTicksCounter += 1;
 80059ec:	3401      	adds	r4, #1
 80059ee:	b2e4      	uxtb	r4, r4
				if (badPressTicksCounter > MAX_BAD_PRESSURE_TICKS){
 80059f0:	2c0a      	cmp	r4, #10
 80059f2:	d9e8      	bls.n	80059c6 <xTestingTask+0x1e>
					controllerState.state = STEP_ERROR;
 80059f4:	2304      	movs	r3, #4
 80059f6:	72b3      	strb	r3, [r6, #10]
					}
					else{
						controllerState.state = TEST_COMPLETE;
					}
					//delete curTask
					vTaskDelete(NULL);
 80059f8:	2000      	movs	r0, #0
 80059fa:	f7fe fb35 	bl	8004068 <vTaskDelete>
 80059fe:	e7e2      	b.n	80059c6 <xTestingTask+0x1e>
				if (testingParams.timePassed > testingParams.testTimeMS){
 8005a00:	2100      	movs	r1, #0
				testingParams.timePassed += CHECKING_DELAY_MS;
 8005a02:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8005a06:	eb12 0208 	adds.w	r2, r2, r8
 8005a0a:	eb43 0309 	adc.w	r3, r3, r9
				if (testingParams.timePassed > testingParams.testTimeMS){
 8005a0e:	6868      	ldr	r0, [r5, #4]
 8005a10:	4299      	cmp	r1, r3
 8005a12:	bf08      	it	eq
 8005a14:	4290      	cmpeq	r0, r2
				testingParams.timePassed += CHECKING_DELAY_MS;
 8005a16:	e9c5 2304 	strd	r2, r3, [r5, #16]
				if (testingParams.timePassed > testingParams.testTimeMS){
 8005a1a:	d2d4      	bcs.n	80059c6 <xTestingTask+0x1e>
					controllerState.currentStep = calculate_test_params(controllerState.currentStep);
 8005a1c:	7af0      	ldrb	r0, [r6, #11]
 8005a1e:	f000 f8bd 	bl	8005b9c <calculate_test_params>
 8005a22:	72f0      	strb	r0, [r6, #11]
					if (controllerState.currentStep > 0){
 8005a24:	b150      	cbz	r0, 8005a3c <xTestingTask+0x94>
						xTaskCreate(xAligningTask, "aligning", 400, NULL, 1, NULL);
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8cd a000 	str.w	sl, [sp]
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005a32:	4907      	ldr	r1, [pc, #28]	; (8005a50 <xTestingTask+0xa8>)
 8005a34:	4807      	ldr	r0, [pc, #28]	; (8005a54 <xTestingTask+0xac>)
 8005a36:	f7fe faea 	bl	800400e <xTaskCreate>
 8005a3a:	e7dd      	b.n	80059f8 <xTestingTask+0x50>
						controllerState.state = TEST_COMPLETE;
 8005a3c:	f886 a00a 	strb.w	sl, [r6, #10]
 8005a40:	e7da      	b.n	80059f8 <xTestingTask+0x50>
 8005a42:	bf00      	nop
 8005a44:	200054b4 	.word	0x200054b4
 8005a48:	20005378 	.word	0x20005378
 8005a4c:	2000533c 	.word	0x2000533c
 8005a50:	08006f04 	.word	0x08006f04
 8005a54:	08004819 	.word	0x08004819

08005a58 <all_led_off>:

#include "utils.h"
#include "globals.h"
#include "structures.h"

void all_led_off(void){
 8005a58:	b538      	push	{r3, r4, r5, lr}
	LED_STEP_1_OFF;
 8005a5a:	4c1c      	ldr	r4, [pc, #112]	; (8005acc <all_led_off+0x74>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	2110      	movs	r1, #16
 8005a62:	f7fc f8df 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_STEP_2_OFF;
 8005a66:	4620      	mov	r0, r4
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2120      	movs	r1, #32
 8005a6c:	f7fc f8da 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_STEP_3_OFF;
	LED_STEP_4_OFF;
	LED_STEP_5_OFF;
 8005a70:	4d17      	ldr	r5, [pc, #92]	; (8005ad0 <all_led_off+0x78>)
	LED_STEP_3_OFF;
 8005a72:	4620      	mov	r0, r4
 8005a74:	2200      	movs	r2, #0
 8005a76:	2140      	movs	r1, #64	; 0x40
 8005a78:	f7fc f8d4 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_STEP_4_OFF;
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2180      	movs	r1, #128	; 0x80
 8005a82:	f7fc f8cf 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_STEP_5_OFF;
 8005a86:	4628      	mov	r0, r5
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	f7fc f8ca 	bl	8001c24 <HAL_GPIO_WritePin>

	LED_ERR_1_OFF;
 8005a90:	4620      	mov	r0, r4
 8005a92:	2200      	movs	r2, #0
 8005a94:	2108      	movs	r1, #8
 8005a96:	f7fc f8c5 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_ERR_2_OFF;
	LED_ERR_3_OFF;
 8005a9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	LED_ERR_2_OFF;
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	f7fc f8be 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_ERR_3_OFF;
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2104      	movs	r1, #4
 8005aae:	f7fc f8b9 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_ERR_4_OFF;
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	f7fc f8b4 	bl	8001c24 <HAL_GPIO_WritePin>
	LED_ERR_5_OFF;
 8005abc:	4620      	mov	r0, r4
}
 8005abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LED_ERR_5_OFF;
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	f7fc b8ad 	b.w	8001c24 <HAL_GPIO_WritePin>
 8005aca:	bf00      	nop
 8005acc:	40010800 	.word	0x40010800
 8005ad0:	40011000 	.word	0x40011000

08005ad4 <adc_to_bar>:
		}
	}
	return legalStep;
}

float adc_to_bar(uint16_t val){
 8005ad4:	b510      	push	{r4, lr}
	float valInBar = 0;
	float k = 20.0 / (3350.0 - 313.0); //calc 373.0
	float b = 20 - k * 3350.0;

	valInBar = k * (float)val + b;
 8005ad6:	f7fb f853 	bl	8000b80 <__aeabi_ui2f>
 8005ada:	490e      	ldr	r1, [pc, #56]	; (8005b14 <adc_to_bar+0x40>)
 8005adc:	f7fb f8a8 	bl	8000c30 <__aeabi_fmul>
 8005ae0:	490d      	ldr	r1, [pc, #52]	; (8005b18 <adc_to_bar+0x44>)
 8005ae2:	f7fa ff9b 	bl	8000a1c <__aeabi_fsub>

	if (valInBar > 20.0) return 20.0;
 8005ae6:	490d      	ldr	r1, [pc, #52]	; (8005b1c <adc_to_bar+0x48>)
	valInBar = k * (float)val + b;
 8005ae8:	4604      	mov	r4, r0
	if (valInBar > 20.0) return 20.0;
 8005aea:	f7fb fa5d 	bl	8000fa8 <__aeabi_fcmpgt>
 8005aee:	b958      	cbnz	r0, 8005b08 <adc_to_bar+0x34>
	else if (valInBar < -1.0) return -1.0;
 8005af0:	490b      	ldr	r1, [pc, #44]	; (8005b20 <adc_to_bar+0x4c>)
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7fb fa3a 	bl	8000f6c <__aeabi_fcmplt>
 8005af8:	b948      	cbnz	r0, 8005b0e <adc_to_bar+0x3a>
	else if (valInBar < 0.0) return 0.0;
 8005afa:	2100      	movs	r1, #0
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7fb fa35 	bl	8000f6c <__aeabi_fcmplt>
 8005b02:	b110      	cbz	r0, 8005b0a <adc_to_bar+0x36>
 8005b04:	2400      	movs	r4, #0
 8005b06:	e000      	b.n	8005b0a <adc_to_bar+0x36>
	if (valInBar > 20.0) return 20.0;
 8005b08:	4c04      	ldr	r4, [pc, #16]	; (8005b1c <adc_to_bar+0x48>)
	else return valInBar;
}
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	bd10      	pop	{r4, pc}
	else if (valInBar < -1.0) return -1.0;
 8005b0e:	4c04      	ldr	r4, [pc, #16]	; (8005b20 <adc_to_bar+0x4c>)
 8005b10:	e7fb      	b.n	8005b0a <adc_to_bar+0x36>
 8005b12:	bf00      	nop
 8005b14:	3bd7caba 	.word	0x3bd7caba
 8005b18:	4003eb6f 	.word	0x4003eb6f
 8005b1c:	41a00000 	.word	0x41a00000
 8005b20:	bf800000 	.word	0xbf800000

08005b24 <bar_to_adc>:

uint16_t bar_to_adc(uint16_t bar){
 8005b24:	b508      	push	{r3, lr}
	float valInBar = (float)bar / 10.0;
 8005b26:	f7fb f82b 	bl	8000b80 <__aeabi_ui2f>
 8005b2a:	490b      	ldr	r1, [pc, #44]	; (8005b58 <bar_to_adc+0x34>)
 8005b2c:	f7fb f934 	bl	8000d98 <__aeabi_fdiv>
	float k = (3350.0 - 313.0) / 20.0;
	float b = 3350.0 - k * 20.0;
	uint16_t adcVal = 0;

	adcVal = (uint16_t)(k * valInBar + b);
 8005b30:	490a      	ldr	r1, [pc, #40]	; (8005b5c <bar_to_adc+0x38>)
 8005b32:	f7fb f87d 	bl	8000c30 <__aeabi_fmul>
 8005b36:	490a      	ldr	r1, [pc, #40]	; (8005b60 <bar_to_adc+0x3c>)
 8005b38:	f7fa ff72 	bl	8000a20 <__addsf3>
 8005b3c:	f7fb fa64 	bl	8001008 <__aeabi_f2uiz>
 8005b40:	f240 1339 	movw	r3, #313	; 0x139
 8005b44:	b280      	uxth	r0, r0
 8005b46:	4298      	cmp	r0, r3
 8005b48:	bf38      	it	cc
 8005b4a:	4618      	movcc	r0, r3

	if (adcVal > 3350) return 3350;
	else if (adcVal < 313) return 313;
	else return adcVal;
}
 8005b4c:	f640 5316 	movw	r3, #3350	; 0xd16
 8005b50:	4298      	cmp	r0, r3
 8005b52:	bf28      	it	cs
 8005b54:	4618      	movcs	r0, r3
 8005b56:	bd08      	pop	{r3, pc}
 8005b58:	41200000 	.word	0x41200000
 8005b5c:	4317d99a 	.word	0x4317d99a
 8005b60:	439c7ffc 	.word	0x439c7ffc

08005b64 <bar_to_adc_diff>:

uint16_t bar_to_adc_diff(uint16_t bar){
 8005b64:	b508      	push	{r3, lr}
	float valInBar = (float)bar / 10.0;
 8005b66:	f7fb f80b 	bl	8000b80 <__aeabi_ui2f>
 8005b6a:	490a      	ldr	r1, [pc, #40]	; (8005b94 <bar_to_adc_diff+0x30>)
 8005b6c:	f7fb f914 	bl	8000d98 <__aeabi_fdiv>
	float k = (3350.0 - 313.0) / 20.0;
	uint16_t adcVal = 0;

	adcVal = (uint16_t)(k * valInBar);
 8005b70:	4909      	ldr	r1, [pc, #36]	; (8005b98 <bar_to_adc_diff+0x34>)
 8005b72:	f7fb f85d 	bl	8000c30 <__aeabi_fmul>
 8005b76:	f7fb fa47 	bl	8001008 <__aeabi_f2uiz>
 8005b7a:	f240 1339 	movw	r3, #313	; 0x139
 8005b7e:	b280      	uxth	r0, r0
 8005b80:	4298      	cmp	r0, r3
 8005b82:	bf38      	it	cc
 8005b84:	4618      	movcc	r0, r3

	if (adcVal > 3350) return 3350;
	else if (adcVal < 313) return 313;
	else return adcVal;
}
 8005b86:	f640 5316 	movw	r3, #3350	; 0xd16
 8005b8a:	4298      	cmp	r0, r3
 8005b8c:	bf28      	it	cs
 8005b8e:	4618      	movcs	r0, r3
 8005b90:	bd08      	pop	{r3, pc}
 8005b92:	bf00      	nop
 8005b94:	41200000 	.word	0x41200000
 8005b98:	4317d99a 	.word	0x4317d99a

08005b9c <calculate_test_params>:
	if (start >= 0 && start < 6){
 8005b9c:	2805      	cmp	r0, #5
uint8_t calculate_test_params(uint8_t start){
 8005b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (start >= 0 && start < 6){
 8005ba0:	d804      	bhi.n	8005bac <calculate_test_params+0x10>
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <calculate_test_params+0x50>)
 8005ba4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		for(i = start; i < 5; i++){
 8005ba8:	2805      	cmp	r0, #5
 8005baa:	d101      	bne.n	8005bb0 <calculate_test_params+0x14>
	return legalStep;
 8005bac:	2400      	movs	r4, #0
 8005bae:	e018      	b.n	8005be2 <calculate_test_params+0x46>
			if (	(testProgram.testPressure[i] > 0) &&
 8005bb0:	f833 6f02 	ldrh.w	r6, [r3, #2]!
 8005bb4:	1c44      	adds	r4, r0, #1
 8005bb6:	1e72      	subs	r2, r6, #1
 8005bb8:	2a76      	cmp	r2, #118	; 0x76
 8005bba:	d814      	bhi.n	8005be6 <calculate_test_params+0x4a>
					(testProgram.testTime[i] > 0) &&
 8005bbc:	895f      	ldrh	r7, [r3, #10]
					(testProgram.testPressure[i] < 120) &&
 8005bbe:	b197      	cbz	r7, 8005be6 <calculate_test_params+0x4a>
					(testProgram.testDiffPressure[i] > 0) &&
 8005bc0:	8a98      	ldrh	r0, [r3, #20]
					(testProgram.testTime[i] > 0) &&
 8005bc2:	b180      	cbz	r0, 8005be6 <calculate_test_params+0x4a>
					(testProgram.testDiffPressure[i] > 0) &&
 8005bc4:	4286      	cmp	r6, r0
 8005bc6:	d90e      	bls.n	8005be6 <calculate_test_params+0x4a>
				testingParams.testDiffPressure = bar_to_adc_diff(testProgram.testDiffPressure[i]);
 8005bc8:	f7ff ffcc 	bl	8005b64 <bar_to_adc_diff>
 8005bcc:	4d08      	ldr	r5, [pc, #32]	; (8005bf0 <calculate_test_params+0x54>)
				legalStep = i + 1;
 8005bce:	b2e4      	uxtb	r4, r4
				testingParams.testDiffPressure = bar_to_adc_diff(testProgram.testDiffPressure[i]);
 8005bd0:	8128      	strh	r0, [r5, #8]
				testingParams.testPressure = bar_to_adc(testProgram.testPressure[i]);
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7ff ffa6 	bl	8005b24 <bar_to_adc>
				testingParams.testTimeMS = testProgram.testTime[i] * 60 * 1000;
 8005bd8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005bdc:	437b      	muls	r3, r7
				testingParams.testPressure = bar_to_adc(testProgram.testPressure[i]);
 8005bde:	8028      	strh	r0, [r5, #0]
				testingParams.testTimeMS = testProgram.testTime[i] * 60 * 1000;
 8005be0:	606b      	str	r3, [r5, #4]
}
 8005be2:	4620      	mov	r0, r4
 8005be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for(i = start; i < 5; i++){
 8005be6:	b2e0      	uxtb	r0, r4
 8005be8:	e7de      	b.n	8005ba8 <calculate_test_params+0xc>
 8005bea:	bf00      	nop
 8005bec:	20005352 	.word	0x20005352
 8005bf0:	20005378 	.word	0x20005378

08005bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005bf4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005bf6:	e003      	b.n	8005c00 <LoopCopyDataInit>

08005bf8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8005bfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005bfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005bfe:	3104      	adds	r1, #4

08005c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005c00:	4809      	ldr	r0, [pc, #36]	; (8005c28 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8005c04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005c06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005c08:	d3f6      	bcc.n	8005bf8 <CopyDataInit>
  ldr r2, =_sbss
 8005c0a:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8005c0c:	e002      	b.n	8005c14 <LoopFillZerobss>

08005c0e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005c0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005c10:	f842 3b04 	str.w	r3, [r2], #4

08005c14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8005c16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005c18:	d3f9      	bcc.n	8005c0e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c1a:	f7ff fe99 	bl	8005950 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8005c1e:	f7ff fa13 	bl	8005048 <main>
  bx lr
 8005c22:	4770      	bx	lr
  ldr r3, =_sidata
 8005c24:	0800700c 	.word	0x0800700c
  ldr r0, =_sdata
 8005c28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005c2c:	20000108 	.word	0x20000108
  ldr r2, =_sbss
 8005c30:	20000108 	.word	0x20000108
  ldr r3, = _ebss
 8005c34:	200055b0 	.word	0x200055b0

08005c38 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c38:	e7fe      	b.n	8005c38 <CAN1_RX0_IRQHandler>
	...

08005c3c <__assert_func>:
 8005c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c3e:	461c      	mov	r4, r3
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <__assert_func+0x2c>)
 8005c42:	4605      	mov	r5, r0
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68d8      	ldr	r0, [r3, #12]
 8005c48:	b152      	cbz	r2, 8005c60 <__assert_func+0x24>
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <__assert_func+0x30>)
 8005c4c:	e88d 000a 	stmia.w	sp, {r1, r3}
 8005c50:	9202      	str	r2, [sp, #8]
 8005c52:	462b      	mov	r3, r5
 8005c54:	4622      	mov	r2, r4
 8005c56:	4906      	ldr	r1, [pc, #24]	; (8005c70 <__assert_func+0x34>)
 8005c58:	f000 f814 	bl	8005c84 <fiprintf>
 8005c5c:	f000 fbce 	bl	80063fc <abort>
 8005c60:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <__assert_func+0x38>)
 8005c62:	461a      	mov	r2, r3
 8005c64:	e7f2      	b.n	8005c4c <__assert_func+0x10>
 8005c66:	bf00      	nop
 8005c68:	200000a4 	.word	0x200000a4
 8005c6c:	08006f25 	.word	0x08006f25
 8005c70:	08006f32 	.word	0x08006f32
 8005c74:	08006f60 	.word	0x08006f60

08005c78 <__errno>:
 8005c78:	4b01      	ldr	r3, [pc, #4]	; (8005c80 <__errno+0x8>)
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	200000a4 	.word	0x200000a4

08005c84 <fiprintf>:
 8005c84:	b40e      	push	{r1, r2, r3}
 8005c86:	b503      	push	{r0, r1, lr}
 8005c88:	4601      	mov	r1, r0
 8005c8a:	ab03      	add	r3, sp, #12
 8005c8c:	4805      	ldr	r0, [pc, #20]	; (8005ca4 <fiprintf+0x20>)
 8005c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c92:	6800      	ldr	r0, [r0, #0]
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	f000 f843 	bl	8005d20 <_vfiprintf_r>
 8005c9a:	b002      	add	sp, #8
 8005c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca0:	b003      	add	sp, #12
 8005ca2:	4770      	bx	lr
 8005ca4:	200000a4 	.word	0x200000a4

08005ca8 <memcpy>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	1e43      	subs	r3, r0, #1
 8005cac:	440a      	add	r2, r1
 8005cae:	4291      	cmp	r1, r2
 8005cb0:	d100      	bne.n	8005cb4 <memcpy+0xc>
 8005cb2:	bd10      	pop	{r4, pc}
 8005cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cbc:	e7f7      	b.n	8005cae <memcpy+0x6>

08005cbe <memset>:
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4402      	add	r2, r0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d100      	bne.n	8005cc8 <memset+0xa>
 8005cc6:	4770      	bx	lr
 8005cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005ccc:	e7f9      	b.n	8005cc2 <memset+0x4>

08005cce <__sfputc_r>:
 8005cce:	6893      	ldr	r3, [r2, #8]
 8005cd0:	b410      	push	{r4}
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	6093      	str	r3, [r2, #8]
 8005cd8:	da08      	bge.n	8005cec <__sfputc_r+0x1e>
 8005cda:	6994      	ldr	r4, [r2, #24]
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	db02      	blt.n	8005ce6 <__sfputc_r+0x18>
 8005ce0:	b2cb      	uxtb	r3, r1
 8005ce2:	2b0a      	cmp	r3, #10
 8005ce4:	d102      	bne.n	8005cec <__sfputc_r+0x1e>
 8005ce6:	bc10      	pop	{r4}
 8005ce8:	f000 bac8 	b.w	800627c <__swbuf_r>
 8005cec:	6813      	ldr	r3, [r2, #0]
 8005cee:	1c58      	adds	r0, r3, #1
 8005cf0:	6010      	str	r0, [r2, #0]
 8005cf2:	7019      	strb	r1, [r3, #0]
 8005cf4:	b2c8      	uxtb	r0, r1
 8005cf6:	bc10      	pop	{r4}
 8005cf8:	4770      	bx	lr

08005cfa <__sfputs_r>:
 8005cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	460f      	mov	r7, r1
 8005d00:	4614      	mov	r4, r2
 8005d02:	18d5      	adds	r5, r2, r3
 8005d04:	42ac      	cmp	r4, r5
 8005d06:	d101      	bne.n	8005d0c <__sfputs_r+0x12>
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e007      	b.n	8005d1c <__sfputs_r+0x22>
 8005d0c:	463a      	mov	r2, r7
 8005d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7ff ffdb 	bl	8005cce <__sfputc_r>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d1f3      	bne.n	8005d04 <__sfputs_r+0xa>
 8005d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d20 <_vfiprintf_r>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b09d      	sub	sp, #116	; 0x74
 8005d26:	460c      	mov	r4, r1
 8005d28:	4617      	mov	r7, r2
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	b118      	cbz	r0, 8005d38 <_vfiprintf_r+0x18>
 8005d30:	6983      	ldr	r3, [r0, #24]
 8005d32:	b90b      	cbnz	r3, 8005d38 <_vfiprintf_r+0x18>
 8005d34:	f000 fc5c 	bl	80065f0 <__sinit>
 8005d38:	4b7c      	ldr	r3, [pc, #496]	; (8005f2c <_vfiprintf_r+0x20c>)
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	d157      	bne.n	8005dee <_vfiprintf_r+0xce>
 8005d3e:	6874      	ldr	r4, [r6, #4]
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	0718      	lsls	r0, r3, #28
 8005d44:	d55d      	bpl.n	8005e02 <_vfiprintf_r+0xe2>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05a      	beq.n	8005e02 <_vfiprintf_r+0xe2>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d50:	2320      	movs	r3, #32
 8005d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d56:	2330      	movs	r3, #48	; 0x30
 8005d58:	f04f 0b01 	mov.w	fp, #1
 8005d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d60:	46b8      	mov	r8, r7
 8005d62:	4645      	mov	r5, r8
 8005d64:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d155      	bne.n	8005e18 <_vfiprintf_r+0xf8>
 8005d6c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005d70:	d00b      	beq.n	8005d8a <_vfiprintf_r+0x6a>
 8005d72:	4653      	mov	r3, sl
 8005d74:	463a      	mov	r2, r7
 8005d76:	4621      	mov	r1, r4
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f7ff ffbe 	bl	8005cfa <__sfputs_r>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f000 80c4 	beq.w	8005f0c <_vfiprintf_r+0x1ec>
 8005d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d86:	4453      	add	r3, sl
 8005d88:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8a:	f898 3000 	ldrb.w	r3, [r8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80bc 	beq.w	8005f0c <_vfiprintf_r+0x1ec>
 8005d94:	2300      	movs	r3, #0
 8005d96:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	9307      	str	r3, [sp, #28]
 8005d9e:	9205      	str	r2, [sp, #20]
 8005da0:	9306      	str	r3, [sp, #24]
 8005da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005da6:	931a      	str	r3, [sp, #104]	; 0x68
 8005da8:	2205      	movs	r2, #5
 8005daa:	7829      	ldrb	r1, [r5, #0]
 8005dac:	4860      	ldr	r0, [pc, #384]	; (8005f30 <_vfiprintf_r+0x210>)
 8005dae:	f000 fd0d 	bl	80067cc <memchr>
 8005db2:	f105 0801 	add.w	r8, r5, #1
 8005db6:	9b04      	ldr	r3, [sp, #16]
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d131      	bne.n	8005e20 <_vfiprintf_r+0x100>
 8005dbc:	06d9      	lsls	r1, r3, #27
 8005dbe:	bf44      	itt	mi
 8005dc0:	2220      	movmi	r2, #32
 8005dc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dc6:	071a      	lsls	r2, r3, #28
 8005dc8:	bf44      	itt	mi
 8005dca:	222b      	movmi	r2, #43	; 0x2b
 8005dcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dd0:	782a      	ldrb	r2, [r5, #0]
 8005dd2:	2a2a      	cmp	r2, #42	; 0x2a
 8005dd4:	d02c      	beq.n	8005e30 <_vfiprintf_r+0x110>
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	200a      	movs	r0, #10
 8005dda:	9a07      	ldr	r2, [sp, #28]
 8005ddc:	46a8      	mov	r8, r5
 8005dde:	f898 3000 	ldrb.w	r3, [r8]
 8005de2:	3501      	adds	r5, #1
 8005de4:	3b30      	subs	r3, #48	; 0x30
 8005de6:	2b09      	cmp	r3, #9
 8005de8:	d96d      	bls.n	8005ec6 <_vfiprintf_r+0x1a6>
 8005dea:	b371      	cbz	r1, 8005e4a <_vfiprintf_r+0x12a>
 8005dec:	e026      	b.n	8005e3c <_vfiprintf_r+0x11c>
 8005dee:	4b51      	ldr	r3, [pc, #324]	; (8005f34 <_vfiprintf_r+0x214>)
 8005df0:	429c      	cmp	r4, r3
 8005df2:	d101      	bne.n	8005df8 <_vfiprintf_r+0xd8>
 8005df4:	68b4      	ldr	r4, [r6, #8]
 8005df6:	e7a3      	b.n	8005d40 <_vfiprintf_r+0x20>
 8005df8:	4b4f      	ldr	r3, [pc, #316]	; (8005f38 <_vfiprintf_r+0x218>)
 8005dfa:	429c      	cmp	r4, r3
 8005dfc:	bf08      	it	eq
 8005dfe:	68f4      	ldreq	r4, [r6, #12]
 8005e00:	e79e      	b.n	8005d40 <_vfiprintf_r+0x20>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 fa8b 	bl	8006320 <__swsetup_r>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d09e      	beq.n	8005d4c <_vfiprintf_r+0x2c>
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	b01d      	add	sp, #116	; 0x74
 8005e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e18:	2b25      	cmp	r3, #37	; 0x25
 8005e1a:	d0a7      	beq.n	8005d6c <_vfiprintf_r+0x4c>
 8005e1c:	46a8      	mov	r8, r5
 8005e1e:	e7a0      	b.n	8005d62 <_vfiprintf_r+0x42>
 8005e20:	4a43      	ldr	r2, [pc, #268]	; (8005f30 <_vfiprintf_r+0x210>)
 8005e22:	4645      	mov	r5, r8
 8005e24:	1a80      	subs	r0, r0, r2
 8005e26:	fa0b f000 	lsl.w	r0, fp, r0
 8005e2a:	4318      	orrs	r0, r3
 8005e2c:	9004      	str	r0, [sp, #16]
 8005e2e:	e7bb      	b.n	8005da8 <_vfiprintf_r+0x88>
 8005e30:	9a03      	ldr	r2, [sp, #12]
 8005e32:	1d11      	adds	r1, r2, #4
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	9103      	str	r1, [sp, #12]
 8005e38:	2a00      	cmp	r2, #0
 8005e3a:	db01      	blt.n	8005e40 <_vfiprintf_r+0x120>
 8005e3c:	9207      	str	r2, [sp, #28]
 8005e3e:	e004      	b.n	8005e4a <_vfiprintf_r+0x12a>
 8005e40:	4252      	negs	r2, r2
 8005e42:	f043 0302 	orr.w	r3, r3, #2
 8005e46:	9207      	str	r2, [sp, #28]
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	f898 3000 	ldrb.w	r3, [r8]
 8005e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e50:	d110      	bne.n	8005e74 <_vfiprintf_r+0x154>
 8005e52:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e56:	f108 0101 	add.w	r1, r8, #1
 8005e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e5c:	d137      	bne.n	8005ece <_vfiprintf_r+0x1ae>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	f108 0802 	add.w	r8, r8, #2
 8005e64:	1d1a      	adds	r2, r3, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	9203      	str	r2, [sp, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bfb8      	it	lt
 8005e6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e72:	9305      	str	r3, [sp, #20]
 8005e74:	4d31      	ldr	r5, [pc, #196]	; (8005f3c <_vfiprintf_r+0x21c>)
 8005e76:	2203      	movs	r2, #3
 8005e78:	f898 1000 	ldrb.w	r1, [r8]
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 fca5 	bl	80067cc <memchr>
 8005e82:	b140      	cbz	r0, 8005e96 <_vfiprintf_r+0x176>
 8005e84:	2340      	movs	r3, #64	; 0x40
 8005e86:	1b40      	subs	r0, r0, r5
 8005e88:	fa03 f000 	lsl.w	r0, r3, r0
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	f108 0801 	add.w	r8, r8, #1
 8005e92:	4303      	orrs	r3, r0
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	f898 1000 	ldrb.w	r1, [r8]
 8005e9a:	2206      	movs	r2, #6
 8005e9c:	4828      	ldr	r0, [pc, #160]	; (8005f40 <_vfiprintf_r+0x220>)
 8005e9e:	f108 0701 	add.w	r7, r8, #1
 8005ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ea6:	f000 fc91 	bl	80067cc <memchr>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d034      	beq.n	8005f18 <_vfiprintf_r+0x1f8>
 8005eae:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <_vfiprintf_r+0x224>)
 8005eb0:	bb03      	cbnz	r3, 8005ef4 <_vfiprintf_r+0x1d4>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	3308      	adds	r3, #8
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	444b      	add	r3, r9
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	e74c      	b.n	8005d60 <_vfiprintf_r+0x40>
 8005ec6:	fb00 3202 	mla	r2, r0, r2, r3
 8005eca:	2101      	movs	r1, #1
 8005ecc:	e786      	b.n	8005ddc <_vfiprintf_r+0xbc>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	250a      	movs	r5, #10
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	4688      	mov	r8, r1
 8005ed8:	f898 2000 	ldrb.w	r2, [r8]
 8005edc:	3101      	adds	r1, #1
 8005ede:	3a30      	subs	r2, #48	; 0x30
 8005ee0:	2a09      	cmp	r2, #9
 8005ee2:	d903      	bls.n	8005eec <_vfiprintf_r+0x1cc>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0c5      	beq.n	8005e74 <_vfiprintf_r+0x154>
 8005ee8:	9005      	str	r0, [sp, #20]
 8005eea:	e7c3      	b.n	8005e74 <_vfiprintf_r+0x154>
 8005eec:	fb05 2000 	mla	r0, r5, r0, r2
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e7f0      	b.n	8005ed6 <_vfiprintf_r+0x1b6>
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <_vfiprintf_r+0x228>)
 8005efc:	a904      	add	r1, sp, #16
 8005efe:	4630      	mov	r0, r6
 8005f00:	f3af 8000 	nop.w
 8005f04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f08:	4681      	mov	r9, r0
 8005f0a:	d1d8      	bne.n	8005ebe <_vfiprintf_r+0x19e>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	065b      	lsls	r3, r3, #25
 8005f10:	f53f af7d 	bmi.w	8005e0e <_vfiprintf_r+0xee>
 8005f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f16:	e77c      	b.n	8005e12 <_vfiprintf_r+0xf2>
 8005f18:	ab03      	add	r3, sp, #12
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <_vfiprintf_r+0x228>)
 8005f20:	a904      	add	r1, sp, #16
 8005f22:	4630      	mov	r0, r6
 8005f24:	f000 f88a 	bl	800603c <_printf_i>
 8005f28:	e7ec      	b.n	8005f04 <_vfiprintf_r+0x1e4>
 8005f2a:	bf00      	nop
 8005f2c:	08006fbc 	.word	0x08006fbc
 8005f30:	08006f68 	.word	0x08006f68
 8005f34:	08006fdc 	.word	0x08006fdc
 8005f38:	08006f9c 	.word	0x08006f9c
 8005f3c:	08006f6e 	.word	0x08006f6e
 8005f40:	08006f72 	.word	0x08006f72
 8005f44:	00000000 	.word	0x00000000
 8005f48:	08005cfb 	.word	0x08005cfb

08005f4c <_printf_common>:
 8005f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f50:	4691      	mov	r9, r2
 8005f52:	461f      	mov	r7, r3
 8005f54:	688a      	ldr	r2, [r1, #8]
 8005f56:	690b      	ldr	r3, [r1, #16]
 8005f58:	4606      	mov	r6, r0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	bfb8      	it	lt
 8005f5e:	4613      	movlt	r3, r2
 8005f60:	f8c9 3000 	str.w	r3, [r9]
 8005f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f68:	460c      	mov	r4, r1
 8005f6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f6e:	b112      	cbz	r2, 8005f76 <_printf_common+0x2a>
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c9 3000 	str.w	r3, [r9]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0699      	lsls	r1, r3, #26
 8005f7a:	bf42      	ittt	mi
 8005f7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f80:	3302      	addmi	r3, #2
 8005f82:	f8c9 3000 	strmi.w	r3, [r9]
 8005f86:	6825      	ldr	r5, [r4, #0]
 8005f88:	f015 0506 	ands.w	r5, r5, #6
 8005f8c:	d107      	bne.n	8005f9e <_printf_common+0x52>
 8005f8e:	f104 0a19 	add.w	sl, r4, #25
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	f8d9 2000 	ldr.w	r2, [r9]
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	429d      	cmp	r5, r3
 8005f9c:	db2a      	blt.n	8005ff4 <_printf_common+0xa8>
 8005f9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	3300      	adds	r3, #0
 8005fa6:	bf18      	it	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	0692      	lsls	r2, r2, #26
 8005fac:	d42f      	bmi.n	800600e <_printf_common+0xc2>
 8005fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	47c0      	blx	r8
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d022      	beq.n	8006002 <_printf_common+0xb6>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	68e5      	ldr	r5, [r4, #12]
 8005fc0:	f003 0306 	and.w	r3, r3, #6
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	bf18      	it	ne
 8005fc8:	2500      	movne	r5, #0
 8005fca:	f8d9 2000 	ldr.w	r2, [r9]
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	bf08      	it	eq
 8005fd4:	1aad      	subeq	r5, r5, r2
 8005fd6:	68a3      	ldr	r3, [r4, #8]
 8005fd8:	6922      	ldr	r2, [r4, #16]
 8005fda:	bf08      	it	eq
 8005fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfc4      	itt	gt
 8005fe4:	1a9b      	subgt	r3, r3, r2
 8005fe6:	18ed      	addgt	r5, r5, r3
 8005fe8:	341a      	adds	r4, #26
 8005fea:	454d      	cmp	r5, r9
 8005fec:	d11b      	bne.n	8006026 <_printf_common+0xda>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	47c0      	blx	r8
 8005ffe:	3001      	adds	r0, #1
 8006000:	d103      	bne.n	800600a <_printf_common+0xbe>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600a:	3501      	adds	r5, #1
 800600c:	e7c1      	b.n	8005f92 <_printf_common+0x46>
 800600e:	2030      	movs	r0, #48	; 0x30
 8006010:	18e1      	adds	r1, r4, r3
 8006012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800601c:	4422      	add	r2, r4
 800601e:	3302      	adds	r3, #2
 8006020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006024:	e7c3      	b.n	8005fae <_printf_common+0x62>
 8006026:	2301      	movs	r3, #1
 8006028:	4622      	mov	r2, r4
 800602a:	4639      	mov	r1, r7
 800602c:	4630      	mov	r0, r6
 800602e:	47c0      	blx	r8
 8006030:	3001      	adds	r0, #1
 8006032:	d0e6      	beq.n	8006002 <_printf_common+0xb6>
 8006034:	f109 0901 	add.w	r9, r9, #1
 8006038:	e7d7      	b.n	8005fea <_printf_common+0x9e>
	...

0800603c <_printf_i>:
 800603c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006040:	4617      	mov	r7, r2
 8006042:	7e0a      	ldrb	r2, [r1, #24]
 8006044:	b085      	sub	sp, #20
 8006046:	2a6e      	cmp	r2, #110	; 0x6e
 8006048:	4698      	mov	r8, r3
 800604a:	4606      	mov	r6, r0
 800604c:	460c      	mov	r4, r1
 800604e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006050:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006054:	f000 80bc 	beq.w	80061d0 <_printf_i+0x194>
 8006058:	d81a      	bhi.n	8006090 <_printf_i+0x54>
 800605a:	2a63      	cmp	r2, #99	; 0x63
 800605c:	d02e      	beq.n	80060bc <_printf_i+0x80>
 800605e:	d80a      	bhi.n	8006076 <_printf_i+0x3a>
 8006060:	2a00      	cmp	r2, #0
 8006062:	f000 80c8 	beq.w	80061f6 <_printf_i+0x1ba>
 8006066:	2a58      	cmp	r2, #88	; 0x58
 8006068:	f000 808a 	beq.w	8006180 <_printf_i+0x144>
 800606c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006070:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006074:	e02a      	b.n	80060cc <_printf_i+0x90>
 8006076:	2a64      	cmp	r2, #100	; 0x64
 8006078:	d001      	beq.n	800607e <_printf_i+0x42>
 800607a:	2a69      	cmp	r2, #105	; 0x69
 800607c:	d1f6      	bne.n	800606c <_printf_i+0x30>
 800607e:	6821      	ldr	r1, [r4, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006086:	d023      	beq.n	80060d0 <_printf_i+0x94>
 8006088:	1d11      	adds	r1, r2, #4
 800608a:	6019      	str	r1, [r3, #0]
 800608c:	6813      	ldr	r3, [r2, #0]
 800608e:	e027      	b.n	80060e0 <_printf_i+0xa4>
 8006090:	2a73      	cmp	r2, #115	; 0x73
 8006092:	f000 80b4 	beq.w	80061fe <_printf_i+0x1c2>
 8006096:	d808      	bhi.n	80060aa <_printf_i+0x6e>
 8006098:	2a6f      	cmp	r2, #111	; 0x6f
 800609a:	d02a      	beq.n	80060f2 <_printf_i+0xb6>
 800609c:	2a70      	cmp	r2, #112	; 0x70
 800609e:	d1e5      	bne.n	800606c <_printf_i+0x30>
 80060a0:	680a      	ldr	r2, [r1, #0]
 80060a2:	f042 0220 	orr.w	r2, r2, #32
 80060a6:	600a      	str	r2, [r1, #0]
 80060a8:	e003      	b.n	80060b2 <_printf_i+0x76>
 80060aa:	2a75      	cmp	r2, #117	; 0x75
 80060ac:	d021      	beq.n	80060f2 <_printf_i+0xb6>
 80060ae:	2a78      	cmp	r2, #120	; 0x78
 80060b0:	d1dc      	bne.n	800606c <_printf_i+0x30>
 80060b2:	2278      	movs	r2, #120	; 0x78
 80060b4:	496f      	ldr	r1, [pc, #444]	; (8006274 <_printf_i+0x238>)
 80060b6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80060ba:	e064      	b.n	8006186 <_printf_i+0x14a>
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80060c2:	1d11      	adds	r1, r2, #4
 80060c4:	6019      	str	r1, [r3, #0]
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0a3      	b.n	8006218 <_printf_i+0x1dc>
 80060d0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80060d4:	f102 0104 	add.w	r1, r2, #4
 80060d8:	6019      	str	r1, [r3, #0]
 80060da:	d0d7      	beq.n	800608c <_printf_i+0x50>
 80060dc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da03      	bge.n	80060ec <_printf_i+0xb0>
 80060e4:	222d      	movs	r2, #45	; 0x2d
 80060e6:	425b      	negs	r3, r3
 80060e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80060ec:	4962      	ldr	r1, [pc, #392]	; (8006278 <_printf_i+0x23c>)
 80060ee:	220a      	movs	r2, #10
 80060f0:	e017      	b.n	8006122 <_printf_i+0xe6>
 80060f2:	6820      	ldr	r0, [r4, #0]
 80060f4:	6819      	ldr	r1, [r3, #0]
 80060f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80060fa:	d003      	beq.n	8006104 <_printf_i+0xc8>
 80060fc:	1d08      	adds	r0, r1, #4
 80060fe:	6018      	str	r0, [r3, #0]
 8006100:	680b      	ldr	r3, [r1, #0]
 8006102:	e006      	b.n	8006112 <_printf_i+0xd6>
 8006104:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006108:	f101 0004 	add.w	r0, r1, #4
 800610c:	6018      	str	r0, [r3, #0]
 800610e:	d0f7      	beq.n	8006100 <_printf_i+0xc4>
 8006110:	880b      	ldrh	r3, [r1, #0]
 8006112:	2a6f      	cmp	r2, #111	; 0x6f
 8006114:	bf14      	ite	ne
 8006116:	220a      	movne	r2, #10
 8006118:	2208      	moveq	r2, #8
 800611a:	4957      	ldr	r1, [pc, #348]	; (8006278 <_printf_i+0x23c>)
 800611c:	2000      	movs	r0, #0
 800611e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006122:	6865      	ldr	r5, [r4, #4]
 8006124:	2d00      	cmp	r5, #0
 8006126:	60a5      	str	r5, [r4, #8]
 8006128:	f2c0 809c 	blt.w	8006264 <_printf_i+0x228>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	f020 0004 	bic.w	r0, r0, #4
 8006132:	6020      	str	r0, [r4, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d13f      	bne.n	80061b8 <_printf_i+0x17c>
 8006138:	2d00      	cmp	r5, #0
 800613a:	f040 8095 	bne.w	8006268 <_printf_i+0x22c>
 800613e:	4675      	mov	r5, lr
 8006140:	2a08      	cmp	r2, #8
 8006142:	d10b      	bne.n	800615c <_printf_i+0x120>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	07da      	lsls	r2, r3, #31
 8006148:	d508      	bpl.n	800615c <_printf_i+0x120>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	6862      	ldr	r2, [r4, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	bfde      	ittt	le
 8006152:	2330      	movle	r3, #48	; 0x30
 8006154:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006158:	f105 35ff 	addle.w	r5, r5, #4294967295
 800615c:	ebae 0305 	sub.w	r3, lr, r5
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	f8cd 8000 	str.w	r8, [sp]
 8006166:	463b      	mov	r3, r7
 8006168:	aa03      	add	r2, sp, #12
 800616a:	4621      	mov	r1, r4
 800616c:	4630      	mov	r0, r6
 800616e:	f7ff feed 	bl	8005f4c <_printf_common>
 8006172:	3001      	adds	r0, #1
 8006174:	d155      	bne.n	8006222 <_printf_i+0x1e6>
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	b005      	add	sp, #20
 800617c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006180:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006184:	493c      	ldr	r1, [pc, #240]	; (8006278 <_printf_i+0x23c>)
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800618e:	f100 0504 	add.w	r5, r0, #4
 8006192:	601d      	str	r5, [r3, #0]
 8006194:	d001      	beq.n	800619a <_printf_i+0x15e>
 8006196:	6803      	ldr	r3, [r0, #0]
 8006198:	e002      	b.n	80061a0 <_printf_i+0x164>
 800619a:	0655      	lsls	r5, r2, #25
 800619c:	d5fb      	bpl.n	8006196 <_printf_i+0x15a>
 800619e:	8803      	ldrh	r3, [r0, #0]
 80061a0:	07d0      	lsls	r0, r2, #31
 80061a2:	bf44      	itt	mi
 80061a4:	f042 0220 	orrmi.w	r2, r2, #32
 80061a8:	6022      	strmi	r2, [r4, #0]
 80061aa:	b91b      	cbnz	r3, 80061b4 <_printf_i+0x178>
 80061ac:	6822      	ldr	r2, [r4, #0]
 80061ae:	f022 0220 	bic.w	r2, r2, #32
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	2210      	movs	r2, #16
 80061b6:	e7b1      	b.n	800611c <_printf_i+0xe0>
 80061b8:	4675      	mov	r5, lr
 80061ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80061be:	fb02 3310 	mls	r3, r2, r0, r3
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061c8:	4603      	mov	r3, r0
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d1f5      	bne.n	80061ba <_printf_i+0x17e>
 80061ce:	e7b7      	b.n	8006140 <_printf_i+0x104>
 80061d0:	6808      	ldr	r0, [r1, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80061d8:	6949      	ldr	r1, [r1, #20]
 80061da:	d004      	beq.n	80061e6 <_printf_i+0x1aa>
 80061dc:	1d10      	adds	r0, r2, #4
 80061de:	6018      	str	r0, [r3, #0]
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	6019      	str	r1, [r3, #0]
 80061e4:	e007      	b.n	80061f6 <_printf_i+0x1ba>
 80061e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061ea:	f102 0004 	add.w	r0, r2, #4
 80061ee:	6018      	str	r0, [r3, #0]
 80061f0:	6813      	ldr	r3, [r2, #0]
 80061f2:	d0f6      	beq.n	80061e2 <_printf_i+0x1a6>
 80061f4:	8019      	strh	r1, [r3, #0]
 80061f6:	2300      	movs	r3, #0
 80061f8:	4675      	mov	r5, lr
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	e7b1      	b.n	8006162 <_printf_i+0x126>
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	1d11      	adds	r1, r2, #4
 8006202:	6019      	str	r1, [r3, #0]
 8006204:	6815      	ldr	r5, [r2, #0]
 8006206:	2100      	movs	r1, #0
 8006208:	6862      	ldr	r2, [r4, #4]
 800620a:	4628      	mov	r0, r5
 800620c:	f000 fade 	bl	80067cc <memchr>
 8006210:	b108      	cbz	r0, 8006216 <_printf_i+0x1da>
 8006212:	1b40      	subs	r0, r0, r5
 8006214:	6060      	str	r0, [r4, #4]
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	6123      	str	r3, [r4, #16]
 800621a:	2300      	movs	r3, #0
 800621c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006220:	e79f      	b.n	8006162 <_printf_i+0x126>
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	462a      	mov	r2, r5
 8006226:	4639      	mov	r1, r7
 8006228:	4630      	mov	r0, r6
 800622a:	47c0      	blx	r8
 800622c:	3001      	adds	r0, #1
 800622e:	d0a2      	beq.n	8006176 <_printf_i+0x13a>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	079b      	lsls	r3, r3, #30
 8006234:	d507      	bpl.n	8006246 <_printf_i+0x20a>
 8006236:	2500      	movs	r5, #0
 8006238:	f104 0919 	add.w	r9, r4, #25
 800623c:	68e3      	ldr	r3, [r4, #12]
 800623e:	9a03      	ldr	r2, [sp, #12]
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	429d      	cmp	r5, r3
 8006244:	db05      	blt.n	8006252 <_printf_i+0x216>
 8006246:	68e0      	ldr	r0, [r4, #12]
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	4298      	cmp	r0, r3
 800624c:	bfb8      	it	lt
 800624e:	4618      	movlt	r0, r3
 8006250:	e793      	b.n	800617a <_printf_i+0x13e>
 8006252:	2301      	movs	r3, #1
 8006254:	464a      	mov	r2, r9
 8006256:	4639      	mov	r1, r7
 8006258:	4630      	mov	r0, r6
 800625a:	47c0      	blx	r8
 800625c:	3001      	adds	r0, #1
 800625e:	d08a      	beq.n	8006176 <_printf_i+0x13a>
 8006260:	3501      	adds	r5, #1
 8006262:	e7eb      	b.n	800623c <_printf_i+0x200>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1a7      	bne.n	80061b8 <_printf_i+0x17c>
 8006268:	780b      	ldrb	r3, [r1, #0]
 800626a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800626e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006272:	e765      	b.n	8006140 <_printf_i+0x104>
 8006274:	08006f8a 	.word	0x08006f8a
 8006278:	08006f79 	.word	0x08006f79

0800627c <__swbuf_r>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	460e      	mov	r6, r1
 8006280:	4614      	mov	r4, r2
 8006282:	4605      	mov	r5, r0
 8006284:	b118      	cbz	r0, 800628e <__swbuf_r+0x12>
 8006286:	6983      	ldr	r3, [r0, #24]
 8006288:	b90b      	cbnz	r3, 800628e <__swbuf_r+0x12>
 800628a:	f000 f9b1 	bl	80065f0 <__sinit>
 800628e:	4b21      	ldr	r3, [pc, #132]	; (8006314 <__swbuf_r+0x98>)
 8006290:	429c      	cmp	r4, r3
 8006292:	d12a      	bne.n	80062ea <__swbuf_r+0x6e>
 8006294:	686c      	ldr	r4, [r5, #4]
 8006296:	69a3      	ldr	r3, [r4, #24]
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	071a      	lsls	r2, r3, #28
 800629e:	d52e      	bpl.n	80062fe <__swbuf_r+0x82>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	b363      	cbz	r3, 80062fe <__swbuf_r+0x82>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	6820      	ldr	r0, [r4, #0]
 80062a8:	b2f6      	uxtb	r6, r6
 80062aa:	1ac0      	subs	r0, r0, r3
 80062ac:	6963      	ldr	r3, [r4, #20]
 80062ae:	4637      	mov	r7, r6
 80062b0:	4298      	cmp	r0, r3
 80062b2:	db04      	blt.n	80062be <__swbuf_r+0x42>
 80062b4:	4621      	mov	r1, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f930 	bl	800651c <_fflush_r>
 80062bc:	bb28      	cbnz	r0, 800630a <__swbuf_r+0x8e>
 80062be:	68a3      	ldr	r3, [r4, #8]
 80062c0:	3001      	adds	r0, #1
 80062c2:	3b01      	subs	r3, #1
 80062c4:	60a3      	str	r3, [r4, #8]
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	6022      	str	r2, [r4, #0]
 80062cc:	701e      	strb	r6, [r3, #0]
 80062ce:	6963      	ldr	r3, [r4, #20]
 80062d0:	4298      	cmp	r0, r3
 80062d2:	d004      	beq.n	80062de <__swbuf_r+0x62>
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	07db      	lsls	r3, r3, #31
 80062d8:	d519      	bpl.n	800630e <__swbuf_r+0x92>
 80062da:	2e0a      	cmp	r6, #10
 80062dc:	d117      	bne.n	800630e <__swbuf_r+0x92>
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 f91b 	bl	800651c <_fflush_r>
 80062e6:	b190      	cbz	r0, 800630e <__swbuf_r+0x92>
 80062e8:	e00f      	b.n	800630a <__swbuf_r+0x8e>
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <__swbuf_r+0x9c>)
 80062ec:	429c      	cmp	r4, r3
 80062ee:	d101      	bne.n	80062f4 <__swbuf_r+0x78>
 80062f0:	68ac      	ldr	r4, [r5, #8]
 80062f2:	e7d0      	b.n	8006296 <__swbuf_r+0x1a>
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <__swbuf_r+0xa0>)
 80062f6:	429c      	cmp	r4, r3
 80062f8:	bf08      	it	eq
 80062fa:	68ec      	ldreq	r4, [r5, #12]
 80062fc:	e7cb      	b.n	8006296 <__swbuf_r+0x1a>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f80d 	bl	8006320 <__swsetup_r>
 8006306:	2800      	cmp	r0, #0
 8006308:	d0cc      	beq.n	80062a4 <__swbuf_r+0x28>
 800630a:	f04f 37ff 	mov.w	r7, #4294967295
 800630e:	4638      	mov	r0, r7
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	bf00      	nop
 8006314:	08006fbc 	.word	0x08006fbc
 8006318:	08006fdc 	.word	0x08006fdc
 800631c:	08006f9c 	.word	0x08006f9c

08006320 <__swsetup_r>:
 8006320:	4b32      	ldr	r3, [pc, #200]	; (80063ec <__swsetup_r+0xcc>)
 8006322:	b570      	push	{r4, r5, r6, lr}
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	4606      	mov	r6, r0
 8006328:	460c      	mov	r4, r1
 800632a:	b125      	cbz	r5, 8006336 <__swsetup_r+0x16>
 800632c:	69ab      	ldr	r3, [r5, #24]
 800632e:	b913      	cbnz	r3, 8006336 <__swsetup_r+0x16>
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f95d 	bl	80065f0 <__sinit>
 8006336:	4b2e      	ldr	r3, [pc, #184]	; (80063f0 <__swsetup_r+0xd0>)
 8006338:	429c      	cmp	r4, r3
 800633a:	d10f      	bne.n	800635c <__swsetup_r+0x3c>
 800633c:	686c      	ldr	r4, [r5, #4]
 800633e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006342:	b29a      	uxth	r2, r3
 8006344:	0715      	lsls	r5, r2, #28
 8006346:	d42c      	bmi.n	80063a2 <__swsetup_r+0x82>
 8006348:	06d0      	lsls	r0, r2, #27
 800634a:	d411      	bmi.n	8006370 <__swsetup_r+0x50>
 800634c:	2209      	movs	r2, #9
 800634e:	6032      	str	r2, [r6, #0]
 8006350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <__swsetup_r+0xd4>)
 800635e:	429c      	cmp	r4, r3
 8006360:	d101      	bne.n	8006366 <__swsetup_r+0x46>
 8006362:	68ac      	ldr	r4, [r5, #8]
 8006364:	e7eb      	b.n	800633e <__swsetup_r+0x1e>
 8006366:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <__swsetup_r+0xd8>)
 8006368:	429c      	cmp	r4, r3
 800636a:	bf08      	it	eq
 800636c:	68ec      	ldreq	r4, [r5, #12]
 800636e:	e7e6      	b.n	800633e <__swsetup_r+0x1e>
 8006370:	0751      	lsls	r1, r2, #29
 8006372:	d512      	bpl.n	800639a <__swsetup_r+0x7a>
 8006374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006376:	b141      	cbz	r1, 800638a <__swsetup_r+0x6a>
 8006378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637c:	4299      	cmp	r1, r3
 800637e:	d002      	beq.n	8006386 <__swsetup_r+0x66>
 8006380:	4630      	mov	r0, r6
 8006382:	f000 fa31 	bl	80067e8 <_free_r>
 8006386:	2300      	movs	r3, #0
 8006388:	6363      	str	r3, [r4, #52]	; 0x34
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	2300      	movs	r3, #0
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	f043 0308 	orr.w	r3, r3, #8
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	b94b      	cbnz	r3, 80063ba <__swsetup_r+0x9a>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b0:	d003      	beq.n	80063ba <__swsetup_r+0x9a>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f9c9 	bl	800674c <__smakebuf_r>
 80063ba:	89a2      	ldrh	r2, [r4, #12]
 80063bc:	f012 0301 	ands.w	r3, r2, #1
 80063c0:	d00c      	beq.n	80063dc <__swsetup_r+0xbc>
 80063c2:	2300      	movs	r3, #0
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	6963      	ldr	r3, [r4, #20]
 80063c8:	425b      	negs	r3, r3
 80063ca:	61a3      	str	r3, [r4, #24]
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	b953      	cbnz	r3, 80063e6 <__swsetup_r+0xc6>
 80063d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80063d8:	d1ba      	bne.n	8006350 <__swsetup_r+0x30>
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	0792      	lsls	r2, r2, #30
 80063de:	bf58      	it	pl
 80063e0:	6963      	ldrpl	r3, [r4, #20]
 80063e2:	60a3      	str	r3, [r4, #8]
 80063e4:	e7f2      	b.n	80063cc <__swsetup_r+0xac>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e7f7      	b.n	80063da <__swsetup_r+0xba>
 80063ea:	bf00      	nop
 80063ec:	200000a4 	.word	0x200000a4
 80063f0:	08006fbc 	.word	0x08006fbc
 80063f4:	08006fdc 	.word	0x08006fdc
 80063f8:	08006f9c 	.word	0x08006f9c

080063fc <abort>:
 80063fc:	b508      	push	{r3, lr}
 80063fe:	2006      	movs	r0, #6
 8006400:	f000 fad4 	bl	80069ac <raise>
 8006404:	2001      	movs	r0, #1
 8006406:	f7ff fa5b 	bl	80058c0 <_exit>
	...

0800640c <__sflush_r>:
 800640c:	898a      	ldrh	r2, [r1, #12]
 800640e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006412:	4605      	mov	r5, r0
 8006414:	0710      	lsls	r0, r2, #28
 8006416:	460c      	mov	r4, r1
 8006418:	d45a      	bmi.n	80064d0 <__sflush_r+0xc4>
 800641a:	684b      	ldr	r3, [r1, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	dc05      	bgt.n	800642c <__sflush_r+0x20>
 8006420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	dc02      	bgt.n	800642c <__sflush_r+0x20>
 8006426:	2000      	movs	r0, #0
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800642e:	2e00      	cmp	r6, #0
 8006430:	d0f9      	beq.n	8006426 <__sflush_r+0x1a>
 8006432:	2300      	movs	r3, #0
 8006434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006438:	682f      	ldr	r7, [r5, #0]
 800643a:	602b      	str	r3, [r5, #0]
 800643c:	d033      	beq.n	80064a6 <__sflush_r+0x9a>
 800643e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	075a      	lsls	r2, r3, #29
 8006444:	d505      	bpl.n	8006452 <__sflush_r+0x46>
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	1ac0      	subs	r0, r0, r3
 800644a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800644c:	b10b      	cbz	r3, 8006452 <__sflush_r+0x46>
 800644e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006450:	1ac0      	subs	r0, r0, r3
 8006452:	2300      	movs	r3, #0
 8006454:	4602      	mov	r2, r0
 8006456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006458:	6a21      	ldr	r1, [r4, #32]
 800645a:	4628      	mov	r0, r5
 800645c:	47b0      	blx	r6
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	d106      	bne.n	8006472 <__sflush_r+0x66>
 8006464:	6829      	ldr	r1, [r5, #0]
 8006466:	291d      	cmp	r1, #29
 8006468:	d84b      	bhi.n	8006502 <__sflush_r+0xf6>
 800646a:	4a2b      	ldr	r2, [pc, #172]	; (8006518 <__sflush_r+0x10c>)
 800646c:	40ca      	lsrs	r2, r1
 800646e:	07d6      	lsls	r6, r2, #31
 8006470:	d547      	bpl.n	8006502 <__sflush_r+0xf6>
 8006472:	2200      	movs	r2, #0
 8006474:	6062      	str	r2, [r4, #4]
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	04d9      	lsls	r1, r3, #19
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	d504      	bpl.n	8006488 <__sflush_r+0x7c>
 800647e:	1c42      	adds	r2, r0, #1
 8006480:	d101      	bne.n	8006486 <__sflush_r+0x7a>
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	b903      	cbnz	r3, 8006488 <__sflush_r+0x7c>
 8006486:	6560      	str	r0, [r4, #84]	; 0x54
 8006488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648a:	602f      	str	r7, [r5, #0]
 800648c:	2900      	cmp	r1, #0
 800648e:	d0ca      	beq.n	8006426 <__sflush_r+0x1a>
 8006490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006494:	4299      	cmp	r1, r3
 8006496:	d002      	beq.n	800649e <__sflush_r+0x92>
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f9a5 	bl	80067e8 <_free_r>
 800649e:	2000      	movs	r0, #0
 80064a0:	6360      	str	r0, [r4, #52]	; 0x34
 80064a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a6:	6a21      	ldr	r1, [r4, #32]
 80064a8:	2301      	movs	r3, #1
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b0      	blx	r6
 80064ae:	1c41      	adds	r1, r0, #1
 80064b0:	d1c6      	bne.n	8006440 <__sflush_r+0x34>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0c3      	beq.n	8006440 <__sflush_r+0x34>
 80064b8:	2b1d      	cmp	r3, #29
 80064ba:	d001      	beq.n	80064c0 <__sflush_r+0xb4>
 80064bc:	2b16      	cmp	r3, #22
 80064be:	d101      	bne.n	80064c4 <__sflush_r+0xb8>
 80064c0:	602f      	str	r7, [r5, #0]
 80064c2:	e7b0      	b.n	8006426 <__sflush_r+0x1a>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	690f      	ldr	r7, [r1, #16]
 80064d2:	2f00      	cmp	r7, #0
 80064d4:	d0a7      	beq.n	8006426 <__sflush_r+0x1a>
 80064d6:	0793      	lsls	r3, r2, #30
 80064d8:	bf18      	it	ne
 80064da:	2300      	movne	r3, #0
 80064dc:	680e      	ldr	r6, [r1, #0]
 80064de:	bf08      	it	eq
 80064e0:	694b      	ldreq	r3, [r1, #20]
 80064e2:	eba6 0807 	sub.w	r8, r6, r7
 80064e6:	600f      	str	r7, [r1, #0]
 80064e8:	608b      	str	r3, [r1, #8]
 80064ea:	f1b8 0f00 	cmp.w	r8, #0
 80064ee:	dd9a      	ble.n	8006426 <__sflush_r+0x1a>
 80064f0:	4643      	mov	r3, r8
 80064f2:	463a      	mov	r2, r7
 80064f4:	6a21      	ldr	r1, [r4, #32]
 80064f6:	4628      	mov	r0, r5
 80064f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064fa:	47b0      	blx	r6
 80064fc:	2800      	cmp	r0, #0
 80064fe:	dc07      	bgt.n	8006510 <__sflush_r+0x104>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	4407      	add	r7, r0
 8006512:	eba8 0800 	sub.w	r8, r8, r0
 8006516:	e7e8      	b.n	80064ea <__sflush_r+0xde>
 8006518:	20400001 	.word	0x20400001

0800651c <_fflush_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	690b      	ldr	r3, [r1, #16]
 8006520:	4605      	mov	r5, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b1db      	cbz	r3, 800655e <_fflush_r+0x42>
 8006526:	b118      	cbz	r0, 8006530 <_fflush_r+0x14>
 8006528:	6983      	ldr	r3, [r0, #24]
 800652a:	b90b      	cbnz	r3, 8006530 <_fflush_r+0x14>
 800652c:	f000 f860 	bl	80065f0 <__sinit>
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <_fflush_r+0x48>)
 8006532:	429c      	cmp	r4, r3
 8006534:	d109      	bne.n	800654a <_fflush_r+0x2e>
 8006536:	686c      	ldr	r4, [r5, #4]
 8006538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653c:	b17b      	cbz	r3, 800655e <_fflush_r+0x42>
 800653e:	4621      	mov	r1, r4
 8006540:	4628      	mov	r0, r5
 8006542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006546:	f7ff bf61 	b.w	800640c <__sflush_r>
 800654a:	4b07      	ldr	r3, [pc, #28]	; (8006568 <_fflush_r+0x4c>)
 800654c:	429c      	cmp	r4, r3
 800654e:	d101      	bne.n	8006554 <_fflush_r+0x38>
 8006550:	68ac      	ldr	r4, [r5, #8]
 8006552:	e7f1      	b.n	8006538 <_fflush_r+0x1c>
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <_fflush_r+0x50>)
 8006556:	429c      	cmp	r4, r3
 8006558:	bf08      	it	eq
 800655a:	68ec      	ldreq	r4, [r5, #12]
 800655c:	e7ec      	b.n	8006538 <_fflush_r+0x1c>
 800655e:	2000      	movs	r0, #0
 8006560:	bd38      	pop	{r3, r4, r5, pc}
 8006562:	bf00      	nop
 8006564:	08006fbc 	.word	0x08006fbc
 8006568:	08006fdc 	.word	0x08006fdc
 800656c:	08006f9c 	.word	0x08006f9c

08006570 <_cleanup_r>:
 8006570:	4901      	ldr	r1, [pc, #4]	; (8006578 <_cleanup_r+0x8>)
 8006572:	f000 b8a9 	b.w	80066c8 <_fwalk_reent>
 8006576:	bf00      	nop
 8006578:	0800651d 	.word	0x0800651d

0800657c <std.isra.0>:
 800657c:	2300      	movs	r3, #0
 800657e:	b510      	push	{r4, lr}
 8006580:	4604      	mov	r4, r0
 8006582:	6003      	str	r3, [r0, #0]
 8006584:	6043      	str	r3, [r0, #4]
 8006586:	6083      	str	r3, [r0, #8]
 8006588:	8181      	strh	r1, [r0, #12]
 800658a:	6643      	str	r3, [r0, #100]	; 0x64
 800658c:	81c2      	strh	r2, [r0, #14]
 800658e:	6103      	str	r3, [r0, #16]
 8006590:	6143      	str	r3, [r0, #20]
 8006592:	6183      	str	r3, [r0, #24]
 8006594:	4619      	mov	r1, r3
 8006596:	2208      	movs	r2, #8
 8006598:	305c      	adds	r0, #92	; 0x5c
 800659a:	f7ff fb90 	bl	8005cbe <memset>
 800659e:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <std.isra.0+0x38>)
 80065a0:	6224      	str	r4, [r4, #32]
 80065a2:	6263      	str	r3, [r4, #36]	; 0x24
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <std.isra.0+0x3c>)
 80065a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <std.isra.0+0x40>)
 80065aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <std.isra.0+0x44>)
 80065ae:	6323      	str	r3, [r4, #48]	; 0x30
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	bf00      	nop
 80065b4:	080069e5 	.word	0x080069e5
 80065b8:	08006a07 	.word	0x08006a07
 80065bc:	08006a3f 	.word	0x08006a3f
 80065c0:	08006a63 	.word	0x08006a63

080065c4 <__sfmoreglue>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	2568      	movs	r5, #104	; 0x68
 80065c8:	1e4a      	subs	r2, r1, #1
 80065ca:	4355      	muls	r5, r2
 80065cc:	460e      	mov	r6, r1
 80065ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065d2:	f000 f955 	bl	8006880 <_malloc_r>
 80065d6:	4604      	mov	r4, r0
 80065d8:	b140      	cbz	r0, 80065ec <__sfmoreglue+0x28>
 80065da:	2100      	movs	r1, #0
 80065dc:	e880 0042 	stmia.w	r0, {r1, r6}
 80065e0:	300c      	adds	r0, #12
 80065e2:	60a0      	str	r0, [r4, #8]
 80065e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065e8:	f7ff fb69 	bl	8005cbe <memset>
 80065ec:	4620      	mov	r0, r4
 80065ee:	bd70      	pop	{r4, r5, r6, pc}

080065f0 <__sinit>:
 80065f0:	6983      	ldr	r3, [r0, #24]
 80065f2:	b510      	push	{r4, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	bb33      	cbnz	r3, 8006646 <__sinit+0x56>
 80065f8:	6483      	str	r3, [r0, #72]	; 0x48
 80065fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80065fc:	6503      	str	r3, [r0, #80]	; 0x50
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <__sinit+0x58>)
 8006600:	4a12      	ldr	r2, [pc, #72]	; (800664c <__sinit+0x5c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6282      	str	r2, [r0, #40]	; 0x28
 8006606:	4298      	cmp	r0, r3
 8006608:	bf04      	itt	eq
 800660a:	2301      	moveq	r3, #1
 800660c:	6183      	streq	r3, [r0, #24]
 800660e:	f000 f81f 	bl	8006650 <__sfp>
 8006612:	6060      	str	r0, [r4, #4]
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f81b 	bl	8006650 <__sfp>
 800661a:	60a0      	str	r0, [r4, #8]
 800661c:	4620      	mov	r0, r4
 800661e:	f000 f817 	bl	8006650 <__sfp>
 8006622:	2200      	movs	r2, #0
 8006624:	60e0      	str	r0, [r4, #12]
 8006626:	2104      	movs	r1, #4
 8006628:	6860      	ldr	r0, [r4, #4]
 800662a:	f7ff ffa7 	bl	800657c <std.isra.0>
 800662e:	2201      	movs	r2, #1
 8006630:	2109      	movs	r1, #9
 8006632:	68a0      	ldr	r0, [r4, #8]
 8006634:	f7ff ffa2 	bl	800657c <std.isra.0>
 8006638:	2202      	movs	r2, #2
 800663a:	2112      	movs	r1, #18
 800663c:	68e0      	ldr	r0, [r4, #12]
 800663e:	f7ff ff9d 	bl	800657c <std.isra.0>
 8006642:	2301      	movs	r3, #1
 8006644:	61a3      	str	r3, [r4, #24]
 8006646:	bd10      	pop	{r4, pc}
 8006648:	08006f64 	.word	0x08006f64
 800664c:	08006571 	.word	0x08006571

08006650 <__sfp>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <__sfp+0x74>)
 8006654:	4607      	mov	r7, r0
 8006656:	681e      	ldr	r6, [r3, #0]
 8006658:	69b3      	ldr	r3, [r6, #24]
 800665a:	b913      	cbnz	r3, 8006662 <__sfp+0x12>
 800665c:	4630      	mov	r0, r6
 800665e:	f7ff ffc7 	bl	80065f0 <__sinit>
 8006662:	3648      	adds	r6, #72	; 0x48
 8006664:	68b4      	ldr	r4, [r6, #8]
 8006666:	6873      	ldr	r3, [r6, #4]
 8006668:	3b01      	subs	r3, #1
 800666a:	d503      	bpl.n	8006674 <__sfp+0x24>
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	b133      	cbz	r3, 800667e <__sfp+0x2e>
 8006670:	6836      	ldr	r6, [r6, #0]
 8006672:	e7f7      	b.n	8006664 <__sfp+0x14>
 8006674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006678:	b16d      	cbz	r5, 8006696 <__sfp+0x46>
 800667a:	3468      	adds	r4, #104	; 0x68
 800667c:	e7f4      	b.n	8006668 <__sfp+0x18>
 800667e:	2104      	movs	r1, #4
 8006680:	4638      	mov	r0, r7
 8006682:	f7ff ff9f 	bl	80065c4 <__sfmoreglue>
 8006686:	6030      	str	r0, [r6, #0]
 8006688:	2800      	cmp	r0, #0
 800668a:	d1f1      	bne.n	8006670 <__sfp+0x20>
 800668c:	230c      	movs	r3, #12
 800668e:	4604      	mov	r4, r0
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	4620      	mov	r0, r4
 8006694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800669a:	81e3      	strh	r3, [r4, #14]
 800669c:	2301      	movs	r3, #1
 800669e:	6665      	str	r5, [r4, #100]	; 0x64
 80066a0:	81a3      	strh	r3, [r4, #12]
 80066a2:	6025      	str	r5, [r4, #0]
 80066a4:	60a5      	str	r5, [r4, #8]
 80066a6:	6065      	str	r5, [r4, #4]
 80066a8:	6125      	str	r5, [r4, #16]
 80066aa:	6165      	str	r5, [r4, #20]
 80066ac:	61a5      	str	r5, [r4, #24]
 80066ae:	2208      	movs	r2, #8
 80066b0:	4629      	mov	r1, r5
 80066b2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066b6:	f7ff fb02 	bl	8005cbe <memset>
 80066ba:	6365      	str	r5, [r4, #52]	; 0x34
 80066bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80066be:	64a5      	str	r5, [r4, #72]	; 0x48
 80066c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80066c2:	e7e6      	b.n	8006692 <__sfp+0x42>
 80066c4:	08006f64 	.word	0x08006f64

080066c8 <_fwalk_reent>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	4680      	mov	r8, r0
 80066ce:	4689      	mov	r9, r1
 80066d0:	2600      	movs	r6, #0
 80066d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066d6:	b914      	cbnz	r4, 80066de <_fwalk_reent+0x16>
 80066d8:	4630      	mov	r0, r6
 80066da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066de:	68a5      	ldr	r5, [r4, #8]
 80066e0:	6867      	ldr	r7, [r4, #4]
 80066e2:	3f01      	subs	r7, #1
 80066e4:	d501      	bpl.n	80066ea <_fwalk_reent+0x22>
 80066e6:	6824      	ldr	r4, [r4, #0]
 80066e8:	e7f5      	b.n	80066d6 <_fwalk_reent+0xe>
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d907      	bls.n	8006700 <_fwalk_reent+0x38>
 80066f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066f4:	3301      	adds	r3, #1
 80066f6:	d003      	beq.n	8006700 <_fwalk_reent+0x38>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4640      	mov	r0, r8
 80066fc:	47c8      	blx	r9
 80066fe:	4306      	orrs	r6, r0
 8006700:	3568      	adds	r5, #104	; 0x68
 8006702:	e7ee      	b.n	80066e2 <_fwalk_reent+0x1a>

08006704 <__swhatbuf_r>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	460e      	mov	r6, r1
 8006708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670c:	b090      	sub	sp, #64	; 0x40
 800670e:	2900      	cmp	r1, #0
 8006710:	4614      	mov	r4, r2
 8006712:	461d      	mov	r5, r3
 8006714:	da07      	bge.n	8006726 <__swhatbuf_r+0x22>
 8006716:	2300      	movs	r3, #0
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	89b3      	ldrh	r3, [r6, #12]
 800671c:	061a      	lsls	r2, r3, #24
 800671e:	d410      	bmi.n	8006742 <__swhatbuf_r+0x3e>
 8006720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006724:	e00e      	b.n	8006744 <__swhatbuf_r+0x40>
 8006726:	aa01      	add	r2, sp, #4
 8006728:	f000 f9c2 	bl	8006ab0 <_fstat_r>
 800672c:	2800      	cmp	r0, #0
 800672e:	dbf2      	blt.n	8006716 <__swhatbuf_r+0x12>
 8006730:	9a02      	ldr	r2, [sp, #8]
 8006732:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006736:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800673a:	425a      	negs	r2, r3
 800673c:	415a      	adcs	r2, r3
 800673e:	602a      	str	r2, [r5, #0]
 8006740:	e7ee      	b.n	8006720 <__swhatbuf_r+0x1c>
 8006742:	2340      	movs	r3, #64	; 0x40
 8006744:	2000      	movs	r0, #0
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	b010      	add	sp, #64	; 0x40
 800674a:	bd70      	pop	{r4, r5, r6, pc}

0800674c <__smakebuf_r>:
 800674c:	898b      	ldrh	r3, [r1, #12]
 800674e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006750:	079d      	lsls	r5, r3, #30
 8006752:	4606      	mov	r6, r0
 8006754:	460c      	mov	r4, r1
 8006756:	d507      	bpl.n	8006768 <__smakebuf_r+0x1c>
 8006758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	2301      	movs	r3, #1
 8006762:	6163      	str	r3, [r4, #20]
 8006764:	b002      	add	sp, #8
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	ab01      	add	r3, sp, #4
 800676a:	466a      	mov	r2, sp
 800676c:	f7ff ffca 	bl	8006704 <__swhatbuf_r>
 8006770:	9900      	ldr	r1, [sp, #0]
 8006772:	4605      	mov	r5, r0
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f883 	bl	8006880 <_malloc_r>
 800677a:	b948      	cbnz	r0, 8006790 <__smakebuf_r+0x44>
 800677c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006780:	059a      	lsls	r2, r3, #22
 8006782:	d4ef      	bmi.n	8006764 <__smakebuf_r+0x18>
 8006784:	f023 0303 	bic.w	r3, r3, #3
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	e7e3      	b.n	8006758 <__smakebuf_r+0xc>
 8006790:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <__smakebuf_r+0x7c>)
 8006792:	62b3      	str	r3, [r6, #40]	; 0x28
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	6020      	str	r0, [r4, #0]
 8006798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	9b00      	ldr	r3, [sp, #0]
 80067a0:	6120      	str	r0, [r4, #16]
 80067a2:	6163      	str	r3, [r4, #20]
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	b15b      	cbz	r3, 80067c0 <__smakebuf_r+0x74>
 80067a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ac:	4630      	mov	r0, r6
 80067ae:	f000 f991 	bl	8006ad4 <_isatty_r>
 80067b2:	b128      	cbz	r0, 80067c0 <__smakebuf_r+0x74>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	431d      	orrs	r5, r3
 80067c4:	81a5      	strh	r5, [r4, #12]
 80067c6:	e7cd      	b.n	8006764 <__smakebuf_r+0x18>
 80067c8:	08006571 	.word	0x08006571

080067cc <memchr>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	b2c9      	uxtb	r1, r1
 80067d0:	4402      	add	r2, r0
 80067d2:	4290      	cmp	r0, r2
 80067d4:	4603      	mov	r3, r0
 80067d6:	d101      	bne.n	80067dc <memchr+0x10>
 80067d8:	2000      	movs	r0, #0
 80067da:	bd10      	pop	{r4, pc}
 80067dc:	781c      	ldrb	r4, [r3, #0]
 80067de:	3001      	adds	r0, #1
 80067e0:	428c      	cmp	r4, r1
 80067e2:	d1f6      	bne.n	80067d2 <memchr+0x6>
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd10      	pop	{r4, pc}

080067e8 <_free_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4605      	mov	r5, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d043      	beq.n	8006878 <_free_r+0x90>
 80067f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f4:	1f0c      	subs	r4, r1, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfb8      	it	lt
 80067fa:	18e4      	addlt	r4, r4, r3
 80067fc:	f000 f98c 	bl	8006b18 <__malloc_lock>
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <_free_r+0x94>)
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	4610      	mov	r0, r2
 8006806:	b933      	cbnz	r3, 8006816 <_free_r+0x2e>
 8006808:	6063      	str	r3, [r4, #4]
 800680a:	6014      	str	r4, [r2, #0]
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006812:	f000 b982 	b.w	8006b1a <__malloc_unlock>
 8006816:	42a3      	cmp	r3, r4
 8006818:	d90b      	bls.n	8006832 <_free_r+0x4a>
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	1862      	adds	r2, r4, r1
 800681e:	4293      	cmp	r3, r2
 8006820:	bf01      	itttt	eq
 8006822:	681a      	ldreq	r2, [r3, #0]
 8006824:	685b      	ldreq	r3, [r3, #4]
 8006826:	1852      	addeq	r2, r2, r1
 8006828:	6022      	streq	r2, [r4, #0]
 800682a:	6063      	str	r3, [r4, #4]
 800682c:	6004      	str	r4, [r0, #0]
 800682e:	e7ed      	b.n	800680c <_free_r+0x24>
 8006830:	4613      	mov	r3, r2
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	b10a      	cbz	r2, 800683a <_free_r+0x52>
 8006836:	42a2      	cmp	r2, r4
 8006838:	d9fa      	bls.n	8006830 <_free_r+0x48>
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	1858      	adds	r0, r3, r1
 800683e:	42a0      	cmp	r0, r4
 8006840:	d10b      	bne.n	800685a <_free_r+0x72>
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	4401      	add	r1, r0
 8006846:	1858      	adds	r0, r3, r1
 8006848:	4282      	cmp	r2, r0
 800684a:	6019      	str	r1, [r3, #0]
 800684c:	d1de      	bne.n	800680c <_free_r+0x24>
 800684e:	6810      	ldr	r0, [r2, #0]
 8006850:	6852      	ldr	r2, [r2, #4]
 8006852:	4401      	add	r1, r0
 8006854:	6019      	str	r1, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	e7d8      	b.n	800680c <_free_r+0x24>
 800685a:	d902      	bls.n	8006862 <_free_r+0x7a>
 800685c:	230c      	movs	r3, #12
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	e7d4      	b.n	800680c <_free_r+0x24>
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1821      	adds	r1, r4, r0
 8006866:	428a      	cmp	r2, r1
 8006868:	bf01      	itttt	eq
 800686a:	6811      	ldreq	r1, [r2, #0]
 800686c:	6852      	ldreq	r2, [r2, #4]
 800686e:	1809      	addeq	r1, r1, r0
 8006870:	6021      	streq	r1, [r4, #0]
 8006872:	6062      	str	r2, [r4, #4]
 8006874:	605c      	str	r4, [r3, #4]
 8006876:	e7c9      	b.n	800680c <_free_r+0x24>
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	20005394 	.word	0x20005394

08006880 <_malloc_r>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	1ccd      	adds	r5, r1, #3
 8006884:	f025 0503 	bic.w	r5, r5, #3
 8006888:	3508      	adds	r5, #8
 800688a:	2d0c      	cmp	r5, #12
 800688c:	bf38      	it	cc
 800688e:	250c      	movcc	r5, #12
 8006890:	2d00      	cmp	r5, #0
 8006892:	4606      	mov	r6, r0
 8006894:	db01      	blt.n	800689a <_malloc_r+0x1a>
 8006896:	42a9      	cmp	r1, r5
 8006898:	d903      	bls.n	80068a2 <_malloc_r+0x22>
 800689a:	230c      	movs	r3, #12
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	2000      	movs	r0, #0
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
 80068a2:	f000 f939 	bl	8006b18 <__malloc_lock>
 80068a6:	4a23      	ldr	r2, [pc, #140]	; (8006934 <_malloc_r+0xb4>)
 80068a8:	6814      	ldr	r4, [r2, #0]
 80068aa:	4621      	mov	r1, r4
 80068ac:	b991      	cbnz	r1, 80068d4 <_malloc_r+0x54>
 80068ae:	4c22      	ldr	r4, [pc, #136]	; (8006938 <_malloc_r+0xb8>)
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	b91b      	cbnz	r3, 80068bc <_malloc_r+0x3c>
 80068b4:	4630      	mov	r0, r6
 80068b6:	f000 f841 	bl	800693c <_sbrk_r>
 80068ba:	6020      	str	r0, [r4, #0]
 80068bc:	4629      	mov	r1, r5
 80068be:	4630      	mov	r0, r6
 80068c0:	f000 f83c 	bl	800693c <_sbrk_r>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d126      	bne.n	8006916 <_malloc_r+0x96>
 80068c8:	230c      	movs	r3, #12
 80068ca:	4630      	mov	r0, r6
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	f000 f924 	bl	8006b1a <__malloc_unlock>
 80068d2:	e7e4      	b.n	800689e <_malloc_r+0x1e>
 80068d4:	680b      	ldr	r3, [r1, #0]
 80068d6:	1b5b      	subs	r3, r3, r5
 80068d8:	d41a      	bmi.n	8006910 <_malloc_r+0x90>
 80068da:	2b0b      	cmp	r3, #11
 80068dc:	d90f      	bls.n	80068fe <_malloc_r+0x7e>
 80068de:	600b      	str	r3, [r1, #0]
 80068e0:	18cc      	adds	r4, r1, r3
 80068e2:	50cd      	str	r5, [r1, r3]
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 f918 	bl	8006b1a <__malloc_unlock>
 80068ea:	f104 000b 	add.w	r0, r4, #11
 80068ee:	1d23      	adds	r3, r4, #4
 80068f0:	f020 0007 	bic.w	r0, r0, #7
 80068f4:	1ac3      	subs	r3, r0, r3
 80068f6:	d01b      	beq.n	8006930 <_malloc_r+0xb0>
 80068f8:	425a      	negs	r2, r3
 80068fa:	50e2      	str	r2, [r4, r3]
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	428c      	cmp	r4, r1
 8006900:	bf0b      	itete	eq
 8006902:	6863      	ldreq	r3, [r4, #4]
 8006904:	684b      	ldrne	r3, [r1, #4]
 8006906:	6013      	streq	r3, [r2, #0]
 8006908:	6063      	strne	r3, [r4, #4]
 800690a:	bf18      	it	ne
 800690c:	460c      	movne	r4, r1
 800690e:	e7e9      	b.n	80068e4 <_malloc_r+0x64>
 8006910:	460c      	mov	r4, r1
 8006912:	6849      	ldr	r1, [r1, #4]
 8006914:	e7ca      	b.n	80068ac <_malloc_r+0x2c>
 8006916:	1cc4      	adds	r4, r0, #3
 8006918:	f024 0403 	bic.w	r4, r4, #3
 800691c:	42a0      	cmp	r0, r4
 800691e:	d005      	beq.n	800692c <_malloc_r+0xac>
 8006920:	1a21      	subs	r1, r4, r0
 8006922:	4630      	mov	r0, r6
 8006924:	f000 f80a 	bl	800693c <_sbrk_r>
 8006928:	3001      	adds	r0, #1
 800692a:	d0cd      	beq.n	80068c8 <_malloc_r+0x48>
 800692c:	6025      	str	r5, [r4, #0]
 800692e:	e7d9      	b.n	80068e4 <_malloc_r+0x64>
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	bf00      	nop
 8006934:	20005394 	.word	0x20005394
 8006938:	20005398 	.word	0x20005398

0800693c <_sbrk_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	2300      	movs	r3, #0
 8006940:	4c05      	ldr	r4, [pc, #20]	; (8006958 <_sbrk_r+0x1c>)
 8006942:	4605      	mov	r5, r0
 8006944:	4608      	mov	r0, r1
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	f7fe ffdc 	bl	8005904 <_sbrk>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_sbrk_r+0x1a>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	b103      	cbz	r3, 8006956 <_sbrk_r+0x1a>
 8006954:	602b      	str	r3, [r5, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	200055ac 	.word	0x200055ac

0800695c <_raise_r>:
 800695c:	291f      	cmp	r1, #31
 800695e:	b538      	push	{r3, r4, r5, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	460d      	mov	r5, r1
 8006964:	d904      	bls.n	8006970 <_raise_r+0x14>
 8006966:	2316      	movs	r3, #22
 8006968:	6003      	str	r3, [r0, #0]
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006972:	b112      	cbz	r2, 800697a <_raise_r+0x1e>
 8006974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006978:	b94b      	cbnz	r3, 800698e <_raise_r+0x32>
 800697a:	4620      	mov	r0, r4
 800697c:	f000 f830 	bl	80069e0 <_getpid_r>
 8006980:	462a      	mov	r2, r5
 8006982:	4601      	mov	r1, r0
 8006984:	4620      	mov	r0, r4
 8006986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800698a:	f000 b817 	b.w	80069bc <_kill_r>
 800698e:	2b01      	cmp	r3, #1
 8006990:	d00a      	beq.n	80069a8 <_raise_r+0x4c>
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	d103      	bne.n	800699e <_raise_r+0x42>
 8006996:	2316      	movs	r3, #22
 8006998:	6003      	str	r3, [r0, #0]
 800699a:	2001      	movs	r0, #1
 800699c:	bd38      	pop	{r3, r4, r5, pc}
 800699e:	2400      	movs	r4, #0
 80069a0:	4628      	mov	r0, r5
 80069a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069a6:	4798      	blx	r3
 80069a8:	2000      	movs	r0, #0
 80069aa:	bd38      	pop	{r3, r4, r5, pc}

080069ac <raise>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <raise+0xc>)
 80069ae:	4601      	mov	r1, r0
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	f7ff bfd3 	b.w	800695c <_raise_r>
 80069b6:	bf00      	nop
 80069b8:	200000a4 	.word	0x200000a4

080069bc <_kill_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	2300      	movs	r3, #0
 80069c0:	4c06      	ldr	r4, [pc, #24]	; (80069dc <_kill_r+0x20>)
 80069c2:	4605      	mov	r5, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	f7fe ff71 	bl	80058b0 <_kill>
 80069ce:	1c43      	adds	r3, r0, #1
 80069d0:	d102      	bne.n	80069d8 <_kill_r+0x1c>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	b103      	cbz	r3, 80069d8 <_kill_r+0x1c>
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	bd38      	pop	{r3, r4, r5, pc}
 80069da:	bf00      	nop
 80069dc:	200055ac 	.word	0x200055ac

080069e0 <_getpid_r>:
 80069e0:	f7fe bf64 	b.w	80058ac <_getpid>

080069e4 <__sread>:
 80069e4:	b510      	push	{r4, lr}
 80069e6:	460c      	mov	r4, r1
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	f000 f896 	bl	8006b1c <_read_r>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	bfab      	itete	ge
 80069f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069f6:	89a3      	ldrhlt	r3, [r4, #12]
 80069f8:	181b      	addge	r3, r3, r0
 80069fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069fe:	bfac      	ite	ge
 8006a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a02:	81a3      	strhlt	r3, [r4, #12]
 8006a04:	bd10      	pop	{r4, pc}

08006a06 <__swrite>:
 8006a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	461f      	mov	r7, r3
 8006a0c:	898b      	ldrh	r3, [r1, #12]
 8006a0e:	4605      	mov	r5, r0
 8006a10:	05db      	lsls	r3, r3, #23
 8006a12:	460c      	mov	r4, r1
 8006a14:	4616      	mov	r6, r2
 8006a16:	d505      	bpl.n	8006a24 <__swrite+0x1e>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a20:	f000 f868 	bl	8006af4 <_lseek_r>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	4632      	mov	r2, r6
 8006a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a32:	463b      	mov	r3, r7
 8006a34:	4628      	mov	r0, r5
 8006a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3a:	f000 b817 	b.w	8006a6c <_write_r>

08006a3e <__sseek>:
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	460c      	mov	r4, r1
 8006a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a46:	f000 f855 	bl	8006af4 <_lseek_r>
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	bf15      	itete	ne
 8006a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a5a:	81a3      	strheq	r3, [r4, #12]
 8006a5c:	bf18      	it	ne
 8006a5e:	81a3      	strhne	r3, [r4, #12]
 8006a60:	bd10      	pop	{r4, pc}

08006a62 <__sclose>:
 8006a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a66:	f000 b813 	b.w	8006a90 <_close_r>
	...

08006a6c <_write_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4605      	mov	r5, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	4611      	mov	r1, r2
 8006a74:	2200      	movs	r2, #0
 8006a76:	4c05      	ldr	r4, [pc, #20]	; (8006a8c <_write_r+0x20>)
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f7fe ff34 	bl	80058e8 <_write>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_write_r+0x1e>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_write_r+0x1e>
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	200055ac 	.word	0x200055ac

08006a90 <_close_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	2300      	movs	r3, #0
 8006a94:	4c05      	ldr	r4, [pc, #20]	; (8006aac <_close_r+0x1c>)
 8006a96:	4605      	mov	r5, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	f7fe ff4c 	bl	8005938 <_close>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d102      	bne.n	8006aaa <_close_r+0x1a>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	b103      	cbz	r3, 8006aaa <_close_r+0x1a>
 8006aa8:	602b      	str	r3, [r5, #0]
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	200055ac 	.word	0x200055ac

08006ab0 <_fstat_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4c06      	ldr	r4, [pc, #24]	; (8006ad0 <_fstat_r+0x20>)
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	f7fe ff3e 	bl	800593e <_fstat>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d102      	bne.n	8006acc <_fstat_r+0x1c>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	b103      	cbz	r3, 8006acc <_fstat_r+0x1c>
 8006aca:	602b      	str	r3, [r5, #0]
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	bf00      	nop
 8006ad0:	200055ac 	.word	0x200055ac

08006ad4 <_isatty_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4c05      	ldr	r4, [pc, #20]	; (8006af0 <_isatty_r+0x1c>)
 8006ada:	4605      	mov	r5, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	f7fe ff32 	bl	8005948 <_isatty>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	d102      	bne.n	8006aee <_isatty_r+0x1a>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	b103      	cbz	r3, 8006aee <_isatty_r+0x1a>
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	200055ac 	.word	0x200055ac

08006af4 <_lseek_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4605      	mov	r5, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	4611      	mov	r1, r2
 8006afc:	2200      	movs	r2, #0
 8006afe:	4c05      	ldr	r4, [pc, #20]	; (8006b14 <_lseek_r+0x20>)
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f7fe ff22 	bl	800594c <_lseek>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_lseek_r+0x1e>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_lseek_r+0x1e>
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	200055ac 	.word	0x200055ac

08006b18 <__malloc_lock>:
 8006b18:	4770      	bx	lr

08006b1a <__malloc_unlock>:
 8006b1a:	4770      	bx	lr

08006b1c <_read_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4605      	mov	r5, r0
 8006b20:	4608      	mov	r0, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	2200      	movs	r2, #0
 8006b26:	4c05      	ldr	r4, [pc, #20]	; (8006b3c <_read_r+0x20>)
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fe fece 	bl	80058cc <_read>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_read_r+0x1e>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_read_r+0x1e>
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	200055ac 	.word	0x200055ac

08006b40 <_init>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	bf00      	nop
 8006b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b46:	bc08      	pop	{r3}
 8006b48:	469e      	mov	lr, r3
 8006b4a:	4770      	bx	lr

08006b4c <_fini>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	bf00      	nop
 8006b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b52:	bc08      	pop	{r3}
 8006b54:	469e      	mov	lr, r3
 8006b56:	4770      	bx	lr
