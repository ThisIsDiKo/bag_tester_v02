
bag_tester_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e9c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  20000000  08007540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005510  20000108  08007648  00020108  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20005618  08007648  00025618  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ced2  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006d08  00000000  00000000  0004d003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ed99  00000000  00000000  00053d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001560  00000000  00000000  00062aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001998  00000000  00000000  00064008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ddb6  00000000  00000000  000659a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007a68  00000000  00000000  00073756  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007b1be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046b4  00000000  00000000  0007b23c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000108 	.word	0x20000108
 800020c:	00000000 	.word	0x00000000
 8000210:	08007074 	.word	0x08007074

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000010c 	.word	0x2000010c
 800022c:	08007074 	.word	0x08007074

08000230 <__aeabi_llsr>:
 8000230:	40d0      	lsrs	r0, r2
 8000232:	1c0b      	adds	r3, r1, #0
 8000234:	40d1      	lsrs	r1, r2
 8000236:	469c      	mov	ip, r3
 8000238:	3a20      	subs	r2, #32
 800023a:	40d3      	lsrs	r3, r2
 800023c:	4318      	orrs	r0, r3
 800023e:	4252      	negs	r2, r2
 8000240:	4663      	mov	r3, ip
 8000242:	4093      	lsls	r3, r2
 8000244:	4318      	orrs	r0, r3
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	; 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000386:	f1a4 0401 	sub.w	r4, r4, #1
 800038a:	d1e9      	bne.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f092 0f00 	teq	r2, #0
 8000532:	bf14      	ite	ne
 8000534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e720      	b.n	800038c <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aedc 	beq.w	800033a <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6c1      	b.n	800033a <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2iz>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e4:	d215      	bcs.n	8000a12 <__aeabi_d2iz+0x36>
 80009e6:	d511      	bpl.n	8000a0c <__aeabi_d2iz+0x30>
 80009e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f0:	d912      	bls.n	8000a18 <__aeabi_d2iz+0x3c>
 80009f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a02:	fa23 f002 	lsr.w	r0, r3, r2
 8000a06:	bf18      	it	ne
 8000a08:	4240      	negne	r0, r0
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a16:	d105      	bne.n	8000a24 <__aeabi_d2iz+0x48>
 8000a18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	bf08      	it	eq
 8000a1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_frsub>:
 8000a2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a30:	e002      	b.n	8000a38 <__addsf3>
 8000a32:	bf00      	nop

08000a34 <__aeabi_fsub>:
 8000a34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a38 <__addsf3>:
 8000a38:	0042      	lsls	r2, r0, #1
 8000a3a:	bf1f      	itttt	ne
 8000a3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a40:	ea92 0f03 	teqne	r2, r3
 8000a44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4c:	d06a      	beq.n	8000b24 <__addsf3+0xec>
 8000a4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a56:	bfc1      	itttt	gt
 8000a58:	18d2      	addgt	r2, r2, r3
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	4048      	eorgt	r0, r1
 8000a5e:	4041      	eorgt	r1, r0
 8000a60:	bfb8      	it	lt
 8000a62:	425b      	neglt	r3, r3
 8000a64:	2b19      	cmp	r3, #25
 8000a66:	bf88      	it	hi
 8000a68:	4770      	bxhi	lr
 8000a6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4249      	negne	r1, r1
 8000a8a:	ea92 0f03 	teq	r2, r3
 8000a8e:	d03f      	beq.n	8000b10 <__addsf3+0xd8>
 8000a90:	f1a2 0201 	sub.w	r2, r2, #1
 8000a94:	fa41 fc03 	asr.w	ip, r1, r3
 8000a98:	eb10 000c 	adds.w	r0, r0, ip
 8000a9c:	f1c3 0320 	rsb	r3, r3, #32
 8000aa0:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa8:	d502      	bpl.n	8000ab0 <__addsf3+0x78>
 8000aaa:	4249      	negs	r1, r1
 8000aac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab4:	d313      	bcc.n	8000ade <__addsf3+0xa6>
 8000ab6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aba:	d306      	bcc.n	8000aca <__addsf3+0x92>
 8000abc:	0840      	lsrs	r0, r0, #1
 8000abe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ac2:	f102 0201 	add.w	r2, r2, #1
 8000ac6:	2afe      	cmp	r2, #254	; 0xfe
 8000ac8:	d251      	bcs.n	8000b6e <__addsf3+0x136>
 8000aca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ace:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ad2:	bf08      	it	eq
 8000ad4:	f020 0001 	biceq.w	r0, r0, #1
 8000ad8:	ea40 0003 	orr.w	r0, r0, r3
 8000adc:	4770      	bx	lr
 8000ade:	0049      	lsls	r1, r1, #1
 8000ae0:	eb40 0000 	adc.w	r0, r0, r0
 8000ae4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ae8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aec:	d1ed      	bne.n	8000aca <__addsf3+0x92>
 8000aee:	fab0 fc80 	clz	ip, r0
 8000af2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af6:	ebb2 020c 	subs.w	r2, r2, ip
 8000afa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afe:	bfaa      	itet	ge
 8000b00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b04:	4252      	neglt	r2, r2
 8000b06:	4318      	orrge	r0, r3
 8000b08:	bfbc      	itt	lt
 8000b0a:	40d0      	lsrlt	r0, r2
 8000b0c:	4318      	orrlt	r0, r3
 8000b0e:	4770      	bx	lr
 8000b10:	f092 0f00 	teq	r2, #0
 8000b14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b18:	bf06      	itte	eq
 8000b1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1e:	3201      	addeq	r2, #1
 8000b20:	3b01      	subne	r3, #1
 8000b22:	e7b5      	b.n	8000a90 <__addsf3+0x58>
 8000b24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b2c:	bf18      	it	ne
 8000b2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b32:	d021      	beq.n	8000b78 <__addsf3+0x140>
 8000b34:	ea92 0f03 	teq	r2, r3
 8000b38:	d004      	beq.n	8000b44 <__addsf3+0x10c>
 8000b3a:	f092 0f00 	teq	r2, #0
 8000b3e:	bf08      	it	eq
 8000b40:	4608      	moveq	r0, r1
 8000b42:	4770      	bx	lr
 8000b44:	ea90 0f01 	teq	r0, r1
 8000b48:	bf1c      	itt	ne
 8000b4a:	2000      	movne	r0, #0
 8000b4c:	4770      	bxne	lr
 8000b4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b52:	d104      	bne.n	8000b5e <__addsf3+0x126>
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	bf28      	it	cs
 8000b58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	4770      	bx	lr
 8000b5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b62:	bf3c      	itt	cc
 8000b64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bxcc	lr
 8000b6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b7c:	bf16      	itet	ne
 8000b7e:	4608      	movne	r0, r1
 8000b80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b84:	4601      	movne	r1, r0
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	bf06      	itte	eq
 8000b8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8e:	ea90 0f01 	teqeq	r0, r1
 8000b92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_ui2f>:
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	e004      	b.n	8000ba8 <__aeabi_i2f+0x8>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_i2f>:
 8000ba0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	bf48      	it	mi
 8000ba6:	4240      	negmi	r0, r0
 8000ba8:	ea5f 0c00 	movs.w	ip, r0
 8000bac:	bf08      	it	eq
 8000bae:	4770      	bxeq	lr
 8000bb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	e01c      	b.n	8000bf6 <__aeabi_l2f+0x2a>

08000bbc <__aeabi_ul2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e00a      	b.n	8000be0 <__aeabi_l2f+0x14>
 8000bca:	bf00      	nop

08000bcc <__aeabi_l2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__aeabi_l2f+0x14>
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	ea5f 0c01 	movs.w	ip, r1
 8000be4:	bf02      	ittt	eq
 8000be6:	4684      	moveq	ip, r0
 8000be8:	4601      	moveq	r1, r0
 8000bea:	2000      	moveq	r0, #0
 8000bec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bfa:	fabc f28c 	clz	r2, ip
 8000bfe:	3a08      	subs	r2, #8
 8000c00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c04:	db10      	blt.n	8000c28 <__aeabi_l2f+0x5c>
 8000c06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c18:	fa20 f202 	lsr.w	r2, r0, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f102 0220 	add.w	r2, r2, #32
 8000c2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c38:	fa21 f202 	lsr.w	r2, r1, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_fmul>:
 8000c48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c50:	bf1e      	ittt	ne
 8000c52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c56:	ea92 0f0c 	teqne	r2, ip
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d06f      	beq.n	8000d40 <__aeabi_fmul+0xf8>
 8000c60:	441a      	add	r2, r3
 8000c62:	ea80 0c01 	eor.w	ip, r0, r1
 8000c66:	0240      	lsls	r0, r0, #9
 8000c68:	bf18      	it	ne
 8000c6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6e:	d01e      	beq.n	8000cae <__aeabi_fmul+0x66>
 8000c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c88:	bf3e      	ittt	cc
 8000c8a:	0049      	lslcc	r1, r1, #1
 8000c8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c90:	005b      	lslcc	r3, r3, #1
 8000c92:	ea40 0001 	orr.w	r0, r0, r1
 8000c96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c9a:	2afd      	cmp	r2, #253	; 0xfd
 8000c9c:	d81d      	bhi.n	8000cda <__aeabi_fmul+0x92>
 8000c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	4770      	bx	lr
 8000cae:	f090 0f00 	teq	r0, #0
 8000cb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb6:	bf08      	it	eq
 8000cb8:	0249      	lsleq	r1, r1, #9
 8000cba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cc2:	3a7f      	subs	r2, #127	; 0x7f
 8000cc4:	bfc2      	ittt	gt
 8000cc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cce:	4770      	bxgt	lr
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	dc5d      	bgt.n	8000d98 <__aeabi_fmul+0x150>
 8000cdc:	f112 0f19 	cmn.w	r2, #25
 8000ce0:	bfdc      	itt	le
 8000ce2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce6:	4770      	bxle	lr
 8000ce8:	f1c2 0200 	rsb	r2, r2, #0
 8000cec:	0041      	lsls	r1, r0, #1
 8000cee:	fa21 f102 	lsr.w	r1, r1, r2
 8000cf2:	f1c2 0220 	rsb	r2, r2, #32
 8000cf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfe:	f140 0000 	adc.w	r0, r0, #0
 8000d02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d06:	bf08      	it	eq
 8000d08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0c:	4770      	bx	lr
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0040      	lsleq	r0, r0, #1
 8000d1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1e:	3a01      	subeq	r2, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fmul+0xce>
 8000d22:	ea40 000c 	orr.w	r0, r0, ip
 8000d26:	f093 0f00 	teq	r3, #0
 8000d2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2e:	bf02      	ittt	eq
 8000d30:	0049      	lsleq	r1, r1, #1
 8000d32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d36:	3b01      	subeq	r3, #1
 8000d38:	d0f9      	beq.n	8000d2e <__aeabi_fmul+0xe6>
 8000d3a:	ea41 010c 	orr.w	r1, r1, ip
 8000d3e:	e78f      	b.n	8000c60 <__aeabi_fmul+0x18>
 8000d40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d44:	ea92 0f0c 	teq	r2, ip
 8000d48:	bf18      	it	ne
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d00a      	beq.n	8000d66 <__aeabi_fmul+0x11e>
 8000d50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d54:	bf18      	it	ne
 8000d56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d5a:	d1d8      	bne.n	8000d0e <__aeabi_fmul+0xc6>
 8000d5c:	ea80 0001 	eor.w	r0, r0, r1
 8000d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d64:	4770      	bx	lr
 8000d66:	f090 0f00 	teq	r0, #0
 8000d6a:	bf17      	itett	ne
 8000d6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d70:	4608      	moveq	r0, r1
 8000d72:	f091 0f00 	teqne	r1, #0
 8000d76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d7a:	d014      	beq.n	8000da6 <__aeabi_fmul+0x15e>
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	d101      	bne.n	8000d86 <__aeabi_fmul+0x13e>
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	d10f      	bne.n	8000da6 <__aeabi_fmul+0x15e>
 8000d86:	ea93 0f0c 	teq	r3, ip
 8000d8a:	d103      	bne.n	8000d94 <__aeabi_fmul+0x14c>
 8000d8c:	024b      	lsls	r3, r1, #9
 8000d8e:	bf18      	it	ne
 8000d90:	4608      	movne	r0, r1
 8000d92:	d108      	bne.n	8000da6 <__aeabi_fmul+0x15e>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000daa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_fdiv>:
 8000db0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db8:	bf1e      	ittt	ne
 8000dba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dbe:	ea92 0f0c 	teqne	r2, ip
 8000dc2:	ea93 0f0c 	teqne	r3, ip
 8000dc6:	d069      	beq.n	8000e9c <__aeabi_fdiv+0xec>
 8000dc8:	eba2 0203 	sub.w	r2, r2, r3
 8000dcc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd0:	0249      	lsls	r1, r1, #9
 8000dd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd6:	d037      	beq.n	8000e48 <__aeabi_fdiv+0x98>
 8000dd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ddc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de8:	428b      	cmp	r3, r1
 8000dea:	bf38      	it	cc
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000df2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df6:	428b      	cmp	r3, r1
 8000df8:	bf24      	itt	cs
 8000dfa:	1a5b      	subcs	r3, r3, r1
 8000dfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e04:	bf24      	itt	cs
 8000e06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e12:	bf24      	itt	cs
 8000e14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e20:	bf24      	itt	cs
 8000e22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	bf18      	it	ne
 8000e2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e32:	d1e0      	bne.n	8000df6 <__aeabi_fdiv+0x46>
 8000e34:	2afd      	cmp	r2, #253	; 0xfd
 8000e36:	f63f af50 	bhi.w	8000cda <__aeabi_fmul+0x92>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e40:	bf08      	it	eq
 8000e42:	f020 0001 	biceq.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e50:	327f      	adds	r2, #127	; 0x7f
 8000e52:	bfc2      	ittt	gt
 8000e54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e5c:	4770      	bxgt	lr
 8000e5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	3a01      	subs	r2, #1
 8000e68:	e737      	b.n	8000cda <__aeabi_fmul+0x92>
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fdiv+0xc2>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fdiv+0xda>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e795      	b.n	8000dc8 <__aeabi_fdiv+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d108      	bne.n	8000eb8 <__aeabi_fdiv+0x108>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	f47f af7d 	bne.w	8000da6 <__aeabi_fmul+0x15e>
 8000eac:	ea93 0f0c 	teq	r3, ip
 8000eb0:	f47f af70 	bne.w	8000d94 <__aeabi_fmul+0x14c>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e776      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000eb8:	ea93 0f0c 	teq	r3, ip
 8000ebc:	d104      	bne.n	8000ec8 <__aeabi_fdiv+0x118>
 8000ebe:	024b      	lsls	r3, r1, #9
 8000ec0:	f43f af4c 	beq.w	8000d5c <__aeabi_fmul+0x114>
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e76e      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000ec8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ecc:	bf18      	it	ne
 8000ece:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ed2:	d1ca      	bne.n	8000e6a <__aeabi_fdiv+0xba>
 8000ed4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed8:	f47f af5c 	bne.w	8000d94 <__aeabi_fmul+0x14c>
 8000edc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee0:	f47f af3c 	bne.w	8000d5c <__aeabi_fmul+0x114>
 8000ee4:	e75f      	b.n	8000da6 <__aeabi_fmul+0x15e>
 8000ee6:	bf00      	nop

08000ee8 <__gesf2>:
 8000ee8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eec:	e006      	b.n	8000efc <__cmpsf2+0x4>
 8000eee:	bf00      	nop

08000ef0 <__lesf2>:
 8000ef0:	f04f 0c01 	mov.w	ip, #1
 8000ef4:	e002      	b.n	8000efc <__cmpsf2+0x4>
 8000ef6:	bf00      	nop

08000ef8 <__cmpsf2>:
 8000ef8:	f04f 0c01 	mov.w	ip, #1
 8000efc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	bf18      	it	ne
 8000f0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f12:	d011      	beq.n	8000f38 <__cmpsf2+0x40>
 8000f14:	b001      	add	sp, #4
 8000f16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1a:	bf18      	it	ne
 8000f1c:	ea90 0f01 	teqne	r0, r1
 8000f20:	bf58      	it	pl
 8000f22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f26:	bf88      	it	hi
 8000f28:	17c8      	asrhi	r0, r1, #31
 8000f2a:	bf38      	it	cc
 8000f2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f30:	bf18      	it	ne
 8000f32:	f040 0001 	orrne.w	r0, r0, #1
 8000f36:	4770      	bx	lr
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	d102      	bne.n	8000f44 <__cmpsf2+0x4c>
 8000f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f42:	d105      	bne.n	8000f50 <__cmpsf2+0x58>
 8000f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f48:	d1e4      	bne.n	8000f14 <__cmpsf2+0x1c>
 8000f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4e:	d0e1      	beq.n	8000f14 <__cmpsf2+0x1c>
 8000f50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__aeabi_cfrcmple>:
 8000f58:	4684      	mov	ip, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4661      	mov	r1, ip
 8000f5e:	e7ff      	b.n	8000f60 <__aeabi_cfcmpeq>

08000f60 <__aeabi_cfcmpeq>:
 8000f60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f62:	f7ff ffc9 	bl	8000ef8 <__cmpsf2>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	bf48      	it	mi
 8000f6a:	f110 0f00 	cmnmi.w	r0, #0
 8000f6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f70 <__aeabi_fcmpeq>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff fff4 	bl	8000f60 <__aeabi_cfcmpeq>
 8000f78:	bf0c      	ite	eq
 8000f7a:	2001      	moveq	r0, #1
 8000f7c:	2000      	movne	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmplt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffea 	bl	8000f60 <__aeabi_cfcmpeq>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_fcmple>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffe0 	bl	8000f60 <__aeabi_cfcmpeq>
 8000fa0:	bf94      	ite	ls
 8000fa2:	2001      	movls	r0, #1
 8000fa4:	2000      	movhi	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_fcmpge>:
 8000fac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb0:	f7ff ffd2 	bl	8000f58 <__aeabi_cfrcmple>
 8000fb4:	bf94      	ite	ls
 8000fb6:	2001      	movls	r0, #1
 8000fb8:	2000      	movhi	r0, #0
 8000fba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_fcmpgt>:
 8000fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc4:	f7ff ffc8 	bl	8000f58 <__aeabi_cfrcmple>
 8000fc8:	bf34      	ite	cc
 8000fca:	2001      	movcc	r0, #1
 8000fcc:	2000      	movcs	r0, #0
 8000fce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__aeabi_f2uiz>:
 8001020:	0042      	lsls	r2, r0, #1
 8001022:	d20e      	bcs.n	8001042 <__aeabi_f2uiz+0x22>
 8001024:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001028:	d30b      	bcc.n	8001042 <__aeabi_f2uiz+0x22>
 800102a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001032:	d409      	bmi.n	8001048 <__aeabi_f2uiz+0x28>
 8001034:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	4770      	bx	lr
 8001042:	f04f 0000 	mov.w	r0, #0
 8001046:	4770      	bx	lr
 8001048:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800104c:	d101      	bne.n	8001052 <__aeabi_f2uiz+0x32>
 800104e:	0242      	lsls	r2, r0, #9
 8001050:	d102      	bne.n	8001058 <__aeabi_f2uiz+0x38>
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	4770      	bx	lr
 8001058:	f04f 0000 	mov.w	r0, #0
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <__aeabi_uldivmod>:
 8001060:	b953      	cbnz	r3, 8001078 <__aeabi_uldivmod+0x18>
 8001062:	b94a      	cbnz	r2, 8001078 <__aeabi_uldivmod+0x18>
 8001064:	2900      	cmp	r1, #0
 8001066:	bf08      	it	eq
 8001068:	2800      	cmpeq	r0, #0
 800106a:	bf1c      	itt	ne
 800106c:	f04f 31ff 	movne.w	r1, #4294967295
 8001070:	f04f 30ff 	movne.w	r0, #4294967295
 8001074:	f000 b97a 	b.w	800136c <__aeabi_idiv0>
 8001078:	f1ad 0c08 	sub.w	ip, sp, #8
 800107c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001080:	f000 f806 	bl	8001090 <__udivmoddi4>
 8001084:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr

08001090 <__udivmoddi4>:
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001094:	468c      	mov	ip, r1
 8001096:	460e      	mov	r6, r1
 8001098:	4604      	mov	r4, r0
 800109a:	9d08      	ldr	r5, [sp, #32]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d150      	bne.n	8001142 <__udivmoddi4+0xb2>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	4617      	mov	r7, r2
 80010a4:	d96c      	bls.n	8001180 <__udivmoddi4+0xf0>
 80010a6:	fab2 fe82 	clz	lr, r2
 80010aa:	f1be 0f00 	cmp.w	lr, #0
 80010ae:	d00b      	beq.n	80010c8 <__udivmoddi4+0x38>
 80010b0:	f1ce 0c20 	rsb	ip, lr, #32
 80010b4:	fa01 f60e 	lsl.w	r6, r1, lr
 80010b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010bc:	fa02 f70e 	lsl.w	r7, r2, lr
 80010c0:	ea4c 0c06 	orr.w	ip, ip, r6
 80010c4:	fa00 f40e 	lsl.w	r4, r0, lr
 80010c8:	0c3a      	lsrs	r2, r7, #16
 80010ca:	fbbc f9f2 	udiv	r9, ip, r2
 80010ce:	b2bb      	uxth	r3, r7
 80010d0:	fb02 cc19 	mls	ip, r2, r9, ip
 80010d4:	fb09 fa03 	mul.w	sl, r9, r3
 80010d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80010dc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80010e0:	45b2      	cmp	sl, r6
 80010e2:	d90a      	bls.n	80010fa <__udivmoddi4+0x6a>
 80010e4:	19f6      	adds	r6, r6, r7
 80010e6:	f109 31ff 	add.w	r1, r9, #4294967295
 80010ea:	f080 8125 	bcs.w	8001338 <__udivmoddi4+0x2a8>
 80010ee:	45b2      	cmp	sl, r6
 80010f0:	f240 8122 	bls.w	8001338 <__udivmoddi4+0x2a8>
 80010f4:	f1a9 0902 	sub.w	r9, r9, #2
 80010f8:	443e      	add	r6, r7
 80010fa:	eba6 060a 	sub.w	r6, r6, sl
 80010fe:	fbb6 f0f2 	udiv	r0, r6, r2
 8001102:	fb02 6610 	mls	r6, r2, r0, r6
 8001106:	fb00 f303 	mul.w	r3, r0, r3
 800110a:	b2a4      	uxth	r4, r4
 800110c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001110:	42a3      	cmp	r3, r4
 8001112:	d909      	bls.n	8001128 <__udivmoddi4+0x98>
 8001114:	19e4      	adds	r4, r4, r7
 8001116:	f100 32ff 	add.w	r2, r0, #4294967295
 800111a:	f080 810b 	bcs.w	8001334 <__udivmoddi4+0x2a4>
 800111e:	42a3      	cmp	r3, r4
 8001120:	f240 8108 	bls.w	8001334 <__udivmoddi4+0x2a4>
 8001124:	3802      	subs	r0, #2
 8001126:	443c      	add	r4, r7
 8001128:	2100      	movs	r1, #0
 800112a:	1ae4      	subs	r4, r4, r3
 800112c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001130:	2d00      	cmp	r5, #0
 8001132:	d062      	beq.n	80011fa <__udivmoddi4+0x16a>
 8001134:	2300      	movs	r3, #0
 8001136:	fa24 f40e 	lsr.w	r4, r4, lr
 800113a:	602c      	str	r4, [r5, #0]
 800113c:	606b      	str	r3, [r5, #4]
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	428b      	cmp	r3, r1
 8001144:	d907      	bls.n	8001156 <__udivmoddi4+0xc6>
 8001146:	2d00      	cmp	r5, #0
 8001148:	d055      	beq.n	80011f6 <__udivmoddi4+0x166>
 800114a:	2100      	movs	r1, #0
 800114c:	e885 0041 	stmia.w	r5, {r0, r6}
 8001150:	4608      	mov	r0, r1
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	fab3 f183 	clz	r1, r3
 800115a:	2900      	cmp	r1, #0
 800115c:	f040 808f 	bne.w	800127e <__udivmoddi4+0x1ee>
 8001160:	42b3      	cmp	r3, r6
 8001162:	d302      	bcc.n	800116a <__udivmoddi4+0xda>
 8001164:	4282      	cmp	r2, r0
 8001166:	f200 80fc 	bhi.w	8001362 <__udivmoddi4+0x2d2>
 800116a:	1a84      	subs	r4, r0, r2
 800116c:	eb66 0603 	sbc.w	r6, r6, r3
 8001170:	2001      	movs	r0, #1
 8001172:	46b4      	mov	ip, r6
 8001174:	2d00      	cmp	r5, #0
 8001176:	d040      	beq.n	80011fa <__udivmoddi4+0x16a>
 8001178:	e885 1010 	stmia.w	r5, {r4, ip}
 800117c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001180:	b912      	cbnz	r2, 8001188 <__udivmoddi4+0xf8>
 8001182:	2701      	movs	r7, #1
 8001184:	fbb7 f7f2 	udiv	r7, r7, r2
 8001188:	fab7 fe87 	clz	lr, r7
 800118c:	f1be 0f00 	cmp.w	lr, #0
 8001190:	d135      	bne.n	80011fe <__udivmoddi4+0x16e>
 8001192:	2101      	movs	r1, #1
 8001194:	1bf6      	subs	r6, r6, r7
 8001196:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800119a:	fa1f f887 	uxth.w	r8, r7
 800119e:	fbb6 f2fc 	udiv	r2, r6, ip
 80011a2:	fb0c 6612 	mls	r6, ip, r2, r6
 80011a6:	fb08 f002 	mul.w	r0, r8, r2
 80011aa:	0c23      	lsrs	r3, r4, #16
 80011ac:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80011b0:	42b0      	cmp	r0, r6
 80011b2:	d907      	bls.n	80011c4 <__udivmoddi4+0x134>
 80011b4:	19f6      	adds	r6, r6, r7
 80011b6:	f102 33ff 	add.w	r3, r2, #4294967295
 80011ba:	d202      	bcs.n	80011c2 <__udivmoddi4+0x132>
 80011bc:	42b0      	cmp	r0, r6
 80011be:	f200 80d2 	bhi.w	8001366 <__udivmoddi4+0x2d6>
 80011c2:	461a      	mov	r2, r3
 80011c4:	1a36      	subs	r6, r6, r0
 80011c6:	fbb6 f0fc 	udiv	r0, r6, ip
 80011ca:	fb0c 6610 	mls	r6, ip, r0, r6
 80011ce:	fb08 f800 	mul.w	r8, r8, r0
 80011d2:	b2a3      	uxth	r3, r4
 80011d4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80011d8:	45a0      	cmp	r8, r4
 80011da:	d907      	bls.n	80011ec <__udivmoddi4+0x15c>
 80011dc:	19e4      	adds	r4, r4, r7
 80011de:	f100 33ff 	add.w	r3, r0, #4294967295
 80011e2:	d202      	bcs.n	80011ea <__udivmoddi4+0x15a>
 80011e4:	45a0      	cmp	r8, r4
 80011e6:	f200 80b9 	bhi.w	800135c <__udivmoddi4+0x2cc>
 80011ea:	4618      	mov	r0, r3
 80011ec:	eba4 0408 	sub.w	r4, r4, r8
 80011f0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80011f4:	e79c      	b.n	8001130 <__udivmoddi4+0xa0>
 80011f6:	4629      	mov	r1, r5
 80011f8:	4628      	mov	r0, r5
 80011fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8001202:	f1ce 0320 	rsb	r3, lr, #32
 8001206:	fa26 f203 	lsr.w	r2, r6, r3
 800120a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800120e:	fbb2 f1fc 	udiv	r1, r2, ip
 8001212:	fa1f f887 	uxth.w	r8, r7
 8001216:	fb0c 2211 	mls	r2, ip, r1, r2
 800121a:	fa06 f60e 	lsl.w	r6, r6, lr
 800121e:	fa20 f303 	lsr.w	r3, r0, r3
 8001222:	fb01 f908 	mul.w	r9, r1, r8
 8001226:	4333      	orrs	r3, r6
 8001228:	0c1e      	lsrs	r6, r3, #16
 800122a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800122e:	45b1      	cmp	r9, r6
 8001230:	fa00 f40e 	lsl.w	r4, r0, lr
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x1ba>
 8001236:	19f6      	adds	r6, r6, r7
 8001238:	f101 32ff 	add.w	r2, r1, #4294967295
 800123c:	f080 808c 	bcs.w	8001358 <__udivmoddi4+0x2c8>
 8001240:	45b1      	cmp	r9, r6
 8001242:	f240 8089 	bls.w	8001358 <__udivmoddi4+0x2c8>
 8001246:	3902      	subs	r1, #2
 8001248:	443e      	add	r6, r7
 800124a:	eba6 0609 	sub.w	r6, r6, r9
 800124e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001252:	fb0c 6210 	mls	r2, ip, r0, r6
 8001256:	fb00 f908 	mul.w	r9, r0, r8
 800125a:	b29e      	uxth	r6, r3
 800125c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001260:	45b1      	cmp	r9, r6
 8001262:	d907      	bls.n	8001274 <__udivmoddi4+0x1e4>
 8001264:	19f6      	adds	r6, r6, r7
 8001266:	f100 33ff 	add.w	r3, r0, #4294967295
 800126a:	d271      	bcs.n	8001350 <__udivmoddi4+0x2c0>
 800126c:	45b1      	cmp	r9, r6
 800126e:	d96f      	bls.n	8001350 <__udivmoddi4+0x2c0>
 8001270:	3802      	subs	r0, #2
 8001272:	443e      	add	r6, r7
 8001274:	eba6 0609 	sub.w	r6, r6, r9
 8001278:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800127c:	e78f      	b.n	800119e <__udivmoddi4+0x10e>
 800127e:	f1c1 0720 	rsb	r7, r1, #32
 8001282:	fa22 f807 	lsr.w	r8, r2, r7
 8001286:	408b      	lsls	r3, r1
 8001288:	ea48 0303 	orr.w	r3, r8, r3
 800128c:	fa26 f407 	lsr.w	r4, r6, r7
 8001290:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001294:	fbb4 f9fe 	udiv	r9, r4, lr
 8001298:	fa1f fc83 	uxth.w	ip, r3
 800129c:	fb0e 4419 	mls	r4, lr, r9, r4
 80012a0:	408e      	lsls	r6, r1
 80012a2:	fa20 f807 	lsr.w	r8, r0, r7
 80012a6:	fb09 fa0c 	mul.w	sl, r9, ip
 80012aa:	ea48 0806 	orr.w	r8, r8, r6
 80012ae:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80012b2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80012b6:	45a2      	cmp	sl, r4
 80012b8:	fa02 f201 	lsl.w	r2, r2, r1
 80012bc:	fa00 f601 	lsl.w	r6, r0, r1
 80012c0:	d908      	bls.n	80012d4 <__udivmoddi4+0x244>
 80012c2:	18e4      	adds	r4, r4, r3
 80012c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80012c8:	d244      	bcs.n	8001354 <__udivmoddi4+0x2c4>
 80012ca:	45a2      	cmp	sl, r4
 80012cc:	d942      	bls.n	8001354 <__udivmoddi4+0x2c4>
 80012ce:	f1a9 0902 	sub.w	r9, r9, #2
 80012d2:	441c      	add	r4, r3
 80012d4:	eba4 040a 	sub.w	r4, r4, sl
 80012d8:	fbb4 f0fe 	udiv	r0, r4, lr
 80012dc:	fb0e 4410 	mls	r4, lr, r0, r4
 80012e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80012e4:	fa1f f888 	uxth.w	r8, r8
 80012e8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80012ec:	45a4      	cmp	ip, r4
 80012ee:	d907      	bls.n	8001300 <__udivmoddi4+0x270>
 80012f0:	18e4      	adds	r4, r4, r3
 80012f2:	f100 3eff 	add.w	lr, r0, #4294967295
 80012f6:	d229      	bcs.n	800134c <__udivmoddi4+0x2bc>
 80012f8:	45a4      	cmp	ip, r4
 80012fa:	d927      	bls.n	800134c <__udivmoddi4+0x2bc>
 80012fc:	3802      	subs	r0, #2
 80012fe:	441c      	add	r4, r3
 8001300:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001304:	fba0 8902 	umull	r8, r9, r0, r2
 8001308:	eba4 0c0c 	sub.w	ip, r4, ip
 800130c:	45cc      	cmp	ip, r9
 800130e:	46c2      	mov	sl, r8
 8001310:	46ce      	mov	lr, r9
 8001312:	d315      	bcc.n	8001340 <__udivmoddi4+0x2b0>
 8001314:	d012      	beq.n	800133c <__udivmoddi4+0x2ac>
 8001316:	b155      	cbz	r5, 800132e <__udivmoddi4+0x29e>
 8001318:	ebb6 030a 	subs.w	r3, r6, sl
 800131c:	eb6c 060e 	sbc.w	r6, ip, lr
 8001320:	fa06 f707 	lsl.w	r7, r6, r7
 8001324:	40cb      	lsrs	r3, r1
 8001326:	431f      	orrs	r7, r3
 8001328:	40ce      	lsrs	r6, r1
 800132a:	602f      	str	r7, [r5, #0]
 800132c:	606e      	str	r6, [r5, #4]
 800132e:	2100      	movs	r1, #0
 8001330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001334:	4610      	mov	r0, r2
 8001336:	e6f7      	b.n	8001128 <__udivmoddi4+0x98>
 8001338:	4689      	mov	r9, r1
 800133a:	e6de      	b.n	80010fa <__udivmoddi4+0x6a>
 800133c:	4546      	cmp	r6, r8
 800133e:	d2ea      	bcs.n	8001316 <__udivmoddi4+0x286>
 8001340:	ebb8 0a02 	subs.w	sl, r8, r2
 8001344:	eb69 0e03 	sbc.w	lr, r9, r3
 8001348:	3801      	subs	r0, #1
 800134a:	e7e4      	b.n	8001316 <__udivmoddi4+0x286>
 800134c:	4670      	mov	r0, lr
 800134e:	e7d7      	b.n	8001300 <__udivmoddi4+0x270>
 8001350:	4618      	mov	r0, r3
 8001352:	e78f      	b.n	8001274 <__udivmoddi4+0x1e4>
 8001354:	4681      	mov	r9, r0
 8001356:	e7bd      	b.n	80012d4 <__udivmoddi4+0x244>
 8001358:	4611      	mov	r1, r2
 800135a:	e776      	b.n	800124a <__udivmoddi4+0x1ba>
 800135c:	3802      	subs	r0, #2
 800135e:	443c      	add	r4, r7
 8001360:	e744      	b.n	80011ec <__udivmoddi4+0x15c>
 8001362:	4608      	mov	r0, r1
 8001364:	e706      	b.n	8001174 <__udivmoddi4+0xe4>
 8001366:	3a02      	subs	r2, #2
 8001368:	443e      	add	r6, r7
 800136a:	e72b      	b.n	80011c4 <__udivmoddi4+0x134>

0800136c <__aeabi_idiv0>:
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_InitTick+0x3c>)
{
 8001374:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001376:	7818      	ldrb	r0, [r3, #0]
 8001378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_InitTick+0x40>)
 8001382:	6810      	ldr	r0, [r2, #0]
 8001384:	fbb0 f0f3 	udiv	r0, r0, r3
 8001388:	f000 faec 	bl	8001964 <HAL_SYSTICK_Config>
 800138c:	4604      	mov	r4, r0
 800138e:	b958      	cbnz	r0, 80013a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001390:	2d0f      	cmp	r5, #15
 8001392:	d809      	bhi.n	80013a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	4602      	mov	r2, r0
 8001396:	4629      	mov	r1, r5
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 faa0 	bl	80018e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <HAL_InitTick+0x44>)
 80013a2:	4620      	mov	r0, r4
 80013a4:	601d      	str	r5, [r3, #0]
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	200000a0 	.word	0x200000a0
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x20>)
{
 80013ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c6:	f000 fa79 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f7ff ffd0 	bl	8001370 <HAL_InitTick>
  HAL_MspInit();
 80013d0:	f004 fb1c 	bl	8005a0c <HAL_MspInit>
}
 80013d4:	2000      	movs	r0, #0
 80013d6:	bd08      	pop	{r3, pc}
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x10>)
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_IncTick+0x14>)
 80013e0:	6811      	ldr	r1, [r2, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	440b      	add	r3, r1
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200053e0 	.word	0x200053e0
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_GetTick+0x8>)
 80013f6:	6818      	ldr	r0, [r3, #0]
}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200053e0 	.word	0x200053e0

08001400 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001400:	6803      	ldr	r3, [r0, #0]
 8001402:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001404:	4770      	bx	lr

08001406 <HAL_ADC_LevelOutOfWindowCallback>:
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001408:	6803      	ldr	r3, [r0, #0]
{
 800140a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800140c:	685a      	ldr	r2, [r3, #4]
{
 800140e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001410:	0690      	lsls	r0, r2, #26
 8001412:	d527      	bpl.n	8001464 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	0791      	lsls	r1, r2, #30
 8001418:	d524      	bpl.n	8001464 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800141c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800141e:	bf5e      	ittt	pl
 8001420:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001422:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001426:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800142e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001432:	d110      	bne.n	8001456 <HAL_ADC_IRQHandler+0x4e>
 8001434:	7b22      	ldrb	r2, [r4, #12]
 8001436:	b972      	cbnz	r2, 8001456 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	f022 0220 	bic.w	r2, r2, #32
 800143e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001440:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001446:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800144a:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800144c:	bf5e      	ittt	pl
 800144e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001450:	f043 0301 	orrpl.w	r3, r3, #1
 8001454:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001456:	4620      	mov	r0, r4
 8001458:	f004 f904 	bl	8005664 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800145c:	f06f 0212 	mvn.w	r2, #18
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	0610      	lsls	r0, r2, #24
 800146a:	d530      	bpl.n	80014ce <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	0751      	lsls	r1, r2, #29
 8001470:	d52d      	bpl.n	80014ce <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001472:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001474:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001476:	bf5e      	ittt	pl
 8001478:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800147a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800147e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001486:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800148a:	d00a      	beq.n	80014a2 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800148c:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800148e:	0550      	lsls	r0, r2, #21
 8001490:	d416      	bmi.n	80014c0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001498:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800149c:	d110      	bne.n	80014c0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800149e:	7b22      	ldrb	r2, [r4, #12]
 80014a0:	b972      	cbnz	r2, 80014c0 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80014aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014b0:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014b4:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b6:	bf5e      	ittt	pl
 80014b8:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80014ba:	f043 0301 	orrpl.w	r3, r3, #1
 80014be:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f000 f9fa 	bl	80018ba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014c6:	f06f 020c 	mvn.w	r2, #12
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	0652      	lsls	r2, r2, #25
 80014d4:	d50d      	bpl.n	80014f2 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	07db      	lsls	r3, r3, #31
 80014da:	d50a      	bpl.n	80014f2 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014de:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014e6:	f7ff ff8e 	bl	8001406 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014ea:	f06f 0201 	mvn.w	r2, #1
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	bd10      	pop	{r4, pc}

080014f4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80014f4:	2300      	movs	r3, #0
{ 
 80014f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80014f8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d074      	beq.n	80015ec <HAL_ADC_ConfigChannel+0xf8>
 8001502:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001504:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001506:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800150a:	2d06      	cmp	r5, #6
 800150c:	6802      	ldr	r2, [r0, #0]
 800150e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001512:	680c      	ldr	r4, [r1, #0]
 8001514:	d825      	bhi.n	8001562 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001516:	442b      	add	r3, r5
 8001518:	251f      	movs	r5, #31
 800151a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800151c:	3b05      	subs	r3, #5
 800151e:	409d      	lsls	r5, r3
 8001520:	ea26 0505 	bic.w	r5, r6, r5
 8001524:	fa04 f303 	lsl.w	r3, r4, r3
 8001528:	432b      	orrs	r3, r5
 800152a:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800152c:	2c09      	cmp	r4, #9
 800152e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001532:	688d      	ldr	r5, [r1, #8]
 8001534:	d92f      	bls.n	8001596 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001536:	2607      	movs	r6, #7
 8001538:	4423      	add	r3, r4
 800153a:	68d1      	ldr	r1, [r2, #12]
 800153c:	3b1e      	subs	r3, #30
 800153e:	409e      	lsls	r6, r3
 8001540:	ea21 0106 	bic.w	r1, r1, r6
 8001544:	fa05 f303 	lsl.w	r3, r5, r3
 8001548:	430b      	orrs	r3, r1
 800154a:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800154c:	f1a4 0310 	sub.w	r3, r4, #16
 8001550:	2b01      	cmp	r3, #1
 8001552:	d92b      	bls.n	80015ac <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001556:	2200      	movs	r2, #0
 8001558:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800155c:	4618      	mov	r0, r3
 800155e:	b002      	add	sp, #8
 8001560:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001562:	2d0c      	cmp	r5, #12
 8001564:	d80b      	bhi.n	800157e <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001566:	442b      	add	r3, r5
 8001568:	251f      	movs	r5, #31
 800156a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800156c:	3b23      	subs	r3, #35	; 0x23
 800156e:	409d      	lsls	r5, r3
 8001570:	ea26 0505 	bic.w	r5, r6, r5
 8001574:	fa04 f303 	lsl.w	r3, r4, r3
 8001578:	432b      	orrs	r3, r5
 800157a:	6313      	str	r3, [r2, #48]	; 0x30
 800157c:	e7d6      	b.n	800152c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800157e:	442b      	add	r3, r5
 8001580:	251f      	movs	r5, #31
 8001582:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001584:	3b41      	subs	r3, #65	; 0x41
 8001586:	409d      	lsls	r5, r3
 8001588:	ea26 0505 	bic.w	r5, r6, r5
 800158c:	fa04 f303 	lsl.w	r3, r4, r3
 8001590:	432b      	orrs	r3, r5
 8001592:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001594:	e7ca      	b.n	800152c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001596:	2607      	movs	r6, #7
 8001598:	6911      	ldr	r1, [r2, #16]
 800159a:	4423      	add	r3, r4
 800159c:	409e      	lsls	r6, r3
 800159e:	ea21 0106 	bic.w	r1, r1, r6
 80015a2:	fa05 f303 	lsl.w	r3, r5, r3
 80015a6:	430b      	orrs	r3, r1
 80015a8:	6113      	str	r3, [r2, #16]
 80015aa:	e7cf      	b.n	800154c <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_ADC_ConfigChannel+0xfc>)
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d116      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015b2:	6893      	ldr	r3, [r2, #8]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	d4cd      	bmi.n	8001554 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015b8:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015ba:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c0:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c2:	d1c7      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_ADC_ConfigChannel+0x100>)
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <HAL_ADC_ConfigChannel+0x104>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80015ce:	230a      	movs	r3, #10
 80015d0:	4353      	muls	r3, r2
            wait_loop_index--;
 80015d2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80015d4:	9b01      	ldr	r3, [sp, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0bc      	beq.n	8001554 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80015da:	9b01      	ldr	r3, [sp, #4]
 80015dc:	3b01      	subs	r3, #1
 80015de:	e7f8      	b.n	80015d2 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015e2:	f043 0320 	orr.w	r3, r3, #32
 80015e6:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e7b4      	b.n	8001556 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80015ec:	2302      	movs	r3, #2
 80015ee:	e7b5      	b.n	800155c <HAL_ADC_ConfigChannel+0x68>
 80015f0:	40012400 	.word	0x40012400
 80015f4:	200000a0 	.word	0x200000a0
 80015f8:	000f4240 	.word	0x000f4240

080015fc <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80015fc:	2300      	movs	r3, #0
{
 80015fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001600:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001602:	6803      	ldr	r3, [r0, #0]
{
 8001604:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	07d2      	lsls	r2, r2, #31
 800160a:	d502      	bpl.n	8001612 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800160c:	2000      	movs	r0, #0
}
 800160e:	b002      	add	sp, #8
 8001610:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <ADC_Enable+0x68>)
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <ADC_Enable+0x6c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001624:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001626:	9b01      	ldr	r3, [sp, #4]
 8001628:	b9c3      	cbnz	r3, 800165c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800162a:	f7ff fee3 	bl	80013f4 <HAL_GetTick>
 800162e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	689d      	ldr	r5, [r3, #8]
 8001634:	f015 0501 	ands.w	r5, r5, #1
 8001638:	d1e8      	bne.n	800160c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800163a:	f7ff fedb 	bl	80013f4 <HAL_GetTick>
 800163e:	1b80      	subs	r0, r0, r6
 8001640:	2802      	cmp	r0, #2
 8001642:	d9f5      	bls.n	8001630 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001646:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001652:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800165a:	e7d8      	b.n	800160e <ADC_Enable+0x12>
      wait_loop_index--;
 800165c:	9b01      	ldr	r3, [sp, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	e7e0      	b.n	8001624 <ADC_Enable+0x28>
 8001662:	bf00      	nop
 8001664:	200000a0 	.word	0x200000a0
 8001668:	000f4240 	.word	0x000f4240

0800166c <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 800166c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001670:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001672:	2b01      	cmp	r3, #1
{
 8001674:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001676:	d058      	beq.n	800172a <HAL_ADC_Start_IT+0xbe>
 8001678:	2301      	movs	r3, #1
 800167a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800167e:	f7ff ffbd 	bl	80015fc <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001682:	2800      	cmp	r0, #0
 8001684:	d14d      	bne.n	8001722 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 8001686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001688:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800168a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	4293      	cmp	r3, r2
 800169c:	d104      	bne.n	80016a8 <HAL_ADC_Start_IT+0x3c>
 800169e:	4925      	ldr	r1, [pc, #148]	; (8001734 <HAL_ADC_Start_IT+0xc8>)
 80016a0:	684a      	ldr	r2, [r1, #4]
 80016a2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80016a6:	d132      	bne.n	800170e <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80016ae:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016b2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016b4:	bf41      	itttt	mi
 80016b6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80016b8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80016bc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80016c0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016c8:	bf1c      	itt	ne
 80016ca:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80016cc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016d8:	f06f 0202 	mvn.w	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	f042 0220 	orr.w	r2, r2, #32
 80016e4:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80016ec:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80016f0:	d113      	bne.n	800171a <HAL_ADC_Start_IT+0xae>
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_ADC_Start_IT+0xc4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016f8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80016fc:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016fe:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001702:	d10a      	bne.n	800171a <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800170e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001710:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001714:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001716:	684a      	ldr	r2, [r1, #4]
 8001718:	e7cb      	b.n	80016b2 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001720:	e7f3      	b.n	800170a <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8001722:	2300      	movs	r3, #0
 8001724:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001728:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800172a:	2002      	movs	r0, #2
}
 800172c:	bd10      	pop	{r4, pc}
 800172e:	bf00      	nop
 8001730:	40012800 	.word	0x40012800
 8001734:	40012400 	.word	0x40012400

08001738 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001738:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800173a:	6803      	ldr	r3, [r0, #0]
{
 800173c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	07d2      	lsls	r2, r2, #31
 8001742:	d401      	bmi.n	8001748 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001744:	2000      	movs	r0, #0
 8001746:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001750:	f7ff fe50 	bl	80013f4 <HAL_GetTick>
 8001754:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	07db      	lsls	r3, r3, #31
 800175c:	d5f2      	bpl.n	8001744 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800175e:	f7ff fe49 	bl	80013f4 <HAL_GetTick>
 8001762:	1b40      	subs	r0, r0, r5
 8001764:	2802      	cmp	r0, #2
 8001766:	d9f6      	bls.n	8001756 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800177a:	bd38      	pop	{r3, r4, r5, pc}

0800177c <HAL_ADC_Init>:
{
 800177c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800177e:	4604      	mov	r4, r0
 8001780:	2800      	cmp	r0, #0
 8001782:	d071      	beq.n	8001868 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001784:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001786:	b923      	cbnz	r3, 8001792 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800178a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800178e:	f004 f965 	bl	8005a5c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff ffd0 	bl	8001738 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800179a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800179e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017a0:	d164      	bne.n	800186c <HAL_ADC_Init+0xf0>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d162      	bne.n	800186c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a6:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80017a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ac:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	f023 0302 	bic.w	r3, r3, #2
 80017b2:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b6:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017b8:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017bc:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017c2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017c6:	d038      	beq.n	800183a <HAL_ADC_Init+0xbe>
 80017c8:	2901      	cmp	r1, #1
 80017ca:	bf14      	ite	ne
 80017cc:	4606      	movne	r6, r0
 80017ce:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d2:	7d25      	ldrb	r5, [r4, #20]
 80017d4:	2d01      	cmp	r5, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d130      	bne.n	800183e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017dc:	69a3      	ldr	r3, [r4, #24]
 80017de:	3b01      	subs	r3, #1
 80017e0:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80017e4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80017e8:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017ea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80017ee:	685d      	ldr	r5, [r3, #4]
 80017f0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80017f4:	ea45 0506 	orr.w	r5, r5, r6
 80017f8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80017fa:	689e      	ldr	r6, [r3, #8]
 80017fc:	4d1d      	ldr	r5, [pc, #116]	; (8001874 <HAL_ADC_Init+0xf8>)
 80017fe:	ea05 0506 	and.w	r5, r5, r6
 8001802:	ea45 0502 	orr.w	r5, r5, r2
 8001806:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001808:	d001      	beq.n	800180e <HAL_ADC_Init+0x92>
 800180a:	2901      	cmp	r1, #1
 800180c:	d120      	bne.n	8001850 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800180e:	6921      	ldr	r1, [r4, #16]
 8001810:	3901      	subs	r1, #1
 8001812:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001814:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001816:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800181a:	4329      	orrs	r1, r5
 800181c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_ADC_Init+0xfc>)
 8001822:	400b      	ands	r3, r1
 8001824:	429a      	cmp	r2, r3
 8001826:	d115      	bne.n	8001854 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001828:	2300      	movs	r3, #0
 800182a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800182c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	62a3      	str	r3, [r4, #40]	; 0x28
 8001838:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800183a:	460e      	mov	r6, r1
 800183c:	e7c9      	b.n	80017d2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800183e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800184e:	e7cb      	b.n	80017e8 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001850:	2100      	movs	r1, #0
 8001852:	e7df      	b.n	8001814 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8001854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001856:	f023 0312 	bic.w	r3, r3, #18
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
}
 800186a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	62a3      	str	r3, [r4, #40]	; 0x28
 8001872:	e7f9      	b.n	8001868 <HAL_ADC_Init+0xec>
 8001874:	ffe1f7fd 	.word	0xffe1f7fd
 8001878:	ff1f0efe 	.word	0xff1f0efe

0800187c <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 800187c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001880:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001882:	2b01      	cmp	r3, #1
{
 8001884:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001886:	d016      	beq.n	80018b6 <HAL_ADC_Stop_IT+0x3a>
 8001888:	2301      	movs	r3, #1
 800188a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800188e:	f7ff ff53 	bl	8001738 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8001892:	b960      	cbnz	r0, 80018ae <HAL_ADC_Stop_IT+0x32>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001894:	6822      	ldr	r2, [r4, #0]
 8001896:	6853      	ldr	r3, [r2, #4]
 8001898:	f023 0320 	bic.w	r3, r3, #32
 800189c:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80018ae:	2300      	movs	r3, #0
 80018b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 80018b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80018b6:	2002      	movs	r0, #2
}
 80018b8:	bd10      	pop	{r4, pc}

080018ba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018ba:	4770      	bx	lr

080018bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018be:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ca:	041b      	lsls	r3, r3, #16
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80018d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018d8:	60d3      	str	r3, [r2, #12]
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e2:	b530      	push	{r4, r5, lr}
 80018e4:	68dc      	ldr	r4, [r3, #12]
 80018e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	bf28      	it	cs
 80018f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fc:	bf98      	it	ls
 80018fe:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	fa05 f303 	lsl.w	r3, r5, r3
 8001904:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001908:	bf88      	it	hi
 800190a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4019      	ands	r1, r3
 800190e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	fa05 f404 	lsl.w	r4, r5, r4
 8001914:	3c01      	subs	r4, #1
 8001916:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001918:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191a:	ea42 0201 	orr.w	r2, r2, r1
 800191e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	bfa9      	itett	ge
 8001924:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	4b06      	ldrlt	r3, [pc, #24]	; (8001944 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	b2d2      	uxtbge	r2, r2
 800192c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	bfbb      	ittet	lt
 8001932:	f000 000f 	andlt.w	r0, r0, #15
 8001936:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	541a      	strblt	r2, [r3, r0]
 800193e:	bd30      	pop	{r4, r5, pc}
 8001940:	e000ed00 	.word	0xe000ed00
 8001944:	e000ed14 	.word	0xe000ed14

08001948 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001948:	2800      	cmp	r0, #0
 800194a:	db08      	blt.n	800195e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194c:	2301      	movs	r3, #1
 800194e:	0942      	lsrs	r2, r0, #5
 8001950:	f000 001f 	and.w	r0, r0, #31
 8001954:	fa03 f000 	lsl.w	r0, r3, r0
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <HAL_NVIC_EnableIRQ+0x18>)
 800195a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100

08001964 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	3801      	subs	r0, #1
 8001966:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800196a:	d20a      	bcs.n	8001982 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001990:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001994:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001996:	2b02      	cmp	r3, #2
 8001998:	d003      	beq.n	80019a2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199a:	2304      	movs	r3, #4
 800199c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800199e:	2001      	movs	r0, #1
 80019a0:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a2:	6803      	ldr	r3, [r0, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f022 020e 	bic.w	r2, r2, #14
 80019aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_DMA_Abort_IT+0xcc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d924      	bls.n	8001a04 <HAL_DMA_Abort_IT+0x74>
 80019ba:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_DMA_Abort_IT+0x66>
 80019c2:	3214      	adds	r2, #20
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d018      	beq.n	80019fa <HAL_DMA_Abort_IT+0x6a>
 80019c8:	3214      	adds	r2, #20
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d017      	beq.n	80019fe <HAL_DMA_Abort_IT+0x6e>
 80019ce:	3214      	adds	r2, #20
 80019d0:	4293      	cmp	r3, r2
 80019d2:	bf0c      	ite	eq
 80019d4:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80019d8:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_DMA_Abort_IT+0xd0>)
 80019de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e0:	2301      	movs	r3, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80019e4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80019ea:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80019ee:	b39b      	cbz	r3, 8001a58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019f0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019f2:	4620      	mov	r0, r4
 80019f4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019f6:	2301      	movs	r3, #1
 80019f8:	e7f0      	b.n	80019dc <HAL_DMA_Abort_IT+0x4c>
 80019fa:	2310      	movs	r3, #16
 80019fc:	e7ee      	b.n	80019dc <HAL_DMA_Abort_IT+0x4c>
 80019fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a02:	e7eb      	b.n	80019dc <HAL_DMA_Abort_IT+0x4c>
 8001a04:	4917      	ldr	r1, [pc, #92]	; (8001a64 <HAL_DMA_Abort_IT+0xd4>)
 8001a06:	428b      	cmp	r3, r1
 8001a08:	d016      	beq.n	8001a38 <HAL_DMA_Abort_IT+0xa8>
 8001a0a:	3114      	adds	r1, #20
 8001a0c:	428b      	cmp	r3, r1
 8001a0e:	d015      	beq.n	8001a3c <HAL_DMA_Abort_IT+0xac>
 8001a10:	3114      	adds	r1, #20
 8001a12:	428b      	cmp	r3, r1
 8001a14:	d014      	beq.n	8001a40 <HAL_DMA_Abort_IT+0xb0>
 8001a16:	3114      	adds	r1, #20
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	d014      	beq.n	8001a46 <HAL_DMA_Abort_IT+0xb6>
 8001a1c:	3114      	adds	r1, #20
 8001a1e:	428b      	cmp	r3, r1
 8001a20:	d014      	beq.n	8001a4c <HAL_DMA_Abort_IT+0xbc>
 8001a22:	3114      	adds	r1, #20
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d014      	beq.n	8001a52 <HAL_DMA_Abort_IT+0xc2>
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bf14      	ite	ne
 8001a2c:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001a30:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_DMA_Abort_IT+0xd8>)
 8001a36:	e7d2      	b.n	80019de <HAL_DMA_Abort_IT+0x4e>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e7fb      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	e7f9      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a44:	e7f6      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	e7f3      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a50:	e7f0      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
 8001a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a56:	e7ed      	b.n	8001a34 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8001a58:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8001a5a:	bd10      	pop	{r4, pc}
 8001a5c:	40020080 	.word	0x40020080
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020008 	.word	0x40020008
 8001a68:	40020000 	.word	0x40020000

08001a6c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a6c:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <FLASH_SetErrorCode+0x48>)
 8001a6e:	68d3      	ldr	r3, [r2, #12]
 8001a70:	f013 0310 	ands.w	r3, r3, #16
 8001a74:	d005      	beq.n	8001a82 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a76:	4910      	ldr	r1, [pc, #64]	; (8001ab8 <FLASH_SetErrorCode+0x4c>)
 8001a78:	69cb      	ldr	r3, [r1, #28]
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001a80:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a82:	68d2      	ldr	r2, [r2, #12]
 8001a84:	0750      	lsls	r0, r2, #29
 8001a86:	d506      	bpl.n	8001a96 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a88:	490b      	ldr	r1, [pc, #44]	; (8001ab8 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a8e:	69ca      	ldr	r2, [r1, #28]
 8001a90:	f042 0201 	orr.w	r2, r2, #1
 8001a94:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <FLASH_SetErrorCode+0x48>)
 8001a98:	69d1      	ldr	r1, [r2, #28]
 8001a9a:	07c9      	lsls	r1, r1, #31
 8001a9c:	d508      	bpl.n	8001ab0 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <FLASH_SetErrorCode+0x4c>)
 8001aa0:	69c1      	ldr	r1, [r0, #28]
 8001aa2:	f041 0104 	orr.w	r1, r1, #4
 8001aa6:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001aa8:	69d1      	ldr	r1, [r2, #28]
 8001aaa:	f021 0101 	bic.w	r1, r1, #1
 8001aae:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ab0:	60d3      	str	r3, [r2, #12]
 8001ab2:	4770      	bx	lr
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	200053e8 	.word	0x200053e8

08001abc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_FLASH_Unlock+0x1c>)
 8001abe:	6918      	ldr	r0, [r3, #16]
 8001ac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ac4:	d007      	beq.n	8001ad6 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <HAL_FLASH_Unlock+0x20>)
 8001ac8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001aca:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001ace:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ad0:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8001ad6:	4770      	bx	lr
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	45670123 	.word	0x45670123

08001ae0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <HAL_FLASH_Lock+0x10>)
}
 8001ae2:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001ae4:	6913      	ldr	r3, [r2, #16]
 8001ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aea:	6113      	str	r3, [r2, #16]
}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40022000 	.word	0x40022000

08001af4 <FLASH_WaitForLastOperation>:
{
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff fc7c 	bl	80013f4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001afc:	4c11      	ldr	r4, [pc, #68]	; (8001b44 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8001afe:	4607      	mov	r7, r0
 8001b00:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b02:	68e3      	ldr	r3, [r4, #12]
 8001b04:	07d8      	lsls	r0, r3, #31
 8001b06:	d412      	bmi.n	8001b2e <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b08:	68e3      	ldr	r3, [r4, #12]
 8001b0a:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b0c:	bf44      	itt	mi
 8001b0e:	2320      	movmi	r3, #32
 8001b10:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b12:	68eb      	ldr	r3, [r5, #12]
 8001b14:	06da      	lsls	r2, r3, #27
 8001b16:	d406      	bmi.n	8001b26 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b18:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001b1a:	07db      	lsls	r3, r3, #31
 8001b1c:	d403      	bmi.n	8001b26 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b1e:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b20:	f010 0004 	ands.w	r0, r0, #4
 8001b24:	d002      	beq.n	8001b2c <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8001b26:	f7ff ffa1 	bl	8001a6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b2a:	2001      	movs	r0, #1
}
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001b2e:	1c73      	adds	r3, r6, #1
 8001b30:	d0e7      	beq.n	8001b02 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b32:	b90e      	cbnz	r6, 8001b38 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8001b34:	2003      	movs	r0, #3
 8001b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b38:	f7ff fc5c 	bl	80013f4 <HAL_GetTick>
 8001b3c:	1bc0      	subs	r0, r0, r7
 8001b3e:	4286      	cmp	r6, r0
 8001b40:	d2df      	bcs.n	8001b02 <FLASH_WaitForLastOperation+0xe>
 8001b42:	e7f7      	b.n	8001b34 <FLASH_WaitForLastOperation+0x40>
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_FLASH_Program>:
{
 8001b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001b4c:	4c1f      	ldr	r4, [pc, #124]	; (8001bcc <HAL_FLASH_Program+0x84>)
{
 8001b4e:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8001b50:	7e23      	ldrb	r3, [r4, #24]
{
 8001b52:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8001b54:	2b01      	cmp	r3, #1
{
 8001b56:	460f      	mov	r7, r1
 8001b58:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8001b5a:	d033      	beq.n	8001bc4 <HAL_FLASH_Program+0x7c>
 8001b5c:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b5e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001b62:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b64:	f7ff ffc6 	bl	8001af4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001b68:	bb40      	cbnz	r0, 8001bbc <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b6a:	2d01      	cmp	r5, #1
 8001b6c:	d003      	beq.n	8001b76 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8001b6e:	2d02      	cmp	r5, #2
 8001b70:	bf0c      	ite	eq
 8001b72:	2502      	moveq	r5, #2
 8001b74:	2504      	movne	r5, #4
 8001b76:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b78:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b7a:	f8df b054 	ldr.w	fp, [pc, #84]	; 8001bd0 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b7e:	0132      	lsls	r2, r6, #4
 8001b80:	4640      	mov	r0, r8
 8001b82:	4649      	mov	r1, r9
 8001b84:	f7fe fb54 	bl	8000230 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b88:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b8c:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001b90:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8001b9a:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ba2:	f7ff ffa7 	bl	8001af4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001ba6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8001bb2:	b918      	cbnz	r0, 8001bbc <HAL_FLASH_Program+0x74>
 8001bb4:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8001bb6:	b2f3      	uxtb	r3, r6
 8001bb8:	429d      	cmp	r5, r3
 8001bba:	d8e0      	bhi.n	8001b7e <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	7623      	strb	r3, [r4, #24]
  return status;
 8001bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8001bc4:	2002      	movs	r0, #2
}
 8001bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bca:	bf00      	nop
 8001bcc:	200053e8 	.word	0x200053e8
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <FLASH_MassErase.isra.0+0x1c>)
 8001bd8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <FLASH_MassErase.isra.0+0x20>)
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	f042 0204 	orr.w	r2, r2, #4
 8001be2:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	200053e8 	.word	0x200053e8
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <FLASH_PageErase+0x1c>)
 8001bfc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <FLASH_PageErase+0x20>)
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	f042 0202 	orr.w	r2, r2, #2
 8001c06:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c08:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	4770      	bx	lr
 8001c14:	200053e8 	.word	0x200053e8
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_FLASHEx_Erase>:
{
 8001c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8001c20:	4d23      	ldr	r5, [pc, #140]	; (8001cb0 <HAL_FLASHEx_Erase+0x94>)
{
 8001c22:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8001c24:	7e2b      	ldrb	r3, [r5, #24]
{
 8001c26:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d03d      	beq.n	8001ca8 <HAL_FLASHEx_Erase+0x8c>
 8001c2c:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c2e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8001c30:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c32:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c34:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001c38:	d113      	bne.n	8001c62 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c3a:	f7ff ff5b 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001c3e:	b120      	cbz	r0, 8001c4a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c40:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8001c42:	2300      	movs	r3, #0
 8001c44:	762b      	strb	r3, [r5, #24]
  return status;
 8001c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8001c4a:	f7ff ffc3 	bl	8001bd4 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c52:	f7ff ff4f 	bl	8001af4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_FLASHEx_Erase+0x98>)
 8001c58:	6913      	ldr	r3, [r2, #16]
 8001c5a:	f023 0304 	bic.w	r3, r3, #4
 8001c5e:	6113      	str	r3, [r2, #16]
 8001c60:	e7ef      	b.n	8001c42 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c62:	f7ff ff47 	bl	8001af4 <FLASH_WaitForLastOperation>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d1ea      	bne.n	8001c40 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c72:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8001c74:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001c76:	4c0f      	ldr	r4, [pc, #60]	; (8001cb4 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001c80:	429e      	cmp	r6, r3
 8001c82:	d2de      	bcs.n	8001c42 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8001c84:	4630      	mov	r0, r6
 8001c86:	f7ff ffb7 	bl	8001bf8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c8e:	f7ff ff31 	bl	8001af4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001c92:	6923      	ldr	r3, [r4, #16]
 8001c94:	f023 0302 	bic.w	r3, r3, #2
 8001c98:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001c9a:	b110      	cbz	r0, 8001ca2 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8001c9c:	f8c8 6000 	str.w	r6, [r8]
            break;
 8001ca0:	e7cf      	b.n	8001c42 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8001ca2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001ca6:	e7e7      	b.n	8001c78 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8001ca8:	2002      	movs	r0, #2
}
 8001caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cae:	bf00      	nop
 8001cb0:	200053e8 	.word	0x200053e8
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cbc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001cbe:	4626      	mov	r6, r4
 8001cc0:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cc2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001e6c <HAL_GPIO_Init+0x1b4>
 8001cc6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001e70 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	680a      	ldr	r2, [r1, #0]
 8001ccc:	fa32 f506 	lsrs.w	r5, r2, r6
 8001cd0:	d102      	bne.n	8001cd8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001cd2:	b003      	add	sp, #12
 8001cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001cd8:	f04f 0801 	mov.w	r8, #1
 8001cdc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001ce4:	4590      	cmp	r8, r2
 8001ce6:	d17f      	bne.n	8001de8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001ce8:	684d      	ldr	r5, [r1, #4]
 8001cea:	2d12      	cmp	r5, #18
 8001cec:	f000 80aa 	beq.w	8001e44 <HAL_GPIO_Init+0x18c>
 8001cf0:	f200 8083 	bhi.w	8001dfa <HAL_GPIO_Init+0x142>
 8001cf4:	2d02      	cmp	r5, #2
 8001cf6:	f000 80a2 	beq.w	8001e3e <HAL_GPIO_Init+0x186>
 8001cfa:	d877      	bhi.n	8001dec <HAL_GPIO_Init+0x134>
 8001cfc:	2d00      	cmp	r5, #0
 8001cfe:	f000 8089 	beq.w	8001e14 <HAL_GPIO_Init+0x15c>
 8001d02:	2d01      	cmp	r5, #1
 8001d04:	f000 8099 	beq.w	8001e3a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d08:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d0c:	2aff      	cmp	r2, #255	; 0xff
 8001d0e:	bf93      	iteet	ls
 8001d10:	4682      	movls	sl, r0
 8001d12:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001d16:	3d08      	subhi	r5, #8
 8001d18:	f8d0 b000 	ldrls.w	fp, [r0]
 8001d1c:	bf92      	itee	ls
 8001d1e:	00b5      	lslls	r5, r6, #2
 8001d20:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001d24:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d26:	fa09 f805 	lsl.w	r8, r9, r5
 8001d2a:	ea2b 0808 	bic.w	r8, fp, r8
 8001d2e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d32:	bf88      	it	hi
 8001d34:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d38:	ea48 0505 	orr.w	r5, r8, r5
 8001d3c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d40:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001d44:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001d48:	d04e      	beq.n	8001de8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4a:	4d45      	ldr	r5, [pc, #276]	; (8001e60 <HAL_GPIO_Init+0x1a8>)
 8001d4c:	4f44      	ldr	r7, [pc, #272]	; (8001e60 <HAL_GPIO_Init+0x1a8>)
 8001d4e:	69ad      	ldr	r5, [r5, #24]
 8001d50:	f026 0803 	bic.w	r8, r6, #3
 8001d54:	f045 0501 	orr.w	r5, r5, #1
 8001d58:	61bd      	str	r5, [r7, #24]
 8001d5a:	69bd      	ldr	r5, [r7, #24]
 8001d5c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d60:	f005 0501 	and.w	r5, r5, #1
 8001d64:	9501      	str	r5, [sp, #4]
 8001d66:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d70:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001d74:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d78:	fa09 f90b 	lsl.w	r9, r9, fp
 8001d7c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d80:	4d38      	ldr	r5, [pc, #224]	; (8001e64 <HAL_GPIO_Init+0x1ac>)
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d063      	beq.n	8001e4e <HAL_GPIO_Init+0x196>
 8001d86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d8a:	42a8      	cmp	r0, r5
 8001d8c:	d061      	beq.n	8001e52 <HAL_GPIO_Init+0x19a>
 8001d8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d92:	42a8      	cmp	r0, r5
 8001d94:	d05f      	beq.n	8001e56 <HAL_GPIO_Init+0x19e>
 8001d96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d9a:	42a8      	cmp	r0, r5
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2503      	moveq	r5, #3
 8001da0:	2504      	movne	r5, #4
 8001da2:	fa05 f50b 	lsl.w	r5, r5, fp
 8001da6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001daa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001dae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001db4:	bf14      	ite	ne
 8001db6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db8:	4395      	biceq	r5, r2
 8001dba:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001dbc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dbe:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc2:	bf14      	ite	ne
 8001dc4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dc6:	4395      	biceq	r5, r2
 8001dc8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd0:	bf14      	ite	ne
 8001dd2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dd4:	4395      	biceq	r5, r2
 8001dd6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dda:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dde:	bf14      	ite	ne
 8001de0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de2:	ea25 0202 	biceq.w	r2, r5, r2
 8001de6:	60da      	str	r2, [r3, #12]
	position++;
 8001de8:	3601      	adds	r6, #1
 8001dea:	e76e      	b.n	8001cca <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001dec:	2d03      	cmp	r5, #3
 8001dee:	d022      	beq.n	8001e36 <HAL_GPIO_Init+0x17e>
 8001df0:	2d11      	cmp	r5, #17
 8001df2:	d189      	bne.n	8001d08 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	68cc      	ldr	r4, [r1, #12]
 8001df6:	3404      	adds	r4, #4
          break;
 8001df8:	e786      	b.n	8001d08 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001dfa:	4f1b      	ldr	r7, [pc, #108]	; (8001e68 <HAL_GPIO_Init+0x1b0>)
 8001dfc:	42bd      	cmp	r5, r7
 8001dfe:	d009      	beq.n	8001e14 <HAL_GPIO_Init+0x15c>
 8001e00:	d812      	bhi.n	8001e28 <HAL_GPIO_Init+0x170>
 8001e02:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001e74 <HAL_GPIO_Init+0x1bc>
 8001e06:	454d      	cmp	r5, r9
 8001e08:	d004      	beq.n	8001e14 <HAL_GPIO_Init+0x15c>
 8001e0a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001e0e:	454d      	cmp	r5, r9
 8001e10:	f47f af7a 	bne.w	8001d08 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e14:	688c      	ldr	r4, [r1, #8]
 8001e16:	b1c4      	cbz	r4, 8001e4a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001e1a:	bf0c      	ite	eq
 8001e1c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001e20:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2408      	movs	r4, #8
 8001e26:	e76f      	b.n	8001d08 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001e28:	4575      	cmp	r5, lr
 8001e2a:	d0f3      	beq.n	8001e14 <HAL_GPIO_Init+0x15c>
 8001e2c:	4565      	cmp	r5, ip
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_GPIO_Init+0x15c>
 8001e30:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001e78 <HAL_GPIO_Init+0x1c0>
 8001e34:	e7eb      	b.n	8001e0e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e36:	2400      	movs	r4, #0
 8001e38:	e766      	b.n	8001d08 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3a:	68cc      	ldr	r4, [r1, #12]
          break;
 8001e3c:	e764      	b.n	8001d08 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e3e:	68cc      	ldr	r4, [r1, #12]
 8001e40:	3408      	adds	r4, #8
          break;
 8001e42:	e761      	b.n	8001d08 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e44:	68cc      	ldr	r4, [r1, #12]
 8001e46:	340c      	adds	r4, #12
          break;
 8001e48:	e75e      	b.n	8001d08 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e4a:	2404      	movs	r4, #4
 8001e4c:	e75c      	b.n	8001d08 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e4e:	2500      	movs	r5, #0
 8001e50:	e7a7      	b.n	8001da2 <HAL_GPIO_Init+0xea>
 8001e52:	2501      	movs	r5, #1
 8001e54:	e7a5      	b.n	8001da2 <HAL_GPIO_Init+0xea>
 8001e56:	2502      	movs	r5, #2
 8001e58:	e7a3      	b.n	8001da2 <HAL_GPIO_Init+0xea>
 8001e5a:	bf00      	nop
 8001e5c:	40010400 	.word	0x40010400
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010800 	.word	0x40010800
 8001e68:	10210000 	.word	0x10210000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10320000 	.word	0x10320000
 8001e74:	10110000 	.word	0x10110000
 8001e78:	10220000 	.word	0x10220000

08001e7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e7c:	6883      	ldr	r3, [r0, #8]
 8001e7e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001e80:	bf14      	ite	ne
 8001e82:	2001      	movne	r0, #1
 8001e84:	2000      	moveq	r0, #0
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	b10a      	cbz	r2, 8001e8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8a:	6101      	str	r1, [r0, #16]
 8001e8c:	4770      	bx	lr
 8001e8e:	0409      	lsls	r1, r1, #16
 8001e90:	e7fb      	b.n	8001e8a <HAL_GPIO_WritePin+0x2>

08001e92 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001e92:	68c3      	ldr	r3, [r0, #12]
 8001e94:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e96:	bf14      	ite	ne
 8001e98:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9a:	6101      	streq	r1, [r0, #16]
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	b918      	cbnz	r0, 8001eb0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001eaa:	b002      	add	sp, #8
 8001eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb0:	6803      	ldr	r3, [r0, #0]
 8001eb2:	07db      	lsls	r3, r3, #31
 8001eb4:	d414      	bmi.n	8001ee0 <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	079f      	lsls	r7, r3, #30
 8001eba:	d45f      	bmi.n	8001f7c <HAL_RCC_OscConfig+0xdc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	0719      	lsls	r1, r3, #28
 8001ec0:	f100 8096 	bmi.w	8001ff0 <HAL_RCC_OscConfig+0x150>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	075a      	lsls	r2, r3, #29
 8001ec8:	f100 80c0 	bmi.w	800204c <HAL_RCC_OscConfig+0x1ac>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001ecc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	f040 812e 	bne.w	8002130 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed4:	6a22      	ldr	r2, [r4, #32]
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	f040 8181 	bne.w	80021de <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 8001edc:	2000      	movs	r0, #0
 8001ede:	e7e4      	b.n	8001eaa <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee0:	4d8e      	ldr	r5, [pc, #568]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	686b      	ldr	r3, [r5, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d007      	beq.n	8001efc <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eec:	686b      	ldr	r3, [r5, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_OscConfig+0x6a>
 8001ef6:	686b      	ldr	r3, [r5, #4]
 8001ef8:	03de      	lsls	r6, r3, #15
 8001efa:	d506      	bpl.n	8001f0a <HAL_RCC_OscConfig+0x6a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	039d      	lsls	r5, r3, #14
 8001f00:	d5d9      	bpl.n	8001eb6 <HAL_RCC_OscConfig+0x16>
 8001f02:	68a3      	ldr	r3, [r4, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1d6      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x16>
 8001f08:	e7ce      	b.n	8001ea8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d110      	bne.n	8001f34 <HAL_RCC_OscConfig+0x94>
 8001f12:	682b      	ldr	r3, [r5, #0]
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fa6b 	bl	80013f4 <HAL_GetTick>
 8001f1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	0398      	lsls	r0, r3, #14
 8001f24:	d4c7      	bmi.n	8001eb6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f26:	f7ff fa65 	bl	80013f4 <HAL_GetTick>
 8001f2a:	1b80      	subs	r0, r0, r6
 8001f2c:	2864      	cmp	r0, #100	; 0x64
 8001f2e:	d9f7      	bls.n	8001f20 <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 8001f30:	2003      	movs	r0, #3
 8001f32:	e7ba      	b.n	8001eaa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f34:	b99b      	cbnz	r3, 8001f5e <HAL_RCC_OscConfig+0xbe>
 8001f36:	682b      	ldr	r3, [r5, #0]
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	602b      	str	r3, [r5, #0]
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f46:	f7ff fa55 	bl	80013f4 <HAL_GetTick>
 8001f4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	0399      	lsls	r1, r3, #14
 8001f50:	d5b1      	bpl.n	8001eb6 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f52:	f7ff fa4f 	bl	80013f4 <HAL_GetTick>
 8001f56:	1b80      	subs	r0, r0, r6
 8001f58:	2864      	cmp	r0, #100	; 0x64
 8001f5a:	d9f7      	bls.n	8001f4c <HAL_RCC_OscConfig+0xac>
 8001f5c:	e7e8      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f62:	682b      	ldr	r3, [r5, #0]
 8001f64:	d103      	bne.n	8001f6e <HAL_RCC_OscConfig+0xce>
 8001f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6a:	602b      	str	r3, [r5, #0]
 8001f6c:	e7d1      	b.n	8001f12 <HAL_RCC_OscConfig+0x72>
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	602b      	str	r3, [r5, #0]
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	e7cd      	b.n	8001f18 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7c:	4d67      	ldr	r5, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	686b      	ldr	r3, [r5, #4]
 8001f80:	f013 0f0c 	tst.w	r3, #12
 8001f84:	d007      	beq.n	8001f96 <HAL_RCC_OscConfig+0xf6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f86:	686b      	ldr	r3, [r5, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d110      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x112>
 8001f90:	686b      	ldr	r3, [r5, #4]
 8001f92:	03da      	lsls	r2, r3, #15
 8001f94:	d40d      	bmi.n	8001fb2 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	079b      	lsls	r3, r3, #30
 8001f9a:	d502      	bpl.n	8001fa2 <HAL_RCC_OscConfig+0x102>
 8001f9c:	6963      	ldr	r3, [r4, #20]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d182      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	69a2      	ldr	r2, [r4, #24]
 8001fa6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001faa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	e784      	b.n	8001ebc <HAL_RCC_OscConfig+0x1c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb2:	6962      	ldr	r2, [r4, #20]
 8001fb4:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	b16a      	cbz	r2, 8001fd4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fa1a 	bl	80013f4 <HAL_GetTick>
 8001fc0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	682b      	ldr	r3, [r5, #0]
 8001fc4:	079f      	lsls	r7, r3, #30
 8001fc6:	d4ec      	bmi.n	8001fa2 <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fa14 	bl	80013f4 <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9f7      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x122>
 8001fd2:	e7ad      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 8001fd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fa0d 	bl	80013f4 <HAL_GetTick>
 8001fda:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fdc:	682b      	ldr	r3, [r5, #0]
 8001fde:	0798      	lsls	r0, r3, #30
 8001fe0:	f57f af6c 	bpl.w	8001ebc <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fa06 	bl	80013f4 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d9f6      	bls.n	8001fdc <HAL_RCC_OscConfig+0x13c>
 8001fee:	e79f      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff0:	69e2      	ldr	r2, [r4, #28]
 8001ff2:	4d4a      	ldr	r5, [pc, #296]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_RCC_OscConfig+0x284>)
 8001ff6:	b1da      	cbz	r2, 8002030 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f9fa 	bl	80013f4 <HAL_GetTick>
 8002000:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002004:	079b      	lsls	r3, r3, #30
 8002006:	d50d      	bpl.n	8002024 <HAL_RCC_OscConfig+0x184>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002008:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x288>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fbb3 f3f2 	udiv	r3, r3, r2
 8002014:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002016:	bf00      	nop
  }
  while (Delay --);
 8002018:	9b01      	ldr	r3, [sp, #4]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	9201      	str	r2, [sp, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <HAL_RCC_OscConfig+0x176>
 8002022:	e74f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff f9e6 	bl	80013f4 <HAL_GetTick>
 8002028:	1b80      	subs	r0, r0, r6
 800202a:	2802      	cmp	r0, #2
 800202c:	d9e9      	bls.n	8002002 <HAL_RCC_OscConfig+0x162>
 800202e:	e77f      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSI_DISABLE();
 8002030:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002032:	f7ff f9df 	bl	80013f4 <HAL_GetTick>
 8002036:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800203a:	079f      	lsls	r7, r3, #30
 800203c:	f57f af42 	bpl.w	8001ec4 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff f9d8 	bl	80013f4 <HAL_GetTick>
 8002044:	1b80      	subs	r0, r0, r6
 8002046:	2802      	cmp	r0, #2
 8002048:	d9f6      	bls.n	8002038 <HAL_RCC_OscConfig+0x198>
 800204a:	e771      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204c:	4d33      	ldr	r5, [pc, #204]	; (800211c <HAL_RCC_OscConfig+0x27c>)
 800204e:	69eb      	ldr	r3, [r5, #28]
 8002050:	00de      	lsls	r6, r3, #3
 8002052:	d424      	bmi.n	800209e <HAL_RCC_OscConfig+0x1fe>
      pwrclkchanged = SET;
 8002054:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	69eb      	ldr	r3, [r5, #28]
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61eb      	str	r3, [r5, #28]
 800205e:	69eb      	ldr	r3, [r5, #28]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4e30      	ldr	r6, [pc, #192]	; (800212c <HAL_RCC_OscConfig+0x28c>)
 800206a:	6833      	ldr	r3, [r6, #0]
 800206c:	05d8      	lsls	r0, r3, #23
 800206e:	d518      	bpl.n	80020a2 <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	6923      	ldr	r3, [r4, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d126      	bne.n	80020c4 <HAL_RCC_OscConfig+0x224>
 8002076:	6a2b      	ldr	r3, [r5, #32]
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800207e:	f7ff f9b9 	bl	80013f4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002086:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	6a2b      	ldr	r3, [r5, #32]
 800208a:	079a      	lsls	r2, r3, #30
 800208c:	d53f      	bpl.n	800210e <HAL_RCC_OscConfig+0x26e>
    if (pwrclkchanged == SET)
 800208e:	2f00      	cmp	r7, #0
 8002090:	f43f af1c 	beq.w	8001ecc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002094:	69eb      	ldr	r3, [r5, #28]
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209a:	61eb      	str	r3, [r5, #28]
 800209c:	e716      	b.n	8001ecc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800209e:	2700      	movs	r7, #0
 80020a0:	e7e2      	b.n	8002068 <HAL_RCC_OscConfig+0x1c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	6833      	ldr	r3, [r6, #0]
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80020aa:	f7ff f9a3 	bl	80013f4 <HAL_GetTick>
 80020ae:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	6833      	ldr	r3, [r6, #0]
 80020b2:	05d9      	lsls	r1, r3, #23
 80020b4:	d4dc      	bmi.n	8002070 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7ff f99d 	bl	80013f4 <HAL_GetTick>
 80020ba:	eba0 0008 	sub.w	r0, r0, r8
 80020be:	2864      	cmp	r0, #100	; 0x64
 80020c0:	d9f6      	bls.n	80020b0 <HAL_RCC_OscConfig+0x210>
 80020c2:	e735      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	b9ab      	cbnz	r3, 80020f2 <HAL_RCC_OscConfig+0x252>
 80020c6:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	622b      	str	r3, [r5, #32]
 80020d2:	6a2b      	ldr	r3, [r5, #32]
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80020da:	f7ff f98b 	bl	80013f4 <HAL_GetTick>
 80020de:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	6a2b      	ldr	r3, [r5, #32]
 80020e2:	079b      	lsls	r3, r3, #30
 80020e4:	d5d3      	bpl.n	800208e <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff f985 	bl	80013f4 <HAL_GetTick>
 80020ea:	1b80      	subs	r0, r0, r6
 80020ec:	4540      	cmp	r0, r8
 80020ee:	d9f7      	bls.n	80020e0 <HAL_RCC_OscConfig+0x240>
 80020f0:	e71e      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	6a2b      	ldr	r3, [r5, #32]
 80020f6:	d103      	bne.n	8002100 <HAL_RCC_OscConfig+0x260>
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	622b      	str	r3, [r5, #32]
 80020fe:	e7ba      	b.n	8002076 <HAL_RCC_OscConfig+0x1d6>
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	622b      	str	r3, [r5, #32]
 8002106:	6a2b      	ldr	r3, [r5, #32]
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	e7b6      	b.n	800207c <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff f971 	bl	80013f4 <HAL_GetTick>
 8002112:	eba0 0008 	sub.w	r0, r0, r8
 8002116:	42b0      	cmp	r0, r6
 8002118:	d9b6      	bls.n	8002088 <HAL_RCC_OscConfig+0x1e8>
 800211a:	e709      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
 800211c:	40021000 	.word	0x40021000
 8002120:	42420000 	.word	0x42420000
 8002124:	42420480 	.word	0x42420480
 8002128:	200000a0 	.word	0x200000a0
 800212c:	40007000 	.word	0x40007000
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002130:	4d58      	ldr	r5, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x3f4>)
 8002132:	686b      	ldr	r3, [r5, #4]
 8002134:	03d8      	lsls	r0, r3, #15
 8002136:	d508      	bpl.n	800214a <HAL_RCC_OscConfig+0x2aa>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002138:	686b      	ldr	r3, [r5, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800213e:	2b08      	cmp	r3, #8
 8002140:	d103      	bne.n	800214a <HAL_RCC_OscConfig+0x2aa>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002142:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002144:	03d9      	lsls	r1, r3, #15
 8002146:	f53f aeaf 	bmi.w	8001ea8 <HAL_RCC_OscConfig+0x8>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800214a:	2a02      	cmp	r2, #2
 800214c:	d133      	bne.n	80021b6 <HAL_RCC_OscConfig+0x316>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	00da      	lsls	r2, r3, #3
 8002152:	d506      	bpl.n	8002162 <HAL_RCC_OscConfig+0x2c2>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002154:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002156:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800215c:	4293      	cmp	r3, r2
 800215e:	f47f aea3 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL2_DISABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	4e4c      	ldr	r6, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x3f8>)
 8002166:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002168:	f7ff f944 	bl	80013f4 <HAL_GetTick>
 800216c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	d41a      	bmi.n	80021aa <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002174:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002176:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217c:	4313      	orrs	r3, r2
 800217e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002180:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002182:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002184:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002188:	4313      	orrs	r3, r2
 800218a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 800218c:	2301      	movs	r3, #1
 800218e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002190:	f7ff f930 	bl	80013f4 <HAL_GetTick>
 8002194:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002196:	682b      	ldr	r3, [r5, #0]
 8002198:	011f      	lsls	r7, r3, #4
 800219a:	f53f ae9b 	bmi.w	8001ed4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800219e:	f7ff f929 	bl	80013f4 <HAL_GetTick>
 80021a2:	1b80      	subs	r0, r0, r6
 80021a4:	2864      	cmp	r0, #100	; 0x64
 80021a6:	d9f6      	bls.n	8002196 <HAL_RCC_OscConfig+0x2f6>
 80021a8:	e6c2      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80021aa:	f7ff f923 	bl	80013f4 <HAL_GetTick>
 80021ae:	1bc0      	subs	r0, r0, r7
 80021b0:	2864      	cmp	r0, #100	; 0x64
 80021b2:	d9dc      	bls.n	800216e <HAL_RCC_OscConfig+0x2ce>
 80021b4:	e6bc      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL2_DISABLE();
 80021b6:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80021b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_RCC_OscConfig+0x3f8>)
 80021c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021c4:	f7ff f916 	bl	80013f4 <HAL_GetTick>
 80021c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80021ca:	682b      	ldr	r3, [r5, #0]
 80021cc:	0118      	lsls	r0, r3, #4
 80021ce:	f57f ae81 	bpl.w	8001ed4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80021d2:	f7ff f90f 	bl	80013f4 <HAL_GetTick>
 80021d6:	1b80      	subs	r0, r0, r6
 80021d8:	2864      	cmp	r0, #100	; 0x64
 80021da:	d9f6      	bls.n	80021ca <HAL_RCC_OscConfig+0x32a>
 80021dc:	e6a8      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_OscConfig+0x3f4>)
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	461d      	mov	r5, r3
 80021e4:	f001 010c 	and.w	r1, r1, #12
 80021e8:	2908      	cmp	r1, #8
 80021ea:	d041      	beq.n	8002270 <HAL_RCC_OscConfig+0x3d0>
 80021ec:	2300      	movs	r3, #0
 80021ee:	4e2b      	ldr	r6, [pc, #172]	; (800229c <HAL_RCC_OscConfig+0x3fc>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80021f2:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	d12f      	bne.n	8002256 <HAL_RCC_OscConfig+0x3b6>
        tickstart = HAL_GetTick();
 80021f6:	f7ff f8fd 	bl	80013f4 <HAL_GetTick>
 80021fa:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	0199      	lsls	r1, r3, #6
 8002200:	d423      	bmi.n	800224a <HAL_RCC_OscConfig+0x3aa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d109      	bne.n	800221e <HAL_RCC_OscConfig+0x37e>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800220a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800220c:	6861      	ldr	r1, [r4, #4]
 800220e:	430a      	orrs	r2, r1
 8002210:	62ea      	str	r2, [r5, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002212:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002214:	68e1      	ldr	r1, [r4, #12]
 8002216:	f022 020f 	bic.w	r2, r2, #15
 800221a:	430a      	orrs	r2, r1
 800221c:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002220:	686a      	ldr	r2, [r5, #4]
 8002222:	430b      	orrs	r3, r1
 8002224:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002228:	4313      	orrs	r3, r2
 800222a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800222c:	2301      	movs	r3, #1
 800222e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002230:	f7ff f8e0 	bl	80013f4 <HAL_GetTick>
 8002234:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002236:	682b      	ldr	r3, [r5, #0]
 8002238:	019a      	lsls	r2, r3, #6
 800223a:	f53f ae4f 	bmi.w	8001edc <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff f8d9 	bl	80013f4 <HAL_GetTick>
 8002242:	1b00      	subs	r0, r0, r4
 8002244:	2802      	cmp	r0, #2
 8002246:	d9f6      	bls.n	8002236 <HAL_RCC_OscConfig+0x396>
 8002248:	e672      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff f8d3 	bl	80013f4 <HAL_GetTick>
 800224e:	1bc0      	subs	r0, r0, r7
 8002250:	2802      	cmp	r0, #2
 8002252:	d9d3      	bls.n	80021fc <HAL_RCC_OscConfig+0x35c>
 8002254:	e66c      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
        tickstart = HAL_GetTick();
 8002256:	f7ff f8cd 	bl	80013f4 <HAL_GetTick>
 800225a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	019b      	lsls	r3, r3, #6
 8002260:	f57f ae3c 	bpl.w	8001edc <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff f8c6 	bl	80013f4 <HAL_GetTick>
 8002268:	1b00      	subs	r0, r0, r4
 800226a:	2802      	cmp	r0, #2
 800226c:	d9f6      	bls.n	800225c <HAL_RCC_OscConfig+0x3bc>
 800226e:	e65f      	b.n	8001f30 <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	2a01      	cmp	r2, #1
 8002272:	f43f ae19 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x8>
        pll_config = RCC->CFGR;
 8002276:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800227a:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800227e:	429a      	cmp	r2, r3
 8002280:	f47f ae12 	bne.w	8001ea8 <HAL_RCC_OscConfig+0x8>
 8002284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002286:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800228a:	1ac0      	subs	r0, r0, r3
 800228c:	bf18      	it	ne
 800228e:	2001      	movne	r0, #1
 8002290:	e60b      	b.n	8001eaa <HAL_RCC_OscConfig+0xa>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	42420068 	.word	0x42420068
 800229c:	42420060 	.word	0x42420060

080022a0 <HAL_RCC_GetSysClockFreq>:
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80022a4:	466a      	mov	r2, sp
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a8:	f103 0508 	add.w	r5, r3, #8
 80022ac:	4614      	mov	r4, r2
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	3308      	adds	r3, #8
 80022b4:	c403      	stmia	r4!, {r0, r1}
 80022b6:	42ab      	cmp	r3, r5
 80022b8:	4622      	mov	r2, r4
 80022ba:	d1f7      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0xc>
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	889b      	ldrh	r3, [r3, #4]
 80022c0:	6020      	str	r0, [r4, #0]
 80022c2:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c6:	ac04      	add	r4, sp, #16
 80022c8:	f103 0510 	add.w	r5, r3, #16
 80022cc:	4622      	mov	r2, r4
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	3308      	adds	r3, #8
 80022d4:	c203      	stmia	r2!, {r0, r1}
 80022d6:	42ab      	cmp	r3, r5
 80022d8:	4614      	mov	r4, r2
 80022da:	d1f7      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 80022dc:	491e      	ldr	r1, [pc, #120]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	f003 020c 	and.w	r2, r3, #12
 80022e4:	2a08      	cmp	r2, #8
 80022e6:	d131      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80022ec:	a808      	add	r0, sp, #32
 80022ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f2:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f6:	d526      	bpl.n	8002346 <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80022f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4403      	add	r3, r0
 8002300:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002304:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002306:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_RCC_GetSysClockFreq+0xbc>)
 800230c:	d016      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800230e:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002310:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002312:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8002316:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002318:	fba4 4506 	umull	r4, r5, r4, r6
 800231c:	fba4 0103 	umull	r0, r1, r4, r3
 8002320:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002324:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8002328:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800232a:	fba3 2302 	umull	r2, r3, r3, r2
 800232e:	f7fe fe97 	bl	8001060 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002332:	2e0d      	cmp	r6, #13
 8002334:	d100      	bne.n	8002338 <HAL_RCC_GetSysClockFreq+0x98>
          pllclk = pllclk / 2;
 8002336:	0840      	lsrs	r0, r0, #1
}
 8002338:	b009      	add	sp, #36	; 0x24
 800233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800233c:	fb03 f006 	mul.w	r0, r3, r6
 8002340:	fbb0 f0f2 	udiv	r0, r0, r2
 8002344:	e7f5      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002348:	4370      	muls	r0, r6
 800234a:	e7f5      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 800234e:	e7f3      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x98>
 8002350:	0800708c 	.word	0x0800708c
 8002354:	0800709a 	.word	0x0800709a
 8002358:	40021000 	.word	0x40021000
 800235c:	007a1200 	.word	0x007a1200
 8002360:	003d0900 	.word	0x003d0900

08002364 <HAL_RCC_ClockConfig>:
{
 8002364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002368:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800236a:	4604      	mov	r4, r0
 800236c:	b910      	cbnz	r0, 8002374 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800236e:	2001      	movs	r0, #1
 8002370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4a45      	ldr	r2, [pc, #276]	; (800248c <HAL_RCC_ClockConfig+0x128>)
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	428b      	cmp	r3, r1
 800237e:	d329      	bcc.n	80023d4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	6821      	ldr	r1, [r4, #0]
 8002382:	078e      	lsls	r6, r1, #30
 8002384:	d431      	bmi.n	80023ea <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	07ca      	lsls	r2, r1, #31
 8002388:	d444      	bmi.n	8002414 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800238a:	4a40      	ldr	r2, [pc, #256]	; (800248c <HAL_RCC_ClockConfig+0x128>)
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	429d      	cmp	r5, r3
 8002394:	d367      	bcc.n	8002466 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	4d3d      	ldr	r5, [pc, #244]	; (8002490 <HAL_RCC_ClockConfig+0x12c>)
 800239a:	f012 0f04 	tst.w	r2, #4
 800239e:	d16e      	bne.n	800247e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	0713      	lsls	r3, r2, #28
 80023a2:	d506      	bpl.n	80023b2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a4:	686b      	ldr	r3, [r5, #4]
 80023a6:	6922      	ldr	r2, [r4, #16]
 80023a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80023ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023b0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b2:	f7ff ff75 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 80023b6:	686b      	ldr	r3, [r5, #4]
 80023b8:	4a36      	ldr	r2, [pc, #216]	; (8002494 <HAL_RCC_ClockConfig+0x130>)
 80023ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	40d8      	lsrs	r0, r3
 80023c2:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCC_ClockConfig+0x134>)
 80023c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80023c6:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_RCC_ClockConfig+0x138>)
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f7fe ffd1 	bl	8001370 <HAL_InitTick>
  return HAL_OK;
 80023ce:	2000      	movs	r0, #0
 80023d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	f023 0307 	bic.w	r3, r3, #7
 80023da:	430b      	orrs	r3, r1
 80023dc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	6813      	ldr	r3, [r2, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4299      	cmp	r1, r3
 80023e6:	d1c2      	bne.n	800236e <HAL_RCC_ClockConfig+0xa>
 80023e8:	e7ca      	b.n	8002380 <HAL_RCC_ClockConfig+0x1c>
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	bf1e      	ittt	ne
 80023f2:	685a      	ldrne	r2, [r3, #4]
 80023f4:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80023f8:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	bf42      	ittt	mi
 80023fe:	685a      	ldrmi	r2, [r3, #4]
 8002400:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002404:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	68a0      	ldr	r0, [r4, #8]
 800240a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800240e:	4302      	orrs	r2, r0
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	e7b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002414:	6862      	ldr	r2, [r4, #4]
 8002416:	4e1e      	ldr	r6, [pc, #120]	; (8002490 <HAL_RCC_ClockConfig+0x12c>)
 8002418:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241c:	d11b      	bne.n	8002456 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	d0a4      	beq.n	800236e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002424:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	4313      	orrs	r3, r2
 8002430:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002432:	f7fe ffdf 	bl	80013f4 <HAL_GetTick>
 8002436:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002438:	6873      	ldr	r3, [r6, #4]
 800243a:	6862      	ldr	r2, [r4, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002444:	d0a1      	beq.n	800238a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe ffd5 	bl	80013f4 <HAL_GetTick>
 800244a:	1bc0      	subs	r0, r0, r7
 800244c:	4540      	cmp	r0, r8
 800244e:	d9f3      	bls.n	8002438 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002450:	2003      	movs	r0, #3
}
 8002452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	2a02      	cmp	r2, #2
 8002458:	d102      	bne.n	8002460 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800245e:	e7e0      	b.n	8002422 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	f013 0f02 	tst.w	r3, #2
 8002464:	e7dd      	b.n	8002422 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	f023 0307 	bic.w	r3, r3, #7
 800246c:	432b      	orrs	r3, r5
 800246e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002470:	6813      	ldr	r3, [r2, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	429d      	cmp	r5, r3
 8002478:	f47f af79 	bne.w	800236e <HAL_RCC_ClockConfig+0xa>
 800247c:	e78b      	b.n	8002396 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247e:	686b      	ldr	r3, [r5, #4]
 8002480:	68e1      	ldr	r1, [r4, #12]
 8002482:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002486:	430b      	orrs	r3, r1
 8002488:	606b      	str	r3, [r5, #4]
 800248a:	e789      	b.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	08007441 	.word	0x08007441
 8002498:	200000a0 	.word	0x200000a0
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80024ae:	6810      	ldr	r0, [r2, #0]
}
 80024b0:	40d8      	lsrs	r0, r3
 80024b2:	4770      	bx	lr
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08007451 	.word	0x08007451
 80024bc:	200000a0 	.word	0x200000a0

080024c0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80024ce:	6810      	ldr	r0, [r2, #0]
}
 80024d0:	40d8      	lsrs	r0, r3
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08007451 	.word	0x08007451
 80024dc:	200000a0 	.word	0x200000a0

080024e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024e0:	6803      	ldr	r3, [r0, #0]
{
 80024e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024e6:	f013 0f01 	tst.w	r3, #1
{
 80024ea:	4605      	mov	r5, r0
 80024ec:	4c57      	ldr	r4, [pc, #348]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024ee:	d01f      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	69e3      	ldr	r3, [r4, #28]
 80024f2:	00da      	lsls	r2, r3, #3
 80024f4:	d447      	bmi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80024f6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	69e3      	ldr	r3, [r4, #28]
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fe:	61e3      	str	r3, [r4, #28]
 8002500:	69e3      	ldr	r3, [r4, #28]
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4e51      	ldr	r6, [pc, #324]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800250c:	6833      	ldr	r3, [r6, #0]
 800250e:	05db      	lsls	r3, r3, #23
 8002510:	d53b      	bpl.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002512:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002514:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002518:	d14b      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800251a:	6a23      	ldr	r3, [r4, #32]
 800251c:	686a      	ldr	r2, [r5, #4]
 800251e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002522:	4313      	orrs	r3, r2
 8002524:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002526:	b11f      	cbz	r7, 8002530 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	69e3      	ldr	r3, [r4, #28]
 800252a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800252e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002530:	682a      	ldr	r2, [r5, #0]
 8002532:	0793      	lsls	r3, r2, #30
 8002534:	d505      	bpl.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002536:	6863      	ldr	r3, [r4, #4]
 8002538:	68a9      	ldr	r1, [r5, #8]
 800253a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800253e:	430b      	orrs	r3, r1
 8002540:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002542:	0757      	lsls	r7, r2, #29
 8002544:	d505      	bpl.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002548:	68e9      	ldr	r1, [r5, #12]
 800254a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800254e:	430b      	orrs	r3, r1
 8002550:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002552:	0716      	lsls	r6, r2, #28
 8002554:	d505      	bpl.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002558:	692a      	ldr	r2, [r5, #16]
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	4313      	orrs	r3, r2
 8002560:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002564:	0398      	lsls	r0, r3, #14
 8002566:	d466      	bmi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002568:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800256a:	0359      	lsls	r1, r3, #13
 800256c:	d463      	bmi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800256e:	6828      	ldr	r0, [r5, #0]
 8002570:	f010 0010 	ands.w	r0, r0, #16
 8002574:	d01a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	69ea      	ldr	r2, [r5, #28]
 800257a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800257e:	4313      	orrs	r3, r2
 8002580:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002582:	2000      	movs	r0, #0
 8002584:	e012      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2700      	movs	r7, #0
 8002588:	e7bf      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	6833      	ldr	r3, [r6, #0]
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002592:	f7fe ff2f 	bl	80013f4 <HAL_GetTick>
 8002596:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	6833      	ldr	r3, [r6, #0]
 800259a:	05d8      	lsls	r0, r3, #23
 800259c:	d4b9      	bmi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe ff29 	bl	80013f4 <HAL_GetTick>
 80025a2:	eba0 0008 	sub.w	r0, r0, r8
 80025a6:	2864      	cmp	r0, #100	; 0x64
 80025a8:	d9f6      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 80025aa:	2003      	movs	r0, #3
}
 80025ac:	b002      	add	sp, #8
 80025ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b2:	686a      	ldr	r2, [r5, #4]
 80025b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d0ae      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80025bc:	2001      	movs	r0, #1
 80025be:	4a25      	ldr	r2, [pc, #148]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80025c2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025c4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ca:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80025cc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025ce:	07d9      	lsls	r1, r3, #31
 80025d0:	d5a3      	bpl.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80025d2:	f7fe ff0f 	bl	80013f4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80025da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	6a23      	ldr	r3, [r4, #32]
 80025de:	079a      	lsls	r2, r3, #30
 80025e0:	d49b      	bmi.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe ff07 	bl	80013f4 <HAL_GetTick>
 80025e6:	1b80      	subs	r0, r0, r6
 80025e8:	4540      	cmp	r0, r8
 80025ea:	d9f7      	bls.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80025ec:	e7dd      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	69a9      	ldr	r1, [r5, #24]
 80025f2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80025f6:	d004      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x122>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80025f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025fa:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80025fe:	428a      	cmp	r2, r1
 8002600:	d122      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002608:	430b      	orrs	r3, r1
 800260a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800260c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800260e:	696a      	ldr	r2, [r5, #20]
 8002610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002614:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8002616:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002618:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800261c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800261e:	f7fe fee9 	bl	80013f4 <HAL_GetTick>
 8002622:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	d4a1      	bmi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800262a:	f7fe fee3 	bl	80013f4 <HAL_GetTick>
 800262e:	1b80      	subs	r0, r0, r6
 8002630:	2864      	cmp	r0, #100	; 0x64
 8002632:	d9f7      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002634:	e7b9      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	d5d8      	bpl.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800263c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800263e:	696a      	ldr	r2, [r5, #20]
 8002640:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002644:	4293      	cmp	r3, r2
 8002646:	d092      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8002648:	2001      	movs	r0, #1
 800264a:	e7af      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
 8002654:	42420440 	.word	0x42420440
 8002658:	42420070 	.word	0x42420070

0800265c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 800265e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266e:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002670:	bf1e      	ittt	ne
 8002672:	681a      	ldrne	r2, [r3, #0]
 8002674:	f042 0201 	orrne.w	r2, r2, #1
 8002678:	601a      	strne	r2, [r3, #0]
}
 800267a:	4770      	bx	lr

0800267c <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800267c:	6803      	ldr	r3, [r0, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002686:	f241 1211 	movw	r2, #4369	; 0x1111
 800268a:	6a19      	ldr	r1, [r3, #32]
 800268c:	4211      	tst	r1, r2
 800268e:	d108      	bne.n	80026a2 <HAL_TIM_Base_Stop_IT+0x26>
 8002690:	f240 4244 	movw	r2, #1092	; 0x444
 8002694:	6a19      	ldr	r1, [r3, #32]
 8002696:	4211      	tst	r1, r2
 8002698:	bf02      	ittt	eq
 800269a:	681a      	ldreq	r2, [r3, #0]
 800269c:	f022 0201 	biceq.w	r2, r2, #1
 80026a0:	601a      	streq	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80026a2:	2000      	movs	r0, #0
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_OC_DelayElapsedCallback>:
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_IC_CaptureCallback>:
 80026a8:	4770      	bx	lr

080026aa <HAL_TIM_PWM_PulseFinishedCallback>:
 80026aa:	4770      	bx	lr

080026ac <HAL_TIM_TriggerCallback>:
 80026ac:	4770      	bx	lr

080026ae <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ae:	6803      	ldr	r3, [r0, #0]
{
 80026b0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b2:	691a      	ldr	r2, [r3, #16]
{
 80026b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b6:	0791      	lsls	r1, r2, #30
 80026b8:	d50e      	bpl.n	80026d8 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	0792      	lsls	r2, r2, #30
 80026be:	d50b      	bpl.n	80026d8 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026c0:	f06f 0202 	mvn.w	r2, #2
 80026c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c6:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ca:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026cc:	079b      	lsls	r3, r3, #30
 80026ce:	d077      	beq.n	80027c0 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d0:	f7ff ffea 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d4:	2300      	movs	r3, #0
 80026d6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	0750      	lsls	r0, r2, #29
 80026de:	d510      	bpl.n	8002702 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	0751      	lsls	r1, r2, #29
 80026e4:	d50d      	bpl.n	8002702 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e6:	f06f 0204 	mvn.w	r2, #4
 80026ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ec:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026ee:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f8:	d068      	beq.n	80027cc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	f7ff ffd5 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	2300      	movs	r3, #0
 8002700:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	0712      	lsls	r2, r2, #28
 8002708:	d50f      	bpl.n	800272a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	0710      	lsls	r0, r2, #28
 800270e:	d50c      	bpl.n	800272a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002710:	f06f 0208 	mvn.w	r2, #8
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002716:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002718:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800271c:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002720:	d05a      	beq.n	80027d8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	f7ff ffc1 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	2300      	movs	r3, #0
 8002728:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	06d2      	lsls	r2, r2, #27
 8002730:	d510      	bpl.n	8002754 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	06d0      	lsls	r0, r2, #27
 8002736:	d50d      	bpl.n	8002754 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002738:	f06f 0210 	mvn.w	r2, #16
 800273c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800273e:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002740:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002742:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002744:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002748:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274a:	d04b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800274c:	f7ff ffac 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002750:	2300      	movs	r3, #0
 8002752:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	07d1      	lsls	r1, r2, #31
 800275a:	d508      	bpl.n	800276e <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	07d2      	lsls	r2, r2, #31
 8002760:	d505      	bpl.n	800276e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002762:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002766:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002768:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800276a:	f000 fd79 	bl	8003260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	0610      	lsls	r0, r2, #24
 8002774:	d508      	bpl.n	8002788 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	0611      	lsls	r1, r2, #24
 800277a:	d505      	bpl.n	8002788 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800277c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002780:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002782:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002784:	f000 f8af 	bl	80028e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	0652      	lsls	r2, r2, #25
 800278e:	d508      	bpl.n	80027a2 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	0650      	lsls	r0, r2, #25
 8002794:	d505      	bpl.n	80027a2 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002796:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800279a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800279c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800279e:	f7ff ff85 	bl	80026ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	0691      	lsls	r1, r2, #26
 80027a8:	d522      	bpl.n	80027f0 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	0692      	lsls	r2, r2, #26
 80027ae:	d51f      	bpl.n	80027f0 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b0:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b4:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80027bc:	f000 b892 	b.w	80028e4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c0:	f7ff ff71 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff ff70 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
 80027ca:	e783      	b.n	80026d4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027cc:	f7ff ff6b 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff ff6a 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
 80027d6:	e792      	b.n	80026fe <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d8:	f7ff ff65 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff ff64 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
 80027e2:	e7a0      	b.n	8002726 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e4:	f7ff ff5f 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff ff5e 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
 80027ee:	e7af      	b.n	8002750 <HAL_TIM_IRQHandler+0xa2>
 80027f0:	bd10      	pop	{r4, pc}
	...

080027f4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 80027f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	4290      	cmp	r0, r2
 80027fa:	d00e      	beq.n	800281a <TIM_Base_SetConfig+0x26>
 80027fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002800:	d00b      	beq.n	800281a <TIM_Base_SetConfig+0x26>
 8002802:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002806:	4290      	cmp	r0, r2
 8002808:	d007      	beq.n	800281a <TIM_Base_SetConfig+0x26>
 800280a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800280e:	4290      	cmp	r0, r2
 8002810:	d003      	beq.n	800281a <TIM_Base_SetConfig+0x26>
 8002812:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002816:	4290      	cmp	r0, r2
 8002818:	d119      	bne.n	800284e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800281a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002820:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <TIM_Base_SetConfig+0x7c>)
 8002824:	4290      	cmp	r0, r2
 8002826:	d00e      	beq.n	8002846 <TIM_Base_SetConfig+0x52>
 8002828:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800282c:	d00b      	beq.n	8002846 <TIM_Base_SetConfig+0x52>
 800282e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002832:	4290      	cmp	r0, r2
 8002834:	d007      	beq.n	8002846 <TIM_Base_SetConfig+0x52>
 8002836:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800283a:	4290      	cmp	r0, r2
 800283c:	d003      	beq.n	8002846 <TIM_Base_SetConfig+0x52>
 800283e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002842:	4290      	cmp	r0, r2
 8002844:	d103      	bne.n	800284e <TIM_Base_SetConfig+0x5a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002846:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284e:	694a      	ldr	r2, [r1, #20]
 8002850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002854:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002856:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002858:	688b      	ldr	r3, [r1, #8]
 800285a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	680b      	ldr	r3, [r1, #0]
 800285e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <TIM_Base_SetConfig+0x7c>)
 8002862:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002864:	bf04      	itt	eq
 8002866:	690b      	ldreq	r3, [r1, #16]
 8002868:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800286a:	2301      	movs	r3, #1
 800286c:	6143      	str	r3, [r0, #20]
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00

08002874 <HAL_TIM_Base_Init>:
{
 8002874:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002876:	4604      	mov	r4, r0
 8002878:	b1a0      	cbz	r0, 80028a4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800287e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002882:	b91b      	cbnz	r3, 800288c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002884:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002888:	f003 f91e 	bl	8005ac8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002894:	1d21      	adds	r1, r4, #4
 8002896:	f7ff ffad 	bl	80027f4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800289a:	2301      	movs	r3, #1
  return HAL_OK;
 800289c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800289e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
}
 80028a6:	bd10      	pop	{r4, pc}

080028a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80028ac:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f04f 0302 	mov.w	r3, #2
 80028b4:	d014      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80028bc:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028be:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c0:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028c2:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028cc:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ce:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d0:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028d2:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028da:	2300      	movs	r3, #0
 80028dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80028e0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80028e2:	bd30      	pop	{r4, r5, pc}

080028e4 <HAL_TIMEx_CommutCallback>:
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	4770      	bx	lr

080028e8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e8:	6803      	ldr	r3, [r0, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028fa:	2320      	movs	r3, #32
 80028fc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002900:	4770      	bx	lr
	...

08002904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	68c1      	ldr	r1, [r0, #12]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	2419      	movs	r4, #25
 8002910:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002914:	430a      	orrs	r2, r1
 8002916:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002918:	6882      	ldr	r2, [r0, #8]
 800291a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800291c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800291e:	4302      	orrs	r2, r0
 8002920:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002922:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002926:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800292a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	69a9      	ldr	r1, [r5, #24]
 8002934:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002938:	430a      	orrs	r2, r1
 800293a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <UART_SetConfig+0x70>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d114      	bne.n	800296c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002942:	f7ff fdbd 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002946:	4360      	muls	r0, r4
 8002948:	686c      	ldr	r4, [r5, #4]
 800294a:	2264      	movs	r2, #100	; 0x64
 800294c:	00a4      	lsls	r4, r4, #2
 800294e:	fbb0 f0f4 	udiv	r0, r0, r4
 8002952:	fbb0 f4f2 	udiv	r4, r0, r2
 8002956:	fb02 0314 	mls	r3, r2, r4, r0
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	3332      	adds	r3, #50	; 0x32
 800295e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002962:	6829      	ldr	r1, [r5, #0]
 8002964:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002968:	608b      	str	r3, [r1, #8]
 800296a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800296c:	f7ff fd98 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8002970:	e7e9      	b.n	8002946 <UART_SetConfig+0x42>
 8002972:	bf00      	nop
 8002974:	40013800 	.word	0x40013800

08002978 <HAL_UART_Init>:
{
 8002978:	b510      	push	{r4, lr}
  if (huart == NULL)
 800297a:	4604      	mov	r4, r0
 800297c:	b340      	cbz	r0, 80029d0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800297e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002986:	b91b      	cbnz	r3, 8002990 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002988:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800298c:	f003 f8d0 	bl	8005b30 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002990:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002992:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002994:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002998:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800299a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800299c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80029a2:	f7ff ffaf 	bl	8002904 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80029c2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80029ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029d0:	2001      	movs	r0, #1
}
 80029d2:	bd10      	pop	{r4, pc}

080029d4 <HAL_UART_TxCpltCallback>:
 80029d4:	4770      	bx	lr

080029d6 <HAL_UART_RxCpltCallback>:
 80029d6:	4770      	bx	lr

080029d8 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029d8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80029dc:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029de:	2b22      	cmp	r3, #34	; 0x22
 80029e0:	d136      	bne.n	8002a50 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029e2:	6883      	ldr	r3, [r0, #8]
 80029e4:	6901      	ldr	r1, [r0, #16]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	6802      	ldr	r2, [r0, #0]
 80029ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029ee:	d123      	bne.n	8002a38 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029f0:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80029f2:	b9e9      	cbnz	r1, 8002a30 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80029fc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80029fe:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002a00:	3c01      	subs	r4, #1
 8002a02:	b2a4      	uxth	r4, r4
 8002a04:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002a06:	b98c      	cbnz	r4, 8002a2c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a08:	6803      	ldr	r3, [r0, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	f022 0220 	bic.w	r2, r2, #32
 8002a10:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a18:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a22:	2320      	movs	r3, #32
 8002a24:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002a28:	f7ff ffd5 	bl	80029d6 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002a2c:	2000      	movs	r0, #0
}
 8002a2e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f823 2b01 	strh.w	r2, [r3], #1
 8002a36:	e7e1      	b.n	80029fc <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a38:	b921      	cbnz	r1, 8002a44 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a3a:	1c59      	adds	r1, r3, #1
 8002a3c:	6852      	ldr	r2, [r2, #4]
 8002a3e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e7dc      	b.n	80029fe <UART_Receive_IT+0x26>
 8002a44:	6852      	ldr	r2, [r2, #4]
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	6281      	str	r1, [r0, #40]	; 0x28
 8002a4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a4e:	e7f7      	b.n	8002a40 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002a50:	2002      	movs	r0, #2
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <HAL_UART_ErrorCallback>:
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a58:	6803      	ldr	r3, [r0, #0]
{
 8002a5a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a5c:	681a      	ldr	r2, [r3, #0]
{
 8002a5e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002a60:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a62:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a64:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002a66:	d107      	bne.n	8002a78 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a68:	0696      	lsls	r6, r2, #26
 8002a6a:	d55a      	bpl.n	8002b22 <HAL_UART_IRQHandler+0xca>
 8002a6c:	068d      	lsls	r5, r1, #26
 8002a6e:	d558      	bpl.n	8002b22 <HAL_UART_IRQHandler+0xca>
}
 8002a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002a74:	f7ff bfb0 	b.w	80029d8 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a78:	f015 0501 	ands.w	r5, r5, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_UART_IRQHandler+0x2c>
 8002a7e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002a82:	d04e      	beq.n	8002b22 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a84:	07d3      	lsls	r3, r2, #31
 8002a86:	d505      	bpl.n	8002a94 <HAL_UART_IRQHandler+0x3c>
 8002a88:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a8a:	bf42      	ittt	mi
 8002a8c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002a8e:	f043 0301 	orrmi.w	r3, r3, #1
 8002a92:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a94:	0750      	lsls	r0, r2, #29
 8002a96:	d504      	bpl.n	8002aa2 <HAL_UART_IRQHandler+0x4a>
 8002a98:	b11d      	cbz	r5, 8002aa2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aa2:	0793      	lsls	r3, r2, #30
 8002aa4:	d504      	bpl.n	8002ab0 <HAL_UART_IRQHandler+0x58>
 8002aa6:	b11d      	cbz	r5, 8002ab0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ab0:	0716      	lsls	r6, r2, #28
 8002ab2:	d504      	bpl.n	8002abe <HAL_UART_IRQHandler+0x66>
 8002ab4:	b11d      	cbz	r5, 8002abe <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ab6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ab8:	f043 0308 	orr.w	r3, r3, #8
 8002abc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002abe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d066      	beq.n	8002b92 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ac4:	0695      	lsls	r5, r2, #26
 8002ac6:	d504      	bpl.n	8002ad2 <HAL_UART_IRQHandler+0x7a>
 8002ac8:	0688      	lsls	r0, r1, #26
 8002aca:	d502      	bpl.n	8002ad2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff ff83 	bl	80029d8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad2:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002ad4:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad6:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ad8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ada:	0711      	lsls	r1, r2, #28
 8002adc:	d402      	bmi.n	8002ae4 <HAL_UART_IRQHandler+0x8c>
 8002ade:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002ae2:	d01a      	beq.n	8002b1a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002ae4:	f7ff ff00 	bl	80028e8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	0652      	lsls	r2, r2, #25
 8002aee:	d510      	bpl.n	8002b12 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002af2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002afa:	b150      	cbz	r0, 8002b12 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_UART_IRQHandler+0x13c>)
 8002afe:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b00:	f7fe ff46 	bl	8001990 <HAL_DMA_Abort_IT>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d044      	beq.n	8002b92 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b08:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b10:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002b12:	4620      	mov	r0, r4
 8002b14:	f7ff ff9e 	bl	8002a54 <HAL_UART_ErrorCallback>
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002b1a:	f7ff ff9b 	bl	8002a54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b22:	0616      	lsls	r6, r2, #24
 8002b24:	d527      	bpl.n	8002b76 <HAL_UART_IRQHandler+0x11e>
 8002b26:	060d      	lsls	r5, r1, #24
 8002b28:	d525      	bpl.n	8002b76 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b2a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002b2e:	2a21      	cmp	r2, #33	; 0x21
 8002b30:	d12f      	bne.n	8002b92 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b32:	68a2      	ldr	r2, [r4, #8]
 8002b34:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b38:	6a22      	ldr	r2, [r4, #32]
 8002b3a:	d117      	bne.n	8002b6c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b3c:	8811      	ldrh	r1, [r2, #0]
 8002b3e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002b42:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b44:	6921      	ldr	r1, [r4, #16]
 8002b46:	b979      	cbnz	r1, 8002b68 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002b48:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002b4a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002b4c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	b292      	uxth	r2, r2
 8002b52:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002b54:	b9ea      	cbnz	r2, 8002b92 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b5c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002b68:	3201      	adds	r2, #1
 8002b6a:	e7ee      	b.n	8002b4a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b6c:	1c51      	adds	r1, r2, #1
 8002b6e:	6221      	str	r1, [r4, #32]
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	e7ea      	b.n	8002b4c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b76:	0650      	lsls	r0, r2, #25
 8002b78:	d50b      	bpl.n	8002b92 <HAL_UART_IRQHandler+0x13a>
 8002b7a:	064a      	lsls	r2, r1, #25
 8002b7c:	d509      	bpl.n	8002b92 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b7e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002b80:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b86:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002b8e:	f7ff ff21 	bl	80029d4 <HAL_UART_TxCpltCallback>
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	08002b99 	.word	0x08002b99

08002b98 <UART_DMAAbortOnError>:
{
 8002b98:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002b9a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002b9e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ba0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002ba2:	f7ff ff57 	bl	8002a54 <HAL_UART_ErrorCallback>
 8002ba6:	bd08      	pop	{r3, pc}

08002ba8 <eMBFuncReadCoils>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002ba8:	880b      	ldrh	r3, [r1, #0]
{
 8002baa:	b570      	push	{r4, r5, r6, lr}
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002bac:	2b05      	cmp	r3, #5
{
 8002bae:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002bb0:	d12e      	bne.n	8002c10 <eMBFuncReadCoils+0x68>
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002bb2:	f240 71ce 	movw	r1, #1998	; 0x7ce
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8002bb6:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8002bb8:	7902      	ldrb	r2, [r0, #4]
 8002bba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 8002bbe:	1e53      	subs	r3, r2, #1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	428b      	cmp	r3, r1
 8002bc4:	d824      	bhi.n	8002c10 <eMBFuncReadCoils+0x68>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002bc6:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002bc8:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002bca:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002bcc:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002bd2:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8002bd4:	f012 0f07 	tst.w	r2, #7
 8002bd8:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8002bdc:	bf18      	it	ne
 8002bde:	3401      	addne	r4, #1
            *usLen += 1;
 8002be0:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002be2:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002be4:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002be6:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002be8:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002bea:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002bee:	3301      	adds	r3, #1
        usRegAddress++;
 8002bf0:	3101      	adds	r1, #1
            *usLen += 1;
 8002bf2:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002bf4:	b289      	uxth	r1, r1
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	3002      	adds	r0, #2
 8002bfa:	f002 fe3d 	bl	8005878 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002bfe:	b118      	cbz	r0, 8002c08 <eMBFuncReadCoils+0x60>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002c04:	f000 b9bc 	b.w	8002f80 <prveMBError2Exception>
                *usLen += ucNBytes;;
 8002c08:	882a      	ldrh	r2, [r5, #0]
 8002c0a:	4414      	add	r4, r2
 8002c0c:	802c      	strh	r4, [r5, #0]
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c10:	2003      	movs	r0, #3
}
 8002c12:	bd70      	pop	{r4, r5, r6, pc}

08002c14 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002c14:	880b      	ldrh	r3, [r1, #0]
{
 8002c16:	b513      	push	{r0, r1, r4, lr}
    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d11d      	bne.n	8002c58 <eMBFuncWriteCoil+0x44>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002c1c:	7903      	ldrb	r3, [r0, #4]
 8002c1e:	b9db      	cbnz	r3, 8002c58 <eMBFuncWriteCoil+0x44>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002c20:	78c4      	ldrb	r4, [r0, #3]
 8002c22:	1e62      	subs	r2, r4, #1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	2afd      	cmp	r2, #253	; 0xfd
 8002c28:	d916      	bls.n	8002c58 <eMBFuncWriteCoil+0x44>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002c2a:	2cff      	cmp	r4, #255	; 0xff
            ucBuf[1] = 0;
 8002c2c:	f88d 3005 	strb.w	r3, [sp, #5]
            {
                ucBuf[0] = 1;
 8002c30:	bf08      	it	eq
 8002c32:	2301      	moveq	r3, #1
            }
            else
            {
                ucBuf[0] = 0;
 8002c34:	f88d 3004 	strb.w	r3, [sp, #4]
            }
            eRegStatus =
 8002c38:	2301      	movs	r3, #1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002c3a:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002c3c:	7881      	ldrb	r1, [r0, #2]
            eRegStatus =
 8002c3e:	a801      	add	r0, sp, #4
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002c40:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8002c44:	3101      	adds	r1, #1
            eRegStatus =
 8002c46:	461a      	mov	r2, r3
 8002c48:	b289      	uxth	r1, r1
 8002c4a:	f002 fe15 	bl	8005878 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002c4e:	b128      	cbz	r0, 8002c5c <eMBFuncWriteCoil+0x48>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002c50:	f000 f996 	bl	8002f80 <prveMBError2Exception>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002c54:	b002      	add	sp, #8
 8002c56:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002c58:	2003      	movs	r0, #3
 8002c5a:	e7fb      	b.n	8002c54 <eMBFuncWriteCoil+0x40>
 8002c5c:	e7fa      	b.n	8002c54 <eMBFuncWriteCoil+0x40>

08002c5e <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002c5e:	880b      	ldrh	r3, [r1, #0]
{
 8002c60:	b510      	push	{r4, lr}
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002c62:	2b05      	cmp	r3, #5
{
 8002c64:	460c      	mov	r4, r1
    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002c66:	d924      	bls.n	8002cb2 <eMBFuncWriteMultipleCoils+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002c68:	78c3      	ldrb	r3, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002c6a:	7902      	ldrb	r2, [r0, #4]
 8002c6c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002c70:	f012 0f07 	tst.w	r2, #7
 8002c74:	ea4f 03d2 	mov.w	r3, r2, lsr #3
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 8002c78:	f102 31ff 	add.w	r1, r2, #4294967295
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002c7c:	bf18      	it	ne
 8002c7e:	3301      	addne	r3, #1
        if( ( usCoilCnt >= 1 ) &&
 8002c80:	f5b1 6ff6 	cmp.w	r1, #1968	; 0x7b0
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002c84:	b2db      	uxtb	r3, r3
        if( ( usCoilCnt >= 1 ) &&
 8002c86:	d214      	bcs.n	8002cb2 <eMBFuncWriteMultipleCoils+0x54>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002c88:	7941      	ldrb	r1, [r0, #5]
 8002c8a:	4299      	cmp	r1, r3
 8002c8c:	d111      	bne.n	8002cb2 <eMBFuncWriteMultipleCoils+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002c8e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002c90:	7881      	ldrb	r1, [r0, #2]
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002c92:	3006      	adds	r0, #6
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002c94:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002c98:	3101      	adds	r1, #1
            eRegStatus =
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	b289      	uxth	r1, r1
 8002c9e:	f002 fdeb 	bl	8005878 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ca2:	b118      	cbz	r0, 8002cac <eMBFuncWriteMultipleCoils+0x4e>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002ca8:	f000 b96a 	b.w	8002f80 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002cac:	2205      	movs	r2, #5
 8002cae:	8022      	strh	r2, [r4, #0]
 8002cb0:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002cb2:	2003      	movs	r0, #3
}
 8002cb4:	bd10      	pop	{r4, pc}

08002cb6 <eMBFuncReadDiscreteInputs>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002cb6:	880b      	ldrh	r3, [r1, #0]
{
 8002cb8:	b570      	push	{r4, r5, r6, lr}
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002cba:	2b05      	cmp	r3, #5
{
 8002cbc:	460d      	mov	r5, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002cbe:	d12d      	bne.n	8002d1c <eMBFuncReadDiscreteInputs+0x66>
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002cc0:	f240 71ce 	movw	r1, #1998	; 0x7ce
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002cc4:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002cc6:	7902      	ldrb	r2, [r0, #4]
 8002cc8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8002ccc:	1e53      	subs	r3, r2, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	d823      	bhi.n	8002d1c <eMBFuncReadDiscreteInputs+0x66>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002cd4:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002cd6:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002cd8:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002cda:	802b      	strh	r3, [r5, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002ce0:	882b      	ldrh	r3, [r5, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002ce2:	f012 0f07 	tst.w	r2, #7
 8002ce6:	ea4f 04d2 	mov.w	r4, r2, lsr #3
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002cea:	bf18      	it	ne
 8002cec:	3401      	addne	r4, #1
            *usLen += 1;
 8002cee:	3301      	adds	r3, #1
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002cf0:	b2e4      	uxtb	r4, r4
            *usLen += 1;
 8002cf2:	802b      	strh	r3, [r5, #0]
            }
            *pucFrameCur++ = ucNBytes;
 8002cf4:	7044      	strb	r4, [r0, #1]
            *usLen += 1;
 8002cf6:	882b      	ldrh	r3, [r5, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002cf8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002cfc:	3301      	adds	r3, #1
        usRegAddress++;
 8002cfe:	3101      	adds	r1, #1
            *usLen += 1;
 8002d00:	802b      	strh	r3, [r5, #0]

            eRegStatus =
 8002d02:	b289      	uxth	r1, r1
 8002d04:	3002      	adds	r0, #2
 8002d06:	f002 fe01 	bl	800590c <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002d0a:	b118      	cbz	r0, 8002d14 <eMBFuncReadDiscreteInputs+0x5e>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002d10:	f000 b936 	b.w	8002f80 <prveMBError2Exception>
                *usLen += ucNBytes;;
 8002d14:	882a      	ldrh	r2, [r5, #0]
 8002d16:	4414      	add	r4, r2
 8002d18:	802c      	strh	r4, [r5, #0]
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d1c:	2003      	movs	r0, #3
}
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}

08002d20 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002d20:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002d22:	880b      	ldrh	r3, [r1, #0]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d10f      	bne.n	8002d48 <eMBFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002d28:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002d2a:	7881      	ldrb	r1, [r0, #2]
        usRegAddress++;

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002d2c:	3003      	adds	r0, #3
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002d2e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002d32:	2301      	movs	r3, #1
        usRegAddress++;
 8002d34:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002d36:	461a      	mov	r2, r3
 8002d38:	b289      	uxth	r1, r1
 8002d3a:	f002 fcdf 	bl	80056fc <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002d3e:	b128      	cbz	r0, 8002d4c <eMBFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            eStatus = prveMBError2Exception( eRegStatus );
 8002d44:	f000 b91c 	b.w	8002f80 <prveMBError2Exception>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d48:	2003      	movs	r0, #3
 8002d4a:	bd08      	pop	{r3, pc}
}
 8002d4c:	bd08      	pop	{r3, pc}

08002d4e <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002d4e:	880b      	ldrh	r3, [r1, #0]
{
 8002d50:	b510      	push	{r4, lr}
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002d52:	2b05      	cmp	r3, #5
{
 8002d54:	460c      	mov	r4, r1
    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002d56:	d91d      	bls.n	8002d94 <eMBFuncWriteMultipleHoldingRegister+0x46>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002d58:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002d5a:	7902      	ldrb	r2, [r0, #4]
 8002d5c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
 8002d60:	1e53      	subs	r3, r2, #1
 8002d62:	2b77      	cmp	r3, #119	; 0x77
 8002d64:	d816      	bhi.n	8002d94 <eMBFuncWriteMultipleHoldingRegister+0x46>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002d66:	0053      	lsls	r3, r2, #1
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002d68:	7941      	ldrb	r1, [r0, #5]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	4299      	cmp	r1, r3
 8002d6e:	d111      	bne.n	8002d94 <eMBFuncWriteMultipleHoldingRegister+0x46>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002d70:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002d72:	7881      	ldrb	r1, [r0, #2]
        {
            /* Make callback to update the register values. */
            eRegStatus =
 8002d74:	3006      	adds	r0, #6
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002d76:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8002d7a:	3101      	adds	r1, #1
            eRegStatus =
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	b289      	uxth	r1, r1
 8002d80:	f002 fcbc 	bl	80056fc <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002d84:	b118      	cbz	r0, 8002d8e <eMBFuncWriteMultipleHoldingRegister+0x40>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002d8a:	f000 b8f9 	b.w	8002f80 <prveMBError2Exception>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002d8e:	2205      	movs	r2, #5
 8002d90:	8022      	strh	r2, [r4, #0]
 8002d92:	bd10      	pop	{r4, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d94:	2003      	movs	r0, #3
}
 8002d96:	bd10      	pop	{r4, pc}

08002d98 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002d9a:	880b      	ldrh	r3, [r1, #0]
{
 8002d9c:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d124      	bne.n	8002dec <eMBFuncReadHoldingRegister+0x54>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002da2:	7902      	ldrb	r2, [r0, #4]
 8002da4:	b295      	uxth	r5, r2

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002da6:	1e6b      	subs	r3, r5, #1
 8002da8:	2b7c      	cmp	r3, #124	; 0x7c
 8002daa:	d81f      	bhi.n	8002dec <eMBFuncReadHoldingRegister+0x54>
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002dac:	2603      	movs	r6, #3
            *usLen = MB_PDU_FUNC_OFF;
 8002dae:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002db0:	7847      	ldrb	r7, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002db2:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002db4:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002db6:	7006      	strb	r6, [r0, #0]
            *usLen += 1;
 8002db8:	8826      	ldrh	r6, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002dba:	0052      	lsls	r2, r2, #1
            *usLen += 1;
 8002dbc:	3601      	adds	r6, #1
 8002dbe:	8026      	strh	r6, [r4, #0]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002dc0:	7042      	strb	r2, [r0, #1]
            *usLen += 1;
 8002dc2:	8822      	ldrh	r2, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002dc4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
            *usLen += 1;
 8002dc8:	3201      	adds	r2, #1
        usRegAddress++;
 8002dca:	3101      	adds	r1, #1
            *usLen += 1;
 8002dcc:	8022      	strh	r2, [r4, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8002dce:	b289      	uxth	r1, r1
 8002dd0:	462a      	mov	r2, r5
 8002dd2:	3002      	adds	r0, #2
 8002dd4:	f002 fc92 	bl	80056fc <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002dd8:	b118      	cbz	r0, 8002de2 <eMBFuncReadHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002dde:	f000 b8cf 	b.w	8002f80 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 8002de2:	8822      	ldrh	r2, [r4, #0]
 8002de4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8002de8:	8025      	strh	r5, [r4, #0]
 8002dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002dec:	2003      	movs	r0, #3
}
 8002dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002df0 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002df4:	880b      	ldrh	r3, [r1, #0]
{
 8002df6:	4604      	mov	r4, r0
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002df8:	2b09      	cmp	r3, #9
{
 8002dfa:	460d      	mov	r5, r1
    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002dfc:	d93c      	bls.n	8002e78 <eMBFuncReadWriteMultipleHoldingRegister+0x88>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002dfe:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8002e00:	7907      	ldrb	r7, [r0, #4]
 8002e02:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002e06:	1e7b      	subs	r3, r7, #1
 8002e08:	2b7c      	cmp	r3, #124	; 0x7c
 8002e0a:	d838      	bhi.n	8002e7e <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002e0c:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002e0e:	7a02      	ldrb	r2, [r0, #8]
 8002e10:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002e14:	1e53      	subs	r3, r2, #1
 8002e16:	2b78      	cmp	r3, #120	; 0x78
 8002e18:	d831      	bhi.n	8002e7e <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002e1a:	7a43      	ldrb	r3, [r0, #9]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002e1c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002e20:	d12d      	bne.n	8002e7e <eMBFuncReadWriteMultipleHoldingRegister+0x8e>
        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002e22:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002e24:	7981      	ldrb	r1, [r0, #6]
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8002e26:	f890 9001 	ldrb.w	r9, [r0, #1]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002e2a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8002e2e:	3101      	adds	r1, #1
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002e30:	7886      	ldrb	r6, [r0, #2]
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002e32:	2301      	movs	r3, #1
 8002e34:	b289      	uxth	r1, r1
 8002e36:	300a      	adds	r0, #10
 8002e38:	f002 fc60 	bl	80056fc <eMBRegHoldingCB>
 8002e3c:	4603      	mov	r3, r0
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002e3e:	bb08      	cbnz	r0, 8002e84 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002e40:	2217      	movs	r2, #23
                *usLen = MB_PDU_FUNC_OFF;
 8002e42:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002e44:	7022      	strb	r2, [r4, #0]
                *usLen += 1;
 8002e46:	882a      	ldrh	r2, [r5, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002e48:	ea4f 0847 	mov.w	r8, r7, lsl #1
                *usLen += 1;
 8002e4c:	3201      	adds	r2, #1
 8002e4e:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002e50:	f884 8001 	strb.w	r8, [r4, #1]
                *usLen += 1;
 8002e54:	882a      	ldrh	r2, [r5, #0]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002e56:	ea46 2109 	orr.w	r1, r6, r9, lsl #8
                *usLen += 1;
 8002e5a:	3201      	adds	r2, #1
        usRegReadAddress++;
 8002e5c:	3101      	adds	r1, #1
                *usLen += 1;
 8002e5e:	802a      	strh	r2, [r5, #0]

                /* Make the read callback. */
                eRegStatus =
 8002e60:	b289      	uxth	r1, r1
 8002e62:	463a      	mov	r2, r7
 8002e64:	1ca0      	adds	r0, r4, #2
 8002e66:	f002 fc49 	bl	80056fc <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
 8002e6a:	b958      	cbnz	r0, 8002e84 <eMBFuncReadWriteMultipleHoldingRegister+0x94>
                {
                    *usLen += 2 * usRegReadCount;
 8002e6c:	882b      	ldrh	r3, [r5, #0]
 8002e6e:	4498      	add	r8, r3
 8002e70:	f8a5 8000 	strh.w	r8, [r5]
 8002e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eMBException    eStatus = MB_EX_NONE;
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002e7e:	2003      	movs	r0, #3
        }
    }
    return eStatus;
 8002e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}
 8002e84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002e88:	f000 b87a 	b.w	8002f80 <prveMBError2Exception>

08002e8c <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e8c:	880b      	ldrh	r3, [r1, #0]
{
 8002e8e:	b570      	push	{r4, r5, r6, lr}
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e90:	2b05      	cmp	r3, #5
{
 8002e92:	460c      	mov	r4, r1
    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e94:	d124      	bne.n	8002ee0 <eMBFuncReadInputRegister+0x54>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002e96:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002e98:	7902      	ldrb	r2, [r0, #4]
 8002e9a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8002e9e:	1e53      	subs	r3, r2, #1
 8002ea0:	2b7b      	cmp	r3, #123	; 0x7b
 8002ea2:	d81d      	bhi.n	8002ee0 <eMBFuncReadInputRegister+0x54>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
 8002ea4:	2300      	movs	r3, #0
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002ea6:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ea8:	7881      	ldrb	r1, [r0, #2]
            *usLen = MB_PDU_FUNC_OFF;
 8002eaa:	8023      	strh	r3, [r4, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8002eac:	2304      	movs	r3, #4
 8002eae:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8002eb0:	8823      	ldrh	r3, [r4, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8002eb2:	0055      	lsls	r5, r2, #1
            *usLen += 1;
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8002eb8:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 8002eba:	8823      	ldrh	r3, [r4, #0]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002ebc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
            *usLen += 1;
 8002ec0:	3301      	adds	r3, #1
        usRegAddress++;
 8002ec2:	3101      	adds	r1, #1
            *usLen += 1;
 8002ec4:	8023      	strh	r3, [r4, #0]

            eRegStatus =
 8002ec6:	b289      	uxth	r1, r1
 8002ec8:	3002      	adds	r0, #2
 8002eca:	f002 fbf3 	bl	80056b4 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ece:	b118      	cbz	r0, 8002ed8 <eMBFuncReadInputRegister+0x4c>
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                eStatus = prveMBError2Exception( eRegStatus );
 8002ed4:	f000 b854 	b.w	8002f80 <prveMBError2Exception>
                *usLen += usRegCount * 2;
 8002ed8:	8822      	ldrh	r2, [r4, #0]
 8002eda:	4415      	add	r5, r2
 8002edc:	8025      	strh	r5, [r4, #0]
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ee0:	2003      	movs	r0, #3
}
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}

08002ee4 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <eMBFuncReportSlaveID+0x1c>)
 8002eea:	4906      	ldr	r1, [pc, #24]	; (8002f04 <eMBFuncReportSlaveID+0x20>)
 8002eec:	881c      	ldrh	r4, [r3, #0]
 8002eee:	3001      	adds	r0, #1
 8002ef0:	4622      	mov	r2, r4
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002ef2:	3401      	adds	r4, #1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002ef4:	f003 f972 	bl	80061dc <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002ef8:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8002efa:	2000      	movs	r0, #0
 8002efc:	bd38      	pop	{r3, r4, r5, pc}
 8002efe:	bf00      	nop
 8002f00:	20000144 	.word	0x20000144
 8002f04:	20000124 	.word	0x20000124

08002f08 <xMBUtilSetBits>:
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8002f08:	2a08      	cmp	r2, #8
{
 8002f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert( ucNBits <= 8 );
 8002f0c:	d905      	bls.n	8002f1a <xMBUtilSetBits+0x12>
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <xMBUtilSetBits+0x48>)
 8002f10:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <xMBUtilSetBits+0x4c>)
 8002f12:	2138      	movs	r1, #56	; 0x38
 8002f14:	4810      	ldr	r0, [pc, #64]	; (8002f58 <xMBUtilSetBits+0x50>)
 8002f16:	f003 f92b 	bl	8006170 <__assert_func>

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002f1a:	2401      	movs	r4, #1
 8002f1c:	fa04 f202 	lsl.w	r2, r4, r2
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8002f20:	08ce      	lsrs	r6, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002f22:	3a01      	subs	r2, #1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002f24:	1c75      	adds	r5, r6, #1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8002f26:	b292      	uxth	r2, r2
 8002f28:	eba1 04c6 	sub.w	r4, r1, r6, lsl #3
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002f2c:	5d47      	ldrb	r7, [r0, r5]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8002f2e:	fa02 f404 	lsl.w	r4, r2, r4
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002f32:	5d82      	ldrb	r2, [r0, r6]
    usValue <<= usNPreBits;
 8002f34:	f001 0107 	and.w	r1, r1, #7
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002f38:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8002f3c:	ea22 0204 	bic.w	r2, r2, r4
    usValue <<= usNPreBits;
 8002f40:	408b      	lsls	r3, r1
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8002f42:	4313      	orrs	r3, r2
 8002f44:	b21b      	sxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8002f46:	5583      	strb	r3, [r0, r6]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8002f48:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002f4c:	5543      	strb	r3, [r0, r5]
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f50:	080070c1 	.word	0x080070c1
 8002f54:	080070b2 	.word	0x080070b2
 8002f58:	080070ce 	.word	0x080070ce

08002f5c <xMBUtilGetBits>:
}

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8002f5c:	b510      	push	{r4, lr}

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8002f5e:	08cb      	lsrs	r3, r1, #3
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002f60:	18c4      	adds	r4, r0, r3
 8002f62:	5cc0      	ldrb	r0, [r0, r3]
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002f64:	2301      	movs	r3, #1
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002f66:	7864      	ldrb	r4, [r4, #1]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 8002f68:	f001 0107 	and.w	r1, r1, #7
 8002f6c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002f70:	fa03 f202 	lsl.w	r2, r3, r2
    usWordBuf >>= usNPreBits;
 8002f74:	4108      	asrs	r0, r1
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002f76:	3a01      	subs	r2, #1

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 8002f78:	4010      	ands	r0, r2

    return ( UCHAR ) usWordBuf;
}
 8002f7a:	b2c0      	uxtb	r0, r0
 8002f7c:	bd10      	pop	{r4, pc}
	...

08002f80 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8002f80:	2807      	cmp	r0, #7
 8002f82:	bf9a      	itte	ls
 8002f84:	4b01      	ldrls	r3, [pc, #4]	; (8002f8c <prveMBError2Exception+0xc>)
 8002f86:	5c18      	ldrbls	r0, [r3, r0]
 8002f88:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 8002f8a:	4770      	bx	lr
 8002f8c:	080070aa 	.word	0x080070aa

08002f90 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002f90:	b538      	push	{r3, r4, r5, lr}
 8002f92:	4604      	mov	r4, r0
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	461a      	mov	r2, r3
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8002f9a:	1e43      	subs	r3, r0, #1
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2bf6      	cmp	r3, #246	; 0xf6
 8002fa0:	d827      	bhi.n	8002ff2 <eMBInit+0x62>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8002fa2:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <eMBInit+0x6c>)
 8002fa4:	7018      	strb	r0, [r3, #0]

        switch ( eMode )
 8002fa6:	bb24      	cbnz	r4, 8002ff2 <eMBInit+0x62>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8002fa8:	4d15      	ldr	r5, [pc, #84]	; (8003000 <eMBInit+0x70>)
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <eMBInit+0x74>)
 8002fac:	601d      	str	r5, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8002fae:	4d16      	ldr	r5, [pc, #88]	; (8003008 <eMBInit+0x78>)
 8002fb0:	4b16      	ldr	r3, [pc, #88]	; (800300c <eMBInit+0x7c>)
 8002fb2:	601d      	str	r5, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8002fb4:	4d16      	ldr	r5, [pc, #88]	; (8003010 <eMBInit+0x80>)
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <eMBInit+0x84>)
 8002fb8:	601d      	str	r5, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8002fba:	4b17      	ldr	r3, [pc, #92]	; (8003018 <eMBInit+0x88>)
 8002fbc:	4d17      	ldr	r5, [pc, #92]	; (800301c <eMBInit+0x8c>)
 8002fbe:	601d      	str	r5, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <eMBInit+0x90>)
 8002fc2:	601c      	str	r4, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8002fc4:	4c17      	ldr	r4, [pc, #92]	; (8003024 <eMBInit+0x94>)
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <eMBInit+0x98>)
 8002fc8:	601c      	str	r4, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8002fca:	4c18      	ldr	r4, [pc, #96]	; (800302c <eMBInit+0x9c>)
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <eMBInit+0xa0>)
 8002fce:	601c      	str	r4, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8002fd0:	4c18      	ldr	r4, [pc, #96]	; (8003034 <eMBInit+0xa4>)
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <eMBInit+0xa8>)
 8002fd4:	601c      	str	r4, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8002fd6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002fda:	f000 f971 	bl	80032c0 <eMBRTUInit>
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
 8002fde:	4604      	mov	r4, r0
 8002fe0:	b928      	cbnz	r0, 8002fee <eMBInit+0x5e>
        {
            if( !xMBPortEventInit(  ) )
 8002fe2:	f000 f8b5 	bl	8003150 <xMBPortEventInit>
 8002fe6:	b130      	cbz	r0, 8002ff6 <eMBInit+0x66>
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
                eMBState = STATE_DISABLED;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <eMBInit+0xac>)
 8002fec:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
}
 8002fee:	4620      	mov	r0, r4
 8002ff0:	bd38      	pop	{r3, r4, r5, pc}
            eStatus = MB_EINVAL;
 8002ff2:	2402      	movs	r4, #2
 8002ff4:	e7fb      	b.n	8002fee <eMBInit+0x5e>
                eStatus = MB_EPORTERR;
 8002ff6:	2403      	movs	r4, #3
 8002ff8:	e7f9      	b.n	8002fee <eMBInit+0x5e>
 8002ffa:	bf00      	nop
 8002ffc:	2000015d 	.word	0x2000015d
 8003000:	08003309 	.word	0x08003309
 8003004:	20000154 	.word	0x20000154
 8003008:	0800332d 	.word	0x0800332d
 800300c:	20000158 	.word	0x20000158
 8003010:	080033b9 	.word	0x080033b9
 8003014:	2000014c 	.word	0x2000014c
 8003018:	20000148 	.word	0x20000148
 800301c:	08003349 	.word	0x08003349
 8003020:	20000150 	.word	0x20000150
 8003024:	08003441 	.word	0x08003441
 8003028:	20005410 	.word	0x20005410
 800302c:	080034d5 	.word	0x080034d5
 8003030:	20005408 	.word	0x20005408
 8003034:	08003569 	.word	0x08003569
 8003038:	2000540c 	.word	0x2000540c
 800303c:	20000008 	.word	0x20000008

08003040 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8003040:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8003042:	4c06      	ldr	r4, [pc, #24]	; (800305c <eMBEnable+0x1c>)
 8003044:	7823      	ldrb	r3, [r4, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <eMBEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <eMBEnable+0x20>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8003050:	2000      	movs	r0, #0
 8003052:	7020      	strb	r0, [r4, #0]
 8003054:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8003056:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8003058:	bd10      	pop	{r4, pc}
 800305a:	bf00      	nop
 800305c:	20000008 	.word	0x20000008
 8003060:	20000154 	.word	0x20000154

08003064 <eMBPoll>:
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <eMBPoll+0xc4>)
{
 8003066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( eMBState != STATE_ENABLED )
 8003068:	781c      	ldrb	r4, [r3, #0]
 800306a:	2c00      	cmp	r4, #0
 800306c:	d159      	bne.n	8003122 <eMBPoll+0xbe>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800306e:	f10d 0007 	add.w	r0, sp, #7
 8003072:	f000 f881 	bl	8003178 <xMBPortEventGet>
 8003076:	2801      	cmp	r0, #1
 8003078:	4603      	mov	r3, r0
 800307a:	d001      	beq.n	8003080 <eMBPoll+0x1c>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
 800307c:	2400      	movs	r4, #0
 800307e:	e005      	b.n	800308c <eMBPoll+0x28>
        switch ( eEvent )
 8003080:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003084:	2a01      	cmp	r2, #1
 8003086:	d004      	beq.n	8003092 <eMBPoll+0x2e>
 8003088:	2a02      	cmp	r2, #2
 800308a:	d017      	beq.n	80030bc <eMBPoll+0x58>
}
 800308c:	4620      	mov	r0, r4
 800308e:	b003      	add	sp, #12
 8003090:	bdf0      	pop	{r4, r5, r6, r7, pc}
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8003092:	4d26      	ldr	r5, [pc, #152]	; (800312c <eMBPoll+0xc8>)
 8003094:	4b26      	ldr	r3, [pc, #152]	; (8003130 <eMBPoll+0xcc>)
 8003096:	4a27      	ldr	r2, [pc, #156]	; (8003134 <eMBPoll+0xd0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4927      	ldr	r1, [pc, #156]	; (8003138 <eMBPoll+0xd4>)
 800309c:	4628      	mov	r0, r5
 800309e:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 80030a0:	4604      	mov	r4, r0
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d1ea      	bne.n	800307c <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80030a6:	4a25      	ldr	r2, [pc, #148]	; (800313c <eMBPoll+0xd8>)
 80030a8:	782b      	ldrb	r3, [r5, #0]
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <eMBPoll+0x50>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e3      	bne.n	800307c <eMBPoll+0x18>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80030b4:	2002      	movs	r0, #2
 80030b6:	f000 f853 	bl	8003160 <xMBPortEventPost>
 80030ba:	e7e7      	b.n	800308c <eMBPoll+0x28>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80030bc:	4d1e      	ldr	r5, [pc, #120]	; (8003138 <eMBPoll+0xd4>)
            eException = MB_EX_ILLEGAL_FUNCTION;
 80030be:	4e20      	ldr	r6, [pc, #128]	; (8003140 <eMBPoll+0xdc>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80030c0:	6828      	ldr	r0, [r5, #0]
 80030c2:	4f20      	ldr	r7, [pc, #128]	; (8003144 <eMBPoll+0xe0>)
 80030c4:	7802      	ldrb	r2, [r0, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80030c6:	7033      	strb	r3, [r6, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <eMBPoll+0xe4>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80030ca:	703a      	strb	r2, [r7, #0]
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80030cc:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 80030d0:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 80030d4:	b131      	cbz	r1, 80030e4 <eMBPoll+0x80>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80030d6:	428a      	cmp	r2, r1
 80030d8:	d11f      	bne.n	800311a <eMBPoll+0xb6>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80030da:	4473      	add	r3, lr
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4915      	ldr	r1, [pc, #84]	; (8003134 <eMBPoll+0xd0>)
 80030e0:	4798      	blx	r3
 80030e2:	7030      	strb	r0, [r6, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <eMBPoll+0xc8>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0c7      	beq.n	800307c <eMBPoll+0x18>
                if( eException != MB_EX_NONE )
 80030ec:	7831      	ldrb	r1, [r6, #0]
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <eMBPoll+0xd0>)
 80030f0:	b159      	cbz	r1, 800310a <eMBPoll+0xa6>
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80030f2:	2201      	movs	r2, #1
 80030f4:	801a      	strh	r2, [r3, #0]
 80030f6:	783a      	ldrb	r2, [r7, #0]
 80030f8:	6828      	ldr	r0, [r5, #0]
 80030fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030fe:	7002      	strb	r2, [r0, #0]
                    ucMBFrame[usLength++] = eException;
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	6828      	ldr	r0, [r5, #0]
 8003104:	1c54      	adds	r4, r2, #1
 8003106:	801c      	strh	r4, [r3, #0]
 8003108:	5481      	strb	r1, [r0, r2]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <eMBPoll+0xe8>)
 800310c:	6829      	ldr	r1, [r5, #0]
 800310e:	6814      	ldr	r4, [r2, #0]
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <eMBPoll+0xd8>)
 8003114:	7818      	ldrb	r0, [r3, #0]
 8003116:	47a0      	blx	r4
 8003118:	e7b0      	b.n	800307c <eMBPoll+0x18>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800311a:	3401      	adds	r4, #1
 800311c:	2c10      	cmp	r4, #16
 800311e:	d1d5      	bne.n	80030cc <eMBPoll+0x68>
 8003120:	e7e0      	b.n	80030e4 <eMBPoll+0x80>
        return MB_EILLSTATE;
 8003122:	2406      	movs	r4, #6
 8003124:	e7b2      	b.n	800308c <eMBPoll+0x28>
 8003126:	bf00      	nop
 8003128:	20000008 	.word	0x20000008
 800312c:	20000164 	.word	0x20000164
 8003130:	20000148 	.word	0x20000148
 8003134:	20000166 	.word	0x20000166
 8003138:	20000160 	.word	0x20000160
 800313c:	2000015d 	.word	0x2000015d
 8003140:	20000146 	.word	0x20000146
 8003144:	2000015c 	.word	0x2000015c
 8003148:	2000000c 	.word	0x2000000c
 800314c:	2000014c 	.word	0x2000014c

08003150 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
 8003150:	2200      	movs	r2, #0
 8003152:	4b02      	ldr	r3, [pc, #8]	; (800315c <xMBPortEventInit+0xc>)
    return TRUE;
}
 8003154:	2001      	movs	r0, #1
    xEventInQueue = FALSE;
 8003156:	701a      	strb	r2, [r3, #0]
}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000169 	.word	0x20000169

08003160 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	4a03      	ldr	r2, [pc, #12]	; (8003170 <xMBPortEventPost+0x10>)
 8003164:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8003166:	4a03      	ldr	r2, [pc, #12]	; (8003174 <xMBPortEventPost+0x14>)
 8003168:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 800316a:	4618      	mov	r0, r3
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000169 	.word	0x20000169
 8003174:	20000168 	.word	0x20000168

08003178 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8003178:	4a05      	ldr	r2, [pc, #20]	; (8003190 <xMBPortEventGet+0x18>)
 800317a:	7813      	ldrb	r3, [r2, #0]
 800317c:	b12b      	cbz	r3, 800318a <xMBPortEventGet+0x12>
    {
        *eEvent = eQueuedEvent;
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <xMBPortEventGet+0x1c>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	7003      	strb	r3, [r0, #0]
        xEventInQueue = FALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8003188:	2301      	movs	r3, #1
    }
    return xEventHappened;
}
 800318a:	4618      	mov	r0, r3
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000169 	.word	0x20000169
 8003194:	20000168 	.word	0x20000168

08003198 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart1;

/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	460d      	mov	r5, r1
 800319c:	4c11      	ldr	r4, [pc, #68]	; (80031e4 <vMBPortSerialEnable+0x4c>)
    /* If xRXEnable enable serial receive interrupts. If xTxENable enable
     * transmitter empty interrupts.
     */
	if (xRxEnable){
 800319e:	b1b8      	cbz	r0, 80031d0 <vMBPortSerialEnable+0x38>
		MODBUS_MODE_RX;
 80031a0:	2200      	movs	r2, #0
 80031a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031a6:	4810      	ldr	r0, [pc, #64]	; (80031e8 <vMBPortSerialEnable+0x50>)
 80031a8:	f7fe fe6e 	bl	8001e88 <HAL_GPIO_WritePin>
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	68d3      	ldr	r3, [r2, #12]
 80031b0:	f043 0320 	orr.w	r3, r3, #32
	}
	else{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80031b4:	60d3      	str	r3, [r2, #12]
	}

	if (xTxEnable){
 80031b6:	b185      	cbz	r5, 80031da <vMBPortSerialEnable+0x42>
		MODBUS_MODE_TX;
 80031b8:	2201      	movs	r2, #1
 80031ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031be:	480a      	ldr	r0, [pc, #40]	; (80031e8 <vMBPortSerialEnable+0x50>)
 80031c0:	f7fe fe62 	bl	8001e88 <HAL_GPIO_WritePin>
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	68d3      	ldr	r3, [r2, #12]
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	}
	else{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 80031cc:	60d3      	str	r3, [r2, #12]
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80031d0:	6822      	ldr	r2, [r4, #0]
 80031d2:	68d3      	ldr	r3, [r2, #12]
 80031d4:	f023 0320 	bic.w	r3, r3, #32
 80031d8:	e7ec      	b.n	80031b4 <vMBPortSerialEnable+0x1c>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 80031da:	6822      	ldr	r2, [r4, #0]
 80031dc:	68d3      	ldr	r3, [r2, #12]
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	e7f3      	b.n	80031cc <vMBPortSerialEnable+0x34>
 80031e4:	20005554 	.word	0x20005554
 80031e8:	40010800 	.word	0x40010800

080031ec <xMBPortSerialInit>:
//	  huart_m.Init.Mode = UART_MODE_TX_RX;
//	  huart_m.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//	  huart_m.Init.OverSampling = UART_OVERSAMPLING_16;
//	  return (HAL_OK == USART_Init(&huart_m));
	return TRUE;
}
 80031ec:	2001      	movs	r0, #1
 80031ee:	4770      	bx	lr

080031f0 <xMBPortSerialPutByte>:
xMBPortSerialPutByte( CHAR ucByte )
{
    /* Put a byte in the UARTs transmit buffer. This function is called
     * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
     * called. */
	huart1.Instance -> DR = ucByte;
 80031f0:	4b02      	ldr	r3, [pc, #8]	; (80031fc <xMBPortSerialPutByte+0xc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6058      	str	r0, [r3, #4]
    return TRUE;
}
 80031f6:	2001      	movs	r0, #1
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20005554 	.word	0x20005554

08003200 <xMBPortSerialGetByte>:
xMBPortSerialGetByte( CHAR * pucByte )
{
    /* Return the byte in the UARTs receive buffer. This function is called
     * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
     */
    if(huart1.Init.Parity == UART_PARITY_NONE)
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <xMBPortSerialGetByte+0x18>)
 8003202:	691a      	ldr	r2, [r3, #16]
    {
        *pucByte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF);
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
    if(huart1.Init.Parity == UART_PARITY_NONE)
 8003208:	b912      	cbnz	r2, 8003210 <xMBPortSerialGetByte+0x10>
    }
    else

    {
        *pucByte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x007F);
 800320a:	7003      	strb	r3, [r0, #0]
    }
    return TRUE;
}
 800320c:	2001      	movs	r0, #1
 800320e:	4770      	bx	lr
        *pucByte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x007F);
 8003210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003214:	e7f9      	b.n	800320a <xMBPortSerialGetByte+0xa>
 8003216:	bf00      	nop
 8003218:	20005554 	.word	0x20005554

0800321c <prvvUARTTxReadyISR>:
//	if (uiCnt++ < 10){
//		(void) xMBPortSerialPutByte('a');
//	}else{
//		vMBPortSerialEnable(FALSE, FALSE);
//	}
    pxMBFrameCBTransmitterEmpty(  );
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <prvvUARTTxReadyISR+0x8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4718      	bx	r3
 8003222:	bf00      	nop
 8003224:	20005408 	.word	0x20005408

08003228 <prvvUARTRxISR>:
 */
void prvvUARTRxISR( void )
{
//	CHAR cByte;
//	(void) xMBPortSerialGetByte(&cByte);
    pxMBFrameCBByteReceived(  );
 8003228:	4b01      	ldr	r3, [pc, #4]	; (8003230 <prvvUARTRxISR+0x8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4718      	bx	r3
 800322e:	bf00      	nop
 8003230:	20005410 	.word	0x20005410

08003234 <xMBPortTimersInit>:
volatile uint16_t counter = 0;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
	timeout = usTim1Timerout50us;
 8003234:	4b01      	ldr	r3, [pc, #4]	; (800323c <xMBPortTimersInit+0x8>)
 8003236:	8018      	strh	r0, [r3, #0]
    return TRUE;
}
 8003238:	2001      	movs	r0, #1
 800323a:	4770      	bx	lr
 800323c:	2000016c 	.word	0x2000016c

08003240 <vMBPortTimersEnable>:
inline void
vMBPortTimersEnable(  )
{
    /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
	counter = 0;
 8003240:	2200      	movs	r2, #0
 8003242:	4b02      	ldr	r3, [pc, #8]	; (800324c <vMBPortTimersEnable+0xc>)
	HAL_TIM_Base_Start_IT(&htim7);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <vMBPortTimersEnable+0x10>)
	counter = 0;
 8003246:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 8003248:	f7ff ba08 	b.w	800265c <HAL_TIM_Base_Start_IT>
 800324c:	2000016a 	.word	0x2000016a
 8003250:	200055d4 	.word	0x200055d4

08003254 <vMBPortTimersDisable>:
inline void
vMBPortTimersDisable(  )
{
    /* Disable any pending timers. */
	//HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
	HAL_TIM_Base_Stop_IT(&htim7);
 8003254:	4801      	ldr	r0, [pc, #4]	; (800325c <vMBPortTimersDisable+0x8>)
 8003256:	f7ff ba11 	b.w	800267c <HAL_TIM_Base_Stop_IT>
 800325a:	bf00      	nop
 800325c:	200055d4 	.word	0x200055d4

08003260 <HAL_TIM_PeriodElapsedCallback>:
{
    ( void )pxMBPortCBTimerExpired(  );
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim->Instance == TIM7){
 8003260:	6802      	ldr	r2, [r0, #0]
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d10b      	bne.n	8003280 <HAL_TIM_PeriodElapsedCallback+0x20>
		if((++counter) >= timeout){
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800326a:	8813      	ldrh	r3, [r2, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	8013      	strh	r3, [r2, #0]
 8003272:	4a06      	ldr	r2, [pc, #24]	; (800328c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003274:	8812      	ldrh	r2, [r2, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d802      	bhi.n	8003280 <HAL_TIM_PeriodElapsedCallback+0x20>
    ( void )pxMBPortCBTimerExpired(  );
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4718      	bx	r3
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40001400 	.word	0x40001400
 8003288:	2000016a 	.word	0x2000016a
 800328c:	2000016c 	.word	0x2000016c
 8003290:	2000540c 	.word	0x2000540c

08003294 <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 8003294:	23ff      	movs	r3, #255	; 0xff
{
 8003296:	b570      	push	{r4, r5, r6, lr}
    UCHAR           ucCRCHi = 0xFF;
 8003298:	461c      	mov	r4, r3
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800329a:	4d07      	ldr	r5, [pc, #28]	; (80032b8 <usMBCRC16+0x24>)
        ucCRCHi = aucCRCLo[iIndex];
 800329c:	4e07      	ldr	r6, [pc, #28]	; (80032bc <usMBCRC16+0x28>)
 800329e:	4401      	add	r1, r0
    while( usLen-- )
 80032a0:	4288      	cmp	r0, r1
 80032a2:	d102      	bne.n	80032aa <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 80032a4:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80032aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ae:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80032b0:	5cab      	ldrb	r3, [r5, r2]
 80032b2:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 80032b4:	5cb4      	ldrb	r4, [r6, r2]
 80032b6:	e7f3      	b.n	80032a0 <usMBCRC16+0xc>
 80032b8:	080070f4 	.word	0x080070f4
 80032bc:	080071f4 	.word	0x080071f4

080032c0 <eMBRTUInit>:
extern USHORT counter_mb_ext;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	460d      	mov	r5, r1
 80032c4:	4614      	mov	r4, r2
 80032c6:	461e      	mov	r6, r3
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 80032c8:	f002 f9da 	bl	8005680 <__critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 80032cc:	4633      	mov	r3, r6
 80032ce:	2208      	movs	r2, #8
 80032d0:	4621      	mov	r1, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	f7ff ff8a 	bl	80031ec <xMBPortSerialInit>
 80032d8:	2801      	cmp	r0, #1
 80032da:	d10c      	bne.n	80032f6 <eMBRTUInit+0x36>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80032dc:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80032e0:	bf9d      	ittte	ls
 80032e2:	4808      	ldrls	r0, [pc, #32]	; (8003304 <eMBRTUInit+0x44>)
 80032e4:	0064      	lslls	r4, r4, #1
 80032e6:	fbb0 f0f4 	udivls	r0, r0, r4
            usTimerT35_50us = 35;       /* 1800us. */
 80032ea:	2023      	movhi	r0, #35	; 0x23
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 80032ec:	b280      	uxth	r0, r0
 80032ee:	f7ff ffa1 	bl	8003234 <xMBPortTimersInit>
 80032f2:	2801      	cmp	r0, #1
 80032f4:	d004      	beq.n	8003300 <eMBRTUInit+0x40>
        {
            eStatus = MB_EPORTERR;
 80032f6:	2403      	movs	r4, #3
        }
    }
    EXIT_CRITICAL_SECTION(  );
 80032f8:	f002 f9c4 	bl	8005684 <__critical_exit>

    return eStatus;
}
 80032fc:	4620      	mov	r0, r4
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
    eMBErrorCode    eStatus = MB_ENOERR;
 8003300:	2400      	movs	r4, #0
 8003302:	e7f9      	b.n	80032f8 <eMBRTUInit+0x38>
 8003304:	00177fa0 	.word	0x00177fa0

08003308 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8003308:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 800330a:	f002 f9b9 	bl	8005680 <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800330e:	2100      	movs	r1, #0
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <eMBRTUStart+0x20>)
    vMBPortSerialEnable( TRUE, FALSE );
 8003312:	2001      	movs	r0, #1
    eRcvState = STATE_RX_INIT;
 8003314:	7019      	strb	r1, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8003316:	f7ff ff3f 	bl	8003198 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800331a:	f7ff ff91 	bl	8003240 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
}
 800331e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    EXIT_CRITICAL_SECTION(  );
 8003322:	f002 b9af 	b.w	8005684 <__critical_exit>
 8003326:	bf00      	nop
 8003328:	2000016e 	.word	0x2000016e

0800332c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800332c:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 800332e:	f002 f9a7 	bl	8005680 <__critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 8003332:	2100      	movs	r1, #0
 8003334:	4608      	mov	r0, r1
 8003336:	f7ff ff2f 	bl	8003198 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800333a:	f7ff ff8b 	bl	8003254 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
}
 800333e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    EXIT_CRITICAL_SECTION(  );
 8003342:	f002 b99f 	b.w	8005684 <__critical_exit>
	...

08003348 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800334c:	4d15      	ldr	r5, [pc, #84]	; (80033a4 <eMBRTUReceive+0x5c>)
{
 800334e:	4680      	mov	r8, r0
 8003350:	460e      	mov	r6, r1
 8003352:	4617      	mov	r7, r2
    ENTER_CRITICAL_SECTION(  );
 8003354:	f002 f994 	bl	8005680 <__critical_enter>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8003358:	882b      	ldrh	r3, [r5, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	2bff      	cmp	r3, #255	; 0xff
 800335e:	d905      	bls.n	800336c <eMBRTUReceive+0x24>
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <eMBRTUReceive+0x60>)
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <eMBRTUReceive+0x64>)
 8003364:	21a1      	movs	r1, #161	; 0xa1
 8003366:	4812      	ldr	r0, [pc, #72]	; (80033b0 <eMBRTUReceive+0x68>)
 8003368:	f002 ff02 	bl	8006170 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800336c:	882b      	ldrh	r3, [r5, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d805      	bhi.n	8003380 <eMBRTUReceive+0x38>
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
    }
    else
    {
        eStatus = MB_EIO;
 8003374:	2405      	movs	r4, #5
    }

    EXIT_CRITICAL_SECTION(  );
 8003376:	f002 f985 	bl	8005684 <__critical_exit>
    return eStatus;
}
 800337a:	4620      	mov	r0, r4
 800337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8003380:	8829      	ldrh	r1, [r5, #0]
 8003382:	4c0c      	ldr	r4, [pc, #48]	; (80033b4 <eMBRTUReceive+0x6c>)
 8003384:	b289      	uxth	r1, r1
 8003386:	4620      	mov	r0, r4
 8003388:	f7ff ff84 	bl	8003294 <usMBCRC16>
 800338c:	2800      	cmp	r0, #0
 800338e:	d1f1      	bne.n	8003374 <eMBRTUReceive+0x2c>
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8003390:	f814 2b01 	ldrb.w	r2, [r4], #1
 8003394:	f888 2000 	strb.w	r2, [r8]
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003398:	882a      	ldrh	r2, [r5, #0]
 800339a:	3a03      	subs	r2, #3
 800339c:	803a      	strh	r2, [r7, #0]
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800339e:	6034      	str	r4, [r6, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80033a0:	4604      	mov	r4, r0
        xFrameReceived = TRUE;
 80033a2:	e7e8      	b.n	8003376 <eMBRTUReceive+0x2e>
 80033a4:	20000174 	.word	0x20000174
 80033a8:	0800733b 	.word	0x0800733b
 80033ac:	080072f4 	.word	0x080072f4
 80033b0:	08007360 	.word	0x08007360
 80033b4:	2000541c 	.word	0x2000541c

080033b8 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80033b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033bc:	4680      	mov	r8, r0
 80033be:	460f      	mov	r7, r1
 80033c0:	4616      	mov	r6, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80033c2:	f002 f95d 	bl	8005680 <__critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <eMBRTUSend+0x74>)
 80033c8:	781d      	ldrb	r5, [r3, #0]
 80033ca:	b2ed      	uxtb	r5, r5
 80033cc:	2d01      	cmp	r5, #1
 80033ce:	d12a      	bne.n	8003426 <eMBRTUSend+0x6e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
        usSndBufferCount = 1;
 80033d0:	4c17      	ldr	r4, [pc, #92]	; (8003430 <eMBRTUSend+0x78>)
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <eMBRTUSend+0x7c>)
        usSndBufferCount = 1;
 80033d4:	8025      	strh	r5, [r4, #0]
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80033d6:	1e78      	subs	r0, r7, #1

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80033d8:	f807 8c01 	strb.w	r8, [r7, #-1]
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80033dc:	6010      	str	r0, [r2, #0]
        usSndBufferCount += usLength;
 80033de:	8822      	ldrh	r2, [r4, #0]
 80033e0:	4416      	add	r6, r2
 80033e2:	b2b6      	uxth	r6, r6
 80033e4:	8026      	strh	r6, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 80033e6:	8821      	ldrh	r1, [r4, #0]
 80033e8:	b289      	uxth	r1, r1
 80033ea:	f7ff ff53 	bl	8003294 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80033ee:	8823      	ldrh	r3, [r4, #0]
 80033f0:	4911      	ldr	r1, [pc, #68]	; (8003438 <eMBRTUSend+0x80>)
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	b292      	uxth	r2, r2
 80033f8:	8022      	strh	r2, [r4, #0]
 80033fa:	b2c2      	uxtb	r2, r0
 80033fc:	54ca      	strb	r2, [r1, r3]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80033fe:	8823      	ldrh	r3, [r4, #0]
 8003400:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003404:	b29b      	uxth	r3, r3
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	b292      	uxth	r2, r2
 800340a:	8022      	strh	r2, [r4, #0]
 800340c:	54c8      	strb	r0, [r1, r3]

       // usSndBufferCount++; //KOSTIL

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <eMBRTUSend+0x84>)
        vMBPortSerialEnable( FALSE, TRUE );
 8003410:	4629      	mov	r1, r5
 8003412:	2000      	movs	r0, #0
        eSndState = STATE_TX_XMIT;
 8003414:	701d      	strb	r5, [r3, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003416:	2400      	movs	r4, #0
        vMBPortSerialEnable( FALSE, TRUE );
 8003418:	f7ff febe 	bl	8003198 <vMBPortSerialEnable>
    }
    else
    {
        eStatus = MB_EIO;
    }
    EXIT_CRITICAL_SECTION(  );
 800341c:	f002 f932 	bl	8005684 <__critical_exit>
    return eStatus;
}
 8003420:	4620      	mov	r0, r4
 8003422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        eStatus = MB_EIO;
 8003426:	2405      	movs	r4, #5
 8003428:	e7f8      	b.n	800341c <eMBRTUSend+0x64>
 800342a:	bf00      	nop
 800342c:	2000016e 	.word	0x2000016e
 8003430:	20000176 	.word	0x20000176
 8003434:	20000170 	.word	0x20000170
 8003438:	2000541c 	.word	0x2000541c
 800343c:	2000016f 	.word	0x2000016f

08003440 <xMBRTUReceiveFSM>:
xMBRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <xMBRTUReceiveFSM+0x78>)
{
 8003442:	b507      	push	{r0, r1, r2, lr}
    assert( eSndState == STATE_TX_IDLE );
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b12b      	cbz	r3, 8003454 <xMBRTUReceiveFSM+0x14>
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <xMBRTUReceiveFSM+0x7c>)
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <xMBRTUReceiveFSM+0x80>)
 800344c:	21ed      	movs	r1, #237	; 0xed
 800344e:	481d      	ldr	r0, [pc, #116]	; (80034c4 <xMBRTUReceiveFSM+0x84>)
 8003450:	f002 fe8e 	bl	8006170 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8003454:	f10d 0007 	add.w	r0, sp, #7
 8003458:	f7ff fed2 	bl	8003200 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <xMBRTUReceiveFSM+0x88>)
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	2a03      	cmp	r2, #3
 8003462:	d822      	bhi.n	80034aa <xMBRTUReceiveFSM+0x6a>
 8003464:	e8df f002 	tbb	[pc, r2]
 8003468:	1f11021f 	.word	0x1f11021f
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800346c:	2200      	movs	r2, #0
 800346e:	4917      	ldr	r1, [pc, #92]	; (80034cc <xMBRTUReceiveFSM+0x8c>)
 8003470:	800a      	strh	r2, [r1, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003472:	880a      	ldrh	r2, [r1, #0]
 8003474:	b292      	uxth	r2, r2
 8003476:	1c50      	adds	r0, r2, #1
 8003478:	b280      	uxth	r0, r0
 800347a:	8008      	strh	r0, [r1, #0]
 800347c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003480:	4913      	ldr	r1, [pc, #76]	; (80034d0 <xMBRTUReceiveFSM+0x90>)
 8003482:	5488      	strb	r0, [r1, r2]
        eRcvState = STATE_RX_RCV;
 8003484:	2202      	movs	r2, #2
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e00d      	b.n	80034a6 <xMBRTUReceiveFSM+0x66>
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <xMBRTUReceiveFSM+0x8c>)
 800348c:	8811      	ldrh	r1, [r2, #0]
 800348e:	b289      	uxth	r1, r1
 8003490:	29ff      	cmp	r1, #255	; 0xff
 8003492:	d80e      	bhi.n	80034b2 <xMBRTUReceiveFSM+0x72>
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003494:	8813      	ldrh	r3, [r2, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	b289      	uxth	r1, r1
 800349c:	8011      	strh	r1, [r2, #0]
 800349e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <xMBRTUReceiveFSM+0x90>)
 80034a4:	54d1      	strb	r1, [r2, r3]
        }
        vMBPortTimersEnable(  );
 80034a6:	f7ff fecb 	bl	8003240 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
 80034aa:	2000      	movs	r0, #0
 80034ac:	b003      	add	sp, #12
 80034ae:	f85d fb04 	ldr.w	pc, [sp], #4
            eRcvState = STATE_RX_ERROR;
 80034b2:	2203      	movs	r2, #3
 80034b4:	e7e7      	b.n	8003486 <xMBRTUReceiveFSM+0x46>
 80034b6:	bf00      	nop
 80034b8:	2000016f 	.word	0x2000016f
 80034bc:	0800737e 	.word	0x0800737e
 80034c0:	08007302 	.word	0x08007302
 80034c4:	08007360 	.word	0x08007360
 80034c8:	2000016e 	.word	0x2000016e
 80034cc:	20000174 	.word	0x20000174
 80034d0:	2000541c 	.word	0x2000541c

080034d4 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <xMBRTUTransmitFSM+0x74>)
 80034d8:	7818      	ldrb	r0, [r3, #0]
 80034da:	b2c0      	uxtb	r0, r0
 80034dc:	2801      	cmp	r0, #1
 80034de:	d006      	beq.n	80034ee <xMBRTUTransmitFSM+0x1a>
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <xMBRTUTransmitFSM+0x78>)
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <xMBRTUTransmitFSM+0x7c>)
 80034e4:	f44f 7194 	mov.w	r1, #296	; 0x128
 80034e8:	481a      	ldr	r0, [pc, #104]	; (8003554 <xMBRTUTransmitFSM+0x80>)
 80034ea:	f002 fe41 	bl	8006170 <__assert_func>

    switch ( eSndState )
 80034ee:	4f1a      	ldr	r7, [pc, #104]	; (8003558 <xMBRTUTransmitFSM+0x84>)
 80034f0:	783b      	ldrb	r3, [r7, #0]
 80034f2:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80034f6:	b11b      	cbz	r3, 8003500 <xMBRTUTransmitFSM+0x2c>
 80034f8:	2e01      	cmp	r6, #1
 80034fa:	d005      	beq.n	8003508 <xMBRTUTransmitFSM+0x34>
    BOOL            xNeedPoll = FALSE;
 80034fc:	2500      	movs	r5, #0
 80034fe:	e020      	b.n	8003542 <xMBRTUTransmitFSM+0x6e>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8003500:	4631      	mov	r1, r6
 8003502:	f7ff fe49 	bl	8003198 <vMBPortSerialEnable>
 8003506:	e7f9      	b.n	80034fc <xMBRTUTransmitFSM+0x28>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <xMBRTUTransmitFSM+0x88>)
 800350a:	8814      	ldrh	r4, [r2, #0]
 800350c:	b2a4      	uxth	r4, r4
 800350e:	b17c      	cbz	r4, 8003530 <xMBRTUTransmitFSM+0x5c>
        {
        	usSndBufferCount--;
 8003510:	8813      	ldrh	r3, [r2, #0]
            counter_mb_ext = usSndBufferCount;
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8003512:	4c13      	ldr	r4, [pc, #76]	; (8003560 <xMBRTUTransmitFSM+0x8c>)
        	usSndBufferCount--;
 8003514:	3b01      	subs	r3, #1
 8003516:	b29b      	uxth	r3, r3
 8003518:	8013      	strh	r3, [r2, #0]
            counter_mb_ext = usSndBufferCount;
 800351a:	8812      	ldrh	r2, [r2, #0]
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <xMBRTUTransmitFSM+0x90>)
 800351e:	801a      	strh	r2, [r3, #0]
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	7818      	ldrb	r0, [r3, #0]
 8003524:	f7ff fe64 	bl	80031f0 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	6023      	str	r3, [r4, #0]
 800352e:	e7e5      	b.n	80034fc <xMBRTUTransmitFSM+0x28>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003530:	2003      	movs	r0, #3
 8003532:	f7ff fe15 	bl	8003160 <xMBPortEventPost>
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */

            vMBPortSerialEnable( TRUE, FALSE );
 8003536:	4621      	mov	r1, r4
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003538:	4605      	mov	r5, r0
            vMBPortSerialEnable( TRUE, FALSE );
 800353a:	4630      	mov	r0, r6
 800353c:	f7ff fe2c 	bl	8003198 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003540:	703c      	strb	r4, [r7, #0]
        }
        break;
    }

    return xNeedPoll;
}
 8003542:	4628      	mov	r0, r5
 8003544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003546:	bf00      	nop
 8003548:	2000016e 	.word	0x2000016e
 800354c:	080073fc 	.word	0x080073fc
 8003550:	08007313 	.word	0x08007313
 8003554:	08007360 	.word	0x08007360
 8003558:	2000016f 	.word	0x2000016f
 800355c:	20000176 	.word	0x20000176
 8003560:	20000170 	.word	0x20000170
 8003564:	20000090 	.word	0x20000090

08003568 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003568:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <xMBRTUTimerT35Expired+0x54>)
 800356c:	7818      	ldrb	r0, [r3, #0]
 800356e:	461d      	mov	r5, r3
 8003570:	b2c0      	uxtb	r0, r0
 8003572:	2802      	cmp	r0, #2
 8003574:	d00b      	beq.n	800358e <xMBRTUTimerT35Expired+0x26>
 8003576:	2803      	cmp	r0, #3
 8003578:	d01d      	beq.n	80035b6 <xMBRTUTimerT35Expired+0x4e>
 800357a:	b950      	cbnz	r0, 8003592 <xMBRTUTimerT35Expired+0x2a>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800357c:	f7ff fdf0 	bl	8003160 <xMBPortEventPost>
 8003580:	4604      	mov	r4, r0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8003582:	f7ff fe67 	bl	8003254 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003586:	2301      	movs	r3, #1

    return xNeedPoll;
}
 8003588:	4620      	mov	r0, r4
    eRcvState = STATE_RX_IDLE;
 800358a:	702b      	strb	r3, [r5, #0]
}
 800358c:	bd38      	pop	{r3, r4, r5, pc}
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 800358e:	2001      	movs	r0, #1
 8003590:	e7f4      	b.n	800357c <xMBRTUTimerT35Expired+0x14>
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8003598:	2a00      	cmp	r2, #0
 800359a:	d0f2      	beq.n	8003582 <xMBRTUTimerT35Expired+0x1a>
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	2a02      	cmp	r2, #2
 80035a0:	d009      	beq.n	80035b6 <xMBRTUTimerT35Expired+0x4e>
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d006      	beq.n	80035b6 <xMBRTUTimerT35Expired+0x4e>
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <xMBRTUTimerT35Expired+0x58>)
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <xMBRTUTimerT35Expired+0x5c>)
 80035ac:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80035b0:	4805      	ldr	r0, [pc, #20]	; (80035c8 <xMBRTUTimerT35Expired+0x60>)
 80035b2:	f002 fddd 	bl	8006170 <__assert_func>
    BOOL            xNeedPoll = FALSE;
 80035b6:	2400      	movs	r4, #0
 80035b8:	e7e3      	b.n	8003582 <xMBRTUTimerT35Expired+0x1a>
 80035ba:	bf00      	nop
 80035bc:	2000016e 	.word	0x2000016e
 80035c0:	08007399 	.word	0x08007399
 80035c4:	08007325 	.word	0x08007325
 80035c8:	08007360 	.word	0x08007360

080035cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035cc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80035ce:	f000 fee5 	bl	800439c <vTaskStartScheduler>
  
  return osOK;
}
 80035d2:	2000      	movs	r0, #0
 80035d4:	bd08      	pop	{r3, pc}

080035d6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d6:	f100 0308 	add.w	r3, r0, #8
 80035da:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035e4:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035e6:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035e8:	6003      	str	r3, [r0, #0]
 80035ea:	4770      	bx	lr

080035ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	6103      	str	r3, [r0, #16]
 80035f0:	4770      	bx	lr

080035f2 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80035f2:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035f4:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80035f6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035f8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035fe:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003600:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003602:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003604:	3301      	adds	r3, #1
 8003606:	6003      	str	r3, [r0, #0]
 8003608:	4770      	bx	lr

0800360a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800360a:	680a      	ldr	r2, [r1, #0]
{
 800360c:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800360e:	1c53      	adds	r3, r2, #1
 8003610:	d10a      	bne.n	8003628 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003612:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003618:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800361a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800361c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800361e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003620:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003622:	3301      	adds	r3, #1
 8003624:	6003      	str	r3, [r0, #0]
 8003626:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003628:	f100 0308 	add.w	r3, r0, #8
 800362c:	685c      	ldr	r4, [r3, #4]
 800362e:	6825      	ldr	r5, [r4, #0]
 8003630:	42aa      	cmp	r2, r5
 8003632:	d3ef      	bcc.n	8003614 <vListInsert+0xa>
 8003634:	4623      	mov	r3, r4
 8003636:	e7f9      	b.n	800362c <vListInsert+0x22>

08003638 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003638:	6841      	ldr	r1, [r0, #4]
 800363a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800363c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800363e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003640:	6882      	ldr	r2, [r0, #8]
 8003642:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003648:	bf08      	it	eq
 800364a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800364c:	2200      	movs	r2, #0
 800364e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	3a01      	subs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003656:	6818      	ldr	r0, [r3, #0]
}
 8003658:	4770      	bx	lr
	...

0800365c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800365c:	2300      	movs	r3, #0
{
 800365e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8003660:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <prvTaskExitError+0x3c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	d008      	beq.n	800367c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	e7fe      	b.n	800367a <prvTaskExitError+0x1e>
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800368c:	9b01      	ldr	r3, [sp, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0fc      	beq.n	800368c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003692:	b002      	add	sp, #8
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	2000008c 	.word	0x2000008c

0800369c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800369c:	4806      	ldr	r0, [pc, #24]	; (80036b8 <prvPortStartFirstTask+0x1c>)
 800369e:	6800      	ldr	r0, [r0, #0]
 80036a0:	6800      	ldr	r0, [r0, #0]
 80036a2:	f380 8808 	msr	MSP, r0
 80036a6:	b662      	cpsie	i
 80036a8:	b661      	cpsie	f
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	df00      	svc	0
 80036b4:	bf00      	nop
 80036b6:	0000      	.short	0x0000
 80036b8:	e000ed08 	.word	0xe000ed08

080036bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036c6:	f021 0101 	bic.w	r1, r1, #1
 80036ca:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036ce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80036d2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80036d6:	3840      	subs	r0, #64	; 0x40
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	0800365d 	.word	0x0800365d

080036e0 <SVC_Handler>:
	__asm volatile (
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <pxCurrentTCBConst2>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036ea:	f380 8809 	msr	PSP, r0
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f380 8811 	msr	BASEPRI, r0
 80036fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80036fe:	4770      	bx	lr

08003700 <pxCurrentTCBConst2>:
 8003700:	20004fb8 	.word	0x20004fb8

08003704 <vPortEnterCritical>:
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <vPortEnterCritical+0x3c>)
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800371a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800371c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800371e:	d10d      	bne.n	800373c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <vPortEnterCritical+0x40>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003728:	d008      	beq.n	800373c <vPortEnterCritical+0x38>
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	e7fe      	b.n	800373a <vPortEnterCritical+0x36>
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	2000008c 	.word	0x2000008c
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003748:	4a08      	ldr	r2, [pc, #32]	; (800376c <vPortExitCritical+0x24>)
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	b943      	cbnz	r3, 8003760 <vPortExitCritical+0x18>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	e7fe      	b.n	800375e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003760:	3b01      	subs	r3, #1
 8003762:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003764:	b90b      	cbnz	r3, 800376a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	4770      	bx	lr
 800376c:	2000008c 	.word	0x2000008c

08003770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003770:	f3ef 8009 	mrs	r0, PSP
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <pxCurrentTCBConst>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003780:	6010      	str	r0, [r2, #0]
 8003782:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003786:	f04f 0050 	mov.w	r0, #80	; 0x50
 800378a:	f380 8811 	msr	BASEPRI, r0
 800378e:	f000 ff77 	bl	8004680 <vTaskSwitchContext>
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f380 8811 	msr	BASEPRI, r0
 800379a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	6808      	ldr	r0, [r1, #0]
 80037a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037a6:	f380 8809 	msr	PSP, r0
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	4770      	bx	lr

080037b0 <pxCurrentTCBConst>:
 80037b0:	20004fb8 	.word	0x20004fb8

080037b4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037b4:	b508      	push	{r3, lr}
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037c6:	f000 fe2d 	bl	8004424 <xTaskIncrementTick>
 80037ca:	b118      	cbz	r0, 80037d4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d0:	4b02      	ldr	r3, [pc, #8]	; (80037dc <xPortSysTickHandler+0x28>)
 80037d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80037d4:	2300      	movs	r3, #0
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	bd08      	pop	{r3, pc}
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	4a08      	ldr	r2, [pc, #32]	; (8003804 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037e4:	4908      	ldr	r1, [pc, #32]	; (8003808 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037e8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <vPortSetupTimerInterrupt+0x2c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037f6:	4906      	ldr	r1, [pc, #24]	; (8003810 <vPortSetupTimerInterrupt+0x30>)
 80037f8:	3b01      	subs	r3, #1
 80037fa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037fc:	2307      	movs	r3, #7
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010
 8003808:	e000e018 	.word	0xe000e018
 800380c:	200000a0 	.word	0x200000a0
 8003810:	e000e014 	.word	0xe000e014

08003814 <xPortStartScheduler>:
{
 8003814:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003818:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003824:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003826:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800382e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003832:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003836:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003838:	2207      	movs	r2, #7
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <xPortStartScheduler+0xa8>)
 800383c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800383e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003842:	1e54      	subs	r4, r2, #1
 8003844:	0600      	lsls	r0, r0, #24
 8003846:	d40d      	bmi.n	8003864 <xPortStartScheduler+0x50>
 8003848:	b101      	cbz	r1, 800384c <xPortStartScheduler+0x38>
 800384a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2a03      	cmp	r2, #3
 8003850:	d011      	beq.n	8003876 <xPortStartScheduler+0x62>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	e7fe      	b.n	8003862 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003864:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003868:	2101      	movs	r1, #1
 800386a:	0052      	lsls	r2, r2, #1
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	f88d 2003 	strb.w	r2, [sp, #3]
 8003872:	4622      	mov	r2, r4
 8003874:	e7e3      	b.n	800383e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8003876:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003878:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800387a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800387e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003880:	9b01      	ldr	r3, [sp, #4]
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <xPortStartScheduler+0xa0>)
 8003884:	b2db      	uxtb	r3, r3
 8003886:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <xPortStartScheduler+0xac>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003898:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800389a:	f7ff ffa1 	bl	80037e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <xPortStartScheduler+0xb0>)
 80038a0:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80038a2:	f7ff fefb 	bl	800369c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80038a6:	f000 feeb 	bl	8004680 <vTaskSwitchContext>
	prvTaskExitError();
 80038aa:	f7ff fed7 	bl	800365c <prvTaskExitError>
}
 80038ae:	4620      	mov	r0, r4
 80038b0:	b002      	add	sp, #8
 80038b2:	bd10      	pop	{r4, pc}
 80038b4:	e000e400 	.word	0xe000e400
 80038b8:	20000178 	.word	0x20000178
 80038bc:	2000017c 	.word	0x2000017c
 80038c0:	e000ed20 	.word	0xe000ed20
 80038c4:	2000008c 	.word	0x2000008c

080038c8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80038c8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <prvInsertBlockIntoFreeList+0x40>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4282      	cmp	r2, r0
 80038d0:	d318      	bcc.n	8003904 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038d2:	685c      	ldr	r4, [r3, #4]
 80038d4:	1919      	adds	r1, r3, r4
 80038d6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038d8:	bf01      	itttt	eq
 80038da:	6841      	ldreq	r1, [r0, #4]
 80038dc:	4618      	moveq	r0, r3
 80038de:	1909      	addeq	r1, r1, r4
 80038e0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038e2:	6844      	ldr	r4, [r0, #4]
 80038e4:	1901      	adds	r1, r0, r4
 80038e6:	428a      	cmp	r2, r1
 80038e8:	d107      	bne.n	80038fa <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80038ea:	4908      	ldr	r1, [pc, #32]	; (800390c <prvInsertBlockIntoFreeList+0x44>)
 80038ec:	6809      	ldr	r1, [r1, #0]
 80038ee:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038f0:	bf1f      	itttt	ne
 80038f2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038f4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038f6:	1909      	addne	r1, r1, r4
 80038f8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038fa:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038fc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038fe:	bf18      	it	ne
 8003900:	6018      	strne	r0, [r3, #0]
 8003902:	bd10      	pop	{r4, pc}
 8003904:	4613      	mov	r3, r2
 8003906:	e7e1      	b.n	80038cc <prvInsertBlockIntoFreeList+0x4>
 8003908:	20004fb0 	.word	0x20004fb0
 800390c:	20000180 	.word	0x20000180

08003910 <pvPortMalloc>:
{
 8003910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003914:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003916:	f000 fd77 	bl	8004408 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800391a:	493d      	ldr	r1, [pc, #244]	; (8003a10 <pvPortMalloc+0x100>)
 800391c:	4d3d      	ldr	r5, [pc, #244]	; (8003a14 <pvPortMalloc+0x104>)
 800391e:	680b      	ldr	r3, [r1, #0]
 8003920:	b9fb      	cbnz	r3, 8003962 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8003922:	4a3d      	ldr	r2, [pc, #244]	; (8003a18 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8003924:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003926:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003928:	bf0f      	iteee	eq
 800392a:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800392e:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003930:	4b3a      	ldrne	r3, [pc, #232]	; (8003a1c <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003932:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003936:	bf18      	it	ne
 8003938:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800393a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800393c:	4e38      	ldr	r6, [pc, #224]	; (8003a20 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800393e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003940:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003944:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003946:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003948:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800394a:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 800394c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800394e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003950:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003954:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003956:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003958:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <pvPortMalloc+0x118>)
 800395a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800395c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003960:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003962:	682f      	ldr	r7, [r5, #0]
 8003964:	4227      	tst	r7, r4
 8003966:	d116      	bne.n	8003996 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8003968:	2c00      	cmp	r4, #0
 800396a:	d040      	beq.n	80039ee <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 800396c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003970:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003972:	bf1c      	itt	ne
 8003974:	f023 0307 	bicne.w	r3, r3, #7
 8003978:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800397a:	b163      	cbz	r3, 8003996 <pvPortMalloc+0x86>
 800397c:	4a2a      	ldr	r2, [pc, #168]	; (8003a28 <pvPortMalloc+0x118>)
 800397e:	6816      	ldr	r6, [r2, #0]
 8003980:	4690      	mov	r8, r2
 8003982:	42b3      	cmp	r3, r6
 8003984:	d807      	bhi.n	8003996 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8003986:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <pvPortMalloc+0x110>)
 8003988:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800398a:	6868      	ldr	r0, [r5, #4]
 800398c:	4283      	cmp	r3, r0
 800398e:	d804      	bhi.n	800399a <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003990:	6809      	ldr	r1, [r1, #0]
 8003992:	428d      	cmp	r5, r1
 8003994:	d107      	bne.n	80039a6 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8003996:	2400      	movs	r4, #0
 8003998:	e029      	b.n	80039ee <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800399a:	682c      	ldr	r4, [r5, #0]
 800399c:	2c00      	cmp	r4, #0
 800399e:	d0f7      	beq.n	8003990 <pvPortMalloc+0x80>
 80039a0:	462a      	mov	r2, r5
 80039a2:	4625      	mov	r5, r4
 80039a4:	e7f1      	b.n	800398a <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039a6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039a8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039aa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039ac:	1ac2      	subs	r2, r0, r3
 80039ae:	2a10      	cmp	r2, #16
 80039b0:	d90f      	bls.n	80039d2 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039b2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039b4:	0741      	lsls	r1, r0, #29
 80039b6:	d008      	beq.n	80039ca <pvPortMalloc+0xba>
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	e7fe      	b.n	80039c8 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039ca:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039cc:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039ce:	f7ff ff7b 	bl	80038c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039d2:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039d4:	4913      	ldr	r1, [pc, #76]	; (8003a24 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039d6:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039d8:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80039da:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039dc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039de:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039e2:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039e4:	bf38      	it	cc
 80039e6:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039e8:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039ea:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039ec:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80039ee:	f000 fdab 	bl	8004548 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039f2:	0763      	lsls	r3, r4, #29
 80039f4:	d008      	beq.n	8003a08 <pvPortMalloc+0xf8>
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	e7fe      	b.n	8003a06 <pvPortMalloc+0xf6>
}
 8003a08:	4620      	mov	r0, r4
 8003a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000180 	.word	0x20000180
 8003a14:	20004fa4 	.word	0x20004fa4
 8003a18:	20000184 	.word	0x20000184
 8003a1c:	20004fa4 	.word	0x20004fa4
 8003a20:	20004fb0 	.word	0x20004fb0
 8003a24:	20004fac 	.word	0x20004fac
 8003a28:	20004fa8 	.word	0x20004fa8

08003a2c <vPortFree>:
{
 8003a2c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003a2e:	4604      	mov	r4, r0
 8003a30:	b370      	cbz	r0, 8003a90 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <vPortFree+0x68>)
 8003a34:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	4213      	tst	r3, r2
 8003a3c:	d108      	bne.n	8003a50 <vPortFree+0x24>
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	e7fe      	b.n	8003a4e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a50:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003a54:	b141      	cbz	r1, 8003a68 <vPortFree+0x3c>
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	e7fe      	b.n	8003a66 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a68:	ea23 0302 	bic.w	r3, r3, r2
 8003a6c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003a70:	f000 fcca 	bl	8004408 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a74:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <vPortFree+0x6c>)
 8003a76:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003a7a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a7c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a80:	440b      	add	r3, r1
 8003a82:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a84:	f7ff ff20 	bl	80038c8 <prvInsertBlockIntoFreeList>
}
 8003a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003a8c:	f000 bd5c 	b.w	8004548 <xTaskResumeAll>
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	bf00      	nop
 8003a94:	20004fa4 	.word	0x20004fa4
 8003a98:	20004fa8 	.word	0x20004fa8

08003a9c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aa0:	f7ff fe30 	bl	8003704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003aa4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003aa6:	f7ff fe4f 	bl	8003748 <vPortExitCritical>

	return xReturn;
}
 8003aaa:	fab4 f084 	clz	r0, r4
 8003aae:	0940      	lsrs	r0, r0, #5
 8003ab0:	bd10      	pop	{r4, pc}

08003ab2 <prvCopyDataToQueue>:
{
 8003ab2:	b570      	push	{r4, r5, r6, lr}
 8003ab4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ab6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003ab8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aba:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003abc:	b942      	cbnz	r2, 8003ad0 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003abe:	6805      	ldr	r5, [r0, #0]
 8003ac0:	b99d      	cbnz	r5, 8003aea <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ac2:	6840      	ldr	r0, [r0, #4]
 8003ac4:	f000 ff24 	bl	8004910 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003ac8:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003aca:	3601      	adds	r6, #1
 8003acc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003ad0:	b96d      	cbnz	r5, 8003aee <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ad2:	6880      	ldr	r0, [r0, #8]
 8003ad4:	f002 fb82 	bl	80061dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ad8:	68a3      	ldr	r3, [r4, #8]
 8003ada:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003adc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ade:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ae0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d301      	bcc.n	8003aea <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003aea:	2000      	movs	r0, #0
 8003aec:	e7ed      	b.n	8003aca <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aee:	68c0      	ldr	r0, [r0, #12]
 8003af0:	f002 fb74 	bl	80061dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003af6:	68e2      	ldr	r2, [r4, #12]
 8003af8:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003afa:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003afc:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003afe:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b00:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b02:	bf3e      	ittt	cc
 8003b04:	6862      	ldrcc	r2, [r4, #4]
 8003b06:	189b      	addcc	r3, r3, r2
 8003b08:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003b0a:	2d02      	cmp	r5, #2
 8003b0c:	d1ed      	bne.n	8003aea <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b0e:	b10e      	cbz	r6, 8003b14 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003b10:	3e01      	subs	r6, #1
 8003b12:	e7ea      	b.n	8003aea <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003b14:	4630      	mov	r0, r6
 8003b16:	e7d8      	b.n	8003aca <prvCopyDataToQueue+0x18>

08003b18 <prvUnlockQueue>:
{
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003b1c:	f7ff fdf2 	bl	8003704 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003b20:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b24:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003b28:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b2a:	2d00      	cmp	r5, #0
 8003b2c:	dc14      	bgt.n	8003b58 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8003b2e:	23ff      	movs	r3, #255	; 0xff
 8003b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003b34:	f7ff fe08 	bl	8003748 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003b38:	f7ff fde4 	bl	8003704 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003b3c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b40:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003b44:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b46:	2d00      	cmp	r5, #0
 8003b48:	dc12      	bgt.n	8003b70 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003b4a:	23ff      	movs	r3, #255	; 0xff
 8003b4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003b54:	f7ff bdf8 	b.w	8003748 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0e7      	beq.n	8003b2e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f000 fde2 	bl	8004728 <xTaskRemoveFromEventList>
 8003b64:	b108      	cbz	r0, 8003b6a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003b66:	f000 fe69 	bl	800483c <vTaskMissedYield>
 8003b6a:	3d01      	subs	r5, #1
 8003b6c:	b26d      	sxtb	r5, r5
 8003b6e:	e7dc      	b.n	8003b2a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0e9      	beq.n	8003b4a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b76:	4630      	mov	r0, r6
 8003b78:	f000 fdd6 	bl	8004728 <xTaskRemoveFromEventList>
 8003b7c:	b108      	cbz	r0, 8003b82 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003b7e:	f000 fe5d 	bl	800483c <vTaskMissedYield>
 8003b82:	3d01      	subs	r5, #1
 8003b84:	b26d      	sxtb	r5, r5
 8003b86:	e7de      	b.n	8003b46 <prvUnlockQueue+0x2e>

08003b88 <xQueueGenericReset>:
{
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	b940      	cbnz	r0, 8003ba2 <xQueueGenericReset+0x1a>
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	e7fe      	b.n	8003ba0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8003ba2:	f7ff fdaf 	bl	8003704 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ba6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003ba8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003baa:	6822      	ldr	r2, [r4, #0]
 8003bac:	4343      	muls	r3, r0
 8003bae:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003bb0:	1a1b      	subs	r3, r3, r0
 8003bb2:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003bb4:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003bb6:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bb8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003bba:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bbc:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bbe:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003bc8:	b995      	cbnz	r5, 8003bf0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bca:	6923      	ldr	r3, [r4, #16]
 8003bcc:	b163      	cbz	r3, 8003be8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bce:	f104 0010 	add.w	r0, r4, #16
 8003bd2:	f000 fda9 	bl	8004728 <xTaskRemoveFromEventList>
 8003bd6:	b138      	cbz	r0, 8003be8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <xQueueGenericReset+0x7c>)
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003be8:	f7ff fdae 	bl	8003748 <vPortExitCritical>
}
 8003bec:	2001      	movs	r0, #1
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bf0:	f104 0010 	add.w	r0, r4, #16
 8003bf4:	f7ff fcef 	bl	80035d6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bfc:	f7ff fceb 	bl	80035d6 <vListInitialise>
 8003c00:	e7f2      	b.n	8003be8 <xQueueGenericReset+0x60>
 8003c02:	bf00      	nop
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <xQueueGenericCreate>:
	{
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	b940      	cbnz	r0, 8003c22 <xQueueGenericCreate+0x1a>
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	e7fe      	b.n	8003c20 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c22:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003c24:	3048      	adds	r0, #72	; 0x48
 8003c26:	f7ff fe73 	bl	8003910 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	b150      	cbz	r0, 8003c44 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c34:	b945      	cbnz	r5, 8003c48 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c36:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003c38:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c3a:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff ffa2 	bl	8003b88 <xQueueGenericReset>
	}
 8003c44:	4620      	mov	r0, r4
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003c48:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c4c:	6003      	str	r3, [r0, #0]
 8003c4e:	e7f3      	b.n	8003c38 <xQueueGenericCreate+0x30>

08003c50 <xQueueGenericSend>:
{
 8003c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c54:	4689      	mov	r9, r1
 8003c56:	9201      	str	r2, [sp, #4]
 8003c58:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	b940      	cbnz	r0, 8003c70 <xQueueGenericSend+0x20>
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	e7fe      	b.n	8003c6e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c70:	2900      	cmp	r1, #0
 8003c72:	f040 8088 	bne.w	8003d86 <xQueueGenericSend+0x136>
 8003c76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8084 	beq.w	8003d86 <xQueueGenericSend+0x136>
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	e7fe      	b.n	8003c8e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c90:	9e01      	ldr	r6, [sp, #4]
 8003c92:	2e00      	cmp	r6, #0
 8003c94:	f000 8082 	beq.w	8003d9c <xQueueGenericSend+0x14c>
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003caa:	9d01      	ldr	r5, [sp, #4]
 8003cac:	b91d      	cbnz	r5, 8003cb6 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8003cae:	f7ff fd4b 	bl	8003748 <vPortExitCritical>
			return errQUEUE_FULL;
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e058      	b.n	8003d68 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8003cb6:	b916      	cbnz	r6, 8003cbe <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cb8:	a802      	add	r0, sp, #8
 8003cba:	f000 fd77 	bl	80047ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003cbe:	f7ff fd43 	bl	8003748 <vPortExitCritical>
		vTaskSuspendAll();
 8003cc2:	f000 fba1 	bl	8004408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cc6:	f7ff fd1d 	bl	8003704 <vPortEnterCritical>
 8003cca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003cce:	2bff      	cmp	r3, #255	; 0xff
 8003cd0:	bf08      	it	eq
 8003cd2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003cd6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003cda:	2bff      	cmp	r3, #255	; 0xff
 8003cdc:	bf08      	it	eq
 8003cde:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003ce2:	f7ff fd31 	bl	8003748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ce6:	a901      	add	r1, sp, #4
 8003ce8:	a802      	add	r0, sp, #8
 8003cea:	f000 fd6b 	bl	80047c4 <xTaskCheckForTimeOut>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d143      	bne.n	8003d7a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cf2:	f7ff fd07 	bl	8003704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cf6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003cf8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003cfa:	f7ff fd25 	bl	8003748 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cfe:	42ae      	cmp	r6, r5
 8003d00:	d135      	bne.n	8003d6e <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d02:	9901      	ldr	r1, [sp, #4]
 8003d04:	f104 0010 	add.w	r0, r4, #16
 8003d08:	f000 fcf4 	bl	80046f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f7ff ff03 	bl	8003b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d12:	f000 fc19 	bl	8004548 <xTaskResumeAll>
 8003d16:	b938      	cbnz	r0, 8003d28 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8003d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d1c:	f8ca 3000 	str.w	r3, [sl]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003d2a:	f7ff fceb 	bl	8003704 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d301      	bcc.n	8003d3a <xQueueGenericSend+0xea>
 8003d36:	2f02      	cmp	r7, #2
 8003d38:	d1b7      	bne.n	8003caa <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d3a:	463a      	mov	r2, r7
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f7ff feb7 	bl	8003ab2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d46:	b11b      	cbz	r3, 8003d50 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d4c:	f000 fcec 	bl	8004728 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003d50:	b138      	cbz	r0, 8003d62 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8003d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d56:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <xQueueGenericSend+0x168>)
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003d62:	f7ff fcf1 	bl	8003748 <vPortExitCritical>
				return pdPASS;
 8003d66:	2001      	movs	r0, #1
}
 8003d68:	b004      	add	sp, #16
 8003d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f7ff fed2 	bl	8003b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d74:	f000 fbe8 	bl	8004548 <xTaskResumeAll>
 8003d78:	e7d6      	b.n	8003d28 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f7ff fecc 	bl	8003b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d80:	f000 fbe2 	bl	8004548 <xTaskResumeAll>
 8003d84:	e795      	b.n	8003cb2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d86:	2f02      	cmp	r7, #2
 8003d88:	d102      	bne.n	8003d90 <xQueueGenericSend+0x140>
 8003d8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10a      	bne.n	8003da6 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d90:	f000 fd5a 	bl	8004848 <xTaskGetSchedulerState>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	f43f af7b 	beq.w	8003c90 <xQueueGenericSend+0x40>
 8003d9a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003d9c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003da0:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003db8 <xQueueGenericSend+0x168>
 8003da4:	e7c1      	b.n	8003d2a <xQueueGenericSend+0xda>
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	e7fe      	b.n	8003db6 <xQueueGenericSend+0x166>
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <xQueueSemaphoreTake>:
{
 8003dbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8003dc0:	4604      	mov	r4, r0
{
 8003dc2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003dc4:	b940      	cbnz	r0, 8003dd8 <xQueueSemaphoreTake+0x1c>
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	e7fe      	b.n	8003dd6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003dd8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003dda:	b145      	cbz	r5, 8003dee <xQueueSemaphoreTake+0x32>
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	e7fe      	b.n	8003dec <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dee:	f000 fd2b 	bl	8004848 <xTaskGetSchedulerState>
 8003df2:	b918      	cbnz	r0, 8003dfc <xQueueSemaphoreTake+0x40>
 8003df4:	9d01      	ldr	r5, [sp, #4]
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	f040 8095 	bne.w	8003f26 <xQueueSemaphoreTake+0x16a>
 8003dfc:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8003dfe:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003e00:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8003f38 <xQueueSemaphoreTake+0x17c>
		taskENTER_CRITICAL();
 8003e04:	f7ff fc7e 	bl	8003704 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e0a:	b1e3      	cbz	r3, 8003e46 <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	b913      	cbnz	r3, 8003e1a <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003e14:	f000 fe24 	bl	8004a60 <pvTaskIncrementMutexHeldCount>
 8003e18:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	b163      	cbz	r3, 8003e38 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e1e:	f104 0010 	add.w	r0, r4, #16
 8003e22:	f000 fc81 	bl	8004728 <xTaskRemoveFromEventList>
 8003e26:	b138      	cbz	r0, 8003e38 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8003e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2c:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <xQueueSemaphoreTake+0x17c>)
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003e38:	f7ff fc86 	bl	8003748 <vPortExitCritical>
				return pdPASS;
 8003e3c:	2501      	movs	r5, #1
}
 8003e3e:	4628      	mov	r0, r5
 8003e40:	b004      	add	sp, #16
 8003e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	b963      	cbnz	r3, 8003e64 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e4a:	b145      	cbz	r5, 8003e5e <xQueueSemaphoreTake+0xa2>
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	e7fe      	b.n	8003e5c <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8003e5e:	f7ff fc73 	bl	8003748 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003e62:	e7ec      	b.n	8003e3e <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8003e64:	b916      	cbnz	r6, 8003e6c <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e66:	a802      	add	r0, sp, #8
 8003e68:	f000 fca0 	bl	80047ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003e6c:	f7ff fc6c 	bl	8003748 <vPortExitCritical>
		vTaskSuspendAll();
 8003e70:	f000 faca 	bl	8004408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e74:	f7ff fc46 	bl	8003704 <vPortEnterCritical>
 8003e78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003e7c:	2bff      	cmp	r3, #255	; 0xff
 8003e7e:	bf08      	it	eq
 8003e80:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003e84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003e88:	2bff      	cmp	r3, #255	; 0xff
 8003e8a:	bf08      	it	eq
 8003e8c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8003e90:	f7ff fc5a 	bl	8003748 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e94:	a901      	add	r1, sp, #4
 8003e96:	a802      	add	r0, sp, #8
 8003e98:	f000 fc94 	bl	80047c4 <xTaskCheckForTimeOut>
 8003e9c:	bb40      	cbnz	r0, 8003ef0 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff fdfc 	bl	8003a9c <prvIsQueueEmpty>
 8003ea4:	b1f0      	cbz	r0, 8003ee4 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	b93b      	cbnz	r3, 8003eba <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8003eaa:	f7ff fc2b 	bl	8003704 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003eae:	6860      	ldr	r0, [r4, #4]
 8003eb0:	f000 fcda 	bl	8004868 <xTaskPriorityInherit>
 8003eb4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8003eb6:	f7ff fc47 	bl	8003748 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eba:	9901      	ldr	r1, [sp, #4]
 8003ebc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ec0:	f000 fc18 	bl	80046f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7ff fe27 	bl	8003b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003eca:	f000 fb3d 	bl	8004548 <xTaskResumeAll>
 8003ece:	b938      	cbnz	r0, 8003ee0 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8003ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ed4:	f8c8 3000 	str.w	r3, [r8]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	2601      	movs	r6, #1
 8003ee2:	e78f      	b.n	8003e04 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff fe17 	bl	8003b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003eea:	f000 fb2d 	bl	8004548 <xTaskResumeAll>
 8003eee:	e7f7      	b.n	8003ee0 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7ff fe11 	bl	8003b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef6:	f000 fb27 	bl	8004548 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7ff fdce 	bl	8003a9c <prvIsQueueEmpty>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d0ed      	beq.n	8003ee0 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	d09a      	beq.n	8003e3e <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8003f08:	f7ff fbfc 	bl	8003704 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003f0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f0e:	b119      	cbz	r1, 8003f18 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003f18:	6860      	ldr	r0, [r4, #4]
 8003f1a:	f000 fd49 	bl	80049b0 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8003f1e:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8003f20:	f7ff fc12 	bl	8003748 <vPortExitCritical>
 8003f24:	e78b      	b.n	8003e3e <xQueueSemaphoreTake+0x82>
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	e7fe      	b.n	8003f36 <xQueueSemaphoreTake+0x17a>
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f42:	f7ff fbdf 	bl	8003704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f46:	4b2d      	ldr	r3, [pc, #180]	; (8003ffc <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8003f48:	4c2d      	ldr	r4, [pc, #180]	; (8004000 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4f2d      	ldr	r7, [pc, #180]	; (8004004 <prvAddNewTaskToReadyList+0xc8>)
 8003f4e:	3201      	adds	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003f52:	6825      	ldr	r5, [r4, #0]
 8003f54:	2d00      	cmp	r5, #0
 8003f56:	d145      	bne.n	8003fe4 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f58:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d11c      	bne.n	8003f9a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f60:	1978      	adds	r0, r7, r5
 8003f62:	3514      	adds	r5, #20
 8003f64:	f7ff fb37 	bl	80035d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f68:	2d8c      	cmp	r5, #140	; 0x8c
 8003f6a:	d1f9      	bne.n	8003f60 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f6c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8004030 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8003f70:	4d25      	ldr	r5, [pc, #148]	; (8004008 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8003f72:	4640      	mov	r0, r8
 8003f74:	f7ff fb2f 	bl	80035d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f7ff fb2c 	bl	80035d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f7e:	4823      	ldr	r0, [pc, #140]	; (800400c <prvAddNewTaskToReadyList+0xd0>)
 8003f80:	f7ff fb29 	bl	80035d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f84:	4822      	ldr	r0, [pc, #136]	; (8004010 <prvAddNewTaskToReadyList+0xd4>)
 8003f86:	f7ff fb26 	bl	80035d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f8a:	4822      	ldr	r0, [pc, #136]	; (8004014 <prvAddNewTaskToReadyList+0xd8>)
 8003f8c:	f7ff fb23 	bl	80035d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <prvAddNewTaskToReadyList+0xdc>)
 8003f92:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f96:	4b21      	ldr	r3, [pc, #132]	; (800401c <prvAddNewTaskToReadyList+0xe0>)
 8003f98:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003f9a:	4a21      	ldr	r2, [pc, #132]	; (8004020 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8003f9c:	4921      	ldr	r1, [pc, #132]	; (8004024 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8003f9e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003fa0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003faa:	4093      	lsls	r3, r2
 8003fac:	4303      	orrs	r3, r0
 8003fae:	2014      	movs	r0, #20
 8003fb0:	600b      	str	r3, [r1, #0]
 8003fb2:	fb00 7002 	mla	r0, r0, r2, r7
 8003fb6:	1d31      	adds	r1, r6, #4
 8003fb8:	f7ff fb1b 	bl	80035f2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003fbc:	f7ff fbc4 	bl	8003748 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <prvAddNewTaskToReadyList+0xec>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	b163      	cbz	r3, 8003fe0 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d207      	bcs.n	8003fe0 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd4:	4b15      	ldr	r3, [pc, #84]	; (800402c <prvAddNewTaskToReadyList+0xf0>)
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <prvAddNewTaskToReadyList+0xec>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1d6      	bne.n	8003f9a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003ff2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003ff4:	bf98      	it	ls
 8003ff6:	6026      	strls	r6, [r4, #0]
 8003ff8:	e7cf      	b.n	8003f9a <prvAddNewTaskToReadyList+0x5e>
 8003ffa:	bf00      	nop
 8003ffc:	20005050 	.word	0x20005050
 8004000:	20004fb8 	.word	0x20004fb8
 8004004:	20004fc4 	.word	0x20004fc4
 8004008:	2000507c 	.word	0x2000507c
 800400c:	20005098 	.word	0x20005098
 8004010:	200050c4 	.word	0x200050c4
 8004014:	200050b0 	.word	0x200050b0
 8004018:	20004fbc 	.word	0x20004fbc
 800401c:	20004fc0 	.word	0x20004fc0
 8004020:	20005060 	.word	0x20005060
 8004024:	20005064 	.word	0x20005064
 8004028:	200050ac 	.word	0x200050ac
 800402c:	e000ed04 	.word	0xe000ed04
 8004030:	20005068 	.word	0x20005068

08004034 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004034:	4a06      	ldr	r2, [pc, #24]	; (8004050 <prvResetNextTaskUnblockTime+0x1c>)
 8004036:	6813      	ldr	r3, [r2, #0]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <prvResetNextTaskUnblockTime+0x20>)
 800403c:	b919      	cbnz	r1, 8004046 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800404a:	68d2      	ldr	r2, [r2, #12]
 800404c:	6852      	ldr	r2, [r2, #4]
 800404e:	e7f8      	b.n	8004042 <prvResetNextTaskUnblockTime+0xe>
 8004050:	20004fbc 	.word	0x20004fbc
 8004054:	20005090 	.word	0x20005090

08004058 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	4681      	mov	r9, r0
 800405e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004060:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004064:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004066:	3a01      	subs	r2, #1
 8004068:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800406c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004070:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004072:	f026 0607 	bic.w	r6, r6, #7
 8004076:	1e4b      	subs	r3, r1, #1
 8004078:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800407c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800407e:	7858      	ldrb	r0, [r3, #1]
 8004080:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004084:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004088:	b108      	cbz	r0, 800408e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800408a:	428b      	cmp	r3, r1
 800408c:	d1f7      	bne.n	800407e <prvInitialiseNewTask.isra.2+0x26>
 800408e:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004090:	2700      	movs	r7, #0
 8004092:	2d06      	cmp	r5, #6
 8004094:	bf28      	it	cs
 8004096:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004098:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800409a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800409c:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800409e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80040a2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040a4:	f7ff faa2 	bl	80035ec <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040ac:	f104 0018 	add.w	r0, r4, #24
 80040b0:	f7ff fa9c 	bl	80035ec <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80040b4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040b6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040ba:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040bc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040c0:	4652      	mov	r2, sl
 80040c2:	4649      	mov	r1, r9
 80040c4:	4630      	mov	r0, r6
 80040c6:	f7ff faf9 	bl	80036bc <pxPortInitialiseStack>
 80040ca:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80040cc:	f1b8 0f00 	cmp.w	r8, #0
 80040d0:	d001      	beq.n	80040d6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040d2:	f8c8 4000 	str.w	r4, [r8]
 80040d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080040da <prvDeleteTCB>:
	{
 80040da:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040dc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80040e0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040e2:	b93b      	cbnz	r3, 80040f4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80040e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80040e6:	f7ff fca1 	bl	8003a2c <vPortFree>
				vPortFree( pxTCB );
 80040ea:	4620      	mov	r0, r4
	}
 80040ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80040f0:	f7ff bc9c 	b.w	8003a2c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d0f9      	beq.n	80040ec <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d008      	beq.n	800410e <prvDeleteTCB+0x34>
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	e7fe      	b.n	800410c <prvDeleteTCB+0x32>
 800410e:	bd10      	pop	{r4, pc}

08004110 <prvIdleTask>:
{
 8004110:	b580      	push	{r7, lr}
				taskYIELD();
 8004112:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004170 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004116:	4f12      	ldr	r7, [pc, #72]	; (8004160 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004118:	4c12      	ldr	r4, [pc, #72]	; (8004164 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800411a:	4d13      	ldr	r5, [pc, #76]	; (8004168 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	b963      	cbnz	r3, 800413a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <prvIdleTask+0x5c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d9f8      	bls.n	800411a <prvIdleTask+0xa>
				taskYIELD();
 8004128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800412c:	f8c8 3000 	str.w	r3, [r8]
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	e7ee      	b.n	8004118 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800413a:	f7ff fae3 	bl	8003704 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004142:	1d30      	adds	r0, r6, #4
 8004144:	f7ff fa78 	bl	8003638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	3b01      	subs	r3, #1
 800414c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	3b01      	subs	r3, #1
 8004152:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004154:	f7ff faf8 	bl	8003748 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004158:	4630      	mov	r0, r6
 800415a:	f7ff ffbe 	bl	80040da <prvDeleteTCB>
 800415e:	e7dd      	b.n	800411c <prvIdleTask+0xc>
 8004160:	200050c4 	.word	0x200050c4
 8004164:	20005054 	.word	0x20005054
 8004168:	20005050 	.word	0x20005050
 800416c:	20004fc4 	.word	0x20004fc4
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004178:	4e1b      	ldr	r6, [pc, #108]	; (80041e8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800417a:	681d      	ldr	r5, [r3, #0]
{
 800417c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800417e:	6830      	ldr	r0, [r6, #0]
{
 8004180:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004182:	3004      	adds	r0, #4
 8004184:	f7ff fa58 	bl	8003638 <uxListRemove>
 8004188:	4633      	mov	r3, r6
 800418a:	b940      	cbnz	r0, 800419e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800418c:	2001      	movs	r0, #1
 800418e:	6831      	ldr	r1, [r6, #0]
 8004190:	4e16      	ldr	r6, [pc, #88]	; (80041ec <prvAddCurrentTaskToDelayedList+0x78>)
 8004192:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004194:	6832      	ldr	r2, [r6, #0]
 8004196:	4088      	lsls	r0, r1
 8004198:	ea22 0200 	bic.w	r2, r2, r0
 800419c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800419e:	1c62      	adds	r2, r4, #1
 80041a0:	d107      	bne.n	80041b2 <prvAddCurrentTaskToDelayedList+0x3e>
 80041a2:	b137      	cbz	r7, 80041b2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	4812      	ldr	r0, [pc, #72]	; (80041f0 <prvAddCurrentTaskToDelayedList+0x7c>)
 80041a8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ae:	f7ff ba20 	b.w	80035f2 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041b2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041b4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80041b6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041b8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80041ba:	d907      	bls.n	80041cc <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <prvAddCurrentTaskToDelayedList+0x80>)
 80041be:	6810      	ldr	r0, [r2, #0]
 80041c0:	6819      	ldr	r1, [r3, #0]
}
 80041c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c6:	3104      	adds	r1, #4
 80041c8:	f7ff ba1f 	b.w	800360a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <prvAddCurrentTaskToDelayedList+0x84>)
 80041ce:	6810      	ldr	r0, [r2, #0]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	3104      	adds	r1, #4
 80041d4:	f7ff fa19 	bl	800360a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <prvAddCurrentTaskToDelayedList+0x88>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80041de:	bf38      	it	cc
 80041e0:	601c      	strcc	r4, [r3, #0]
 80041e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e4:	200050d8 	.word	0x200050d8
 80041e8:	20004fb8 	.word	0x20004fb8
 80041ec:	20005064 	.word	0x20005064
 80041f0:	200050b0 	.word	0x200050b0
 80041f4:	20004fc0 	.word	0x20004fc0
 80041f8:	20004fbc 	.word	0x20004fbc
 80041fc:	20005090 	.word	0x20005090

08004200 <xTaskCreateStatic>:
	{
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004206:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8004208:	b945      	cbnz	r5, 800421c <xTaskCreateStatic+0x1c>
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	e7fe      	b.n	800421a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800421c:	b944      	cbnz	r4, 8004230 <xTaskCreateStatic+0x30>
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	e7fe      	b.n	800422e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004230:	2654      	movs	r6, #84	; 0x54
 8004232:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004234:	9e04      	ldr	r6, [sp, #16]
 8004236:	2e54      	cmp	r6, #84	; 0x54
 8004238:	d008      	beq.n	800424c <xTaskCreateStatic+0x4c>
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	e7fe      	b.n	800424a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800424c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800424e:	2502      	movs	r5, #2
 8004250:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004254:	ad05      	add	r5, sp, #20
 8004256:	9501      	str	r5, [sp, #4]
 8004258:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800425a:	9402      	str	r4, [sp, #8]
 800425c:	9500      	str	r5, [sp, #0]
 800425e:	f7ff fefb 	bl	8004058 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff fe6a 	bl	8003f3c <prvAddNewTaskToReadyList>
	}
 8004268:	9805      	ldr	r0, [sp, #20]
 800426a:	b006      	add	sp, #24
 800426c:	bd70      	pop	{r4, r5, r6, pc}

0800426e <xTaskCreate>:
	{
 800426e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004272:	4607      	mov	r7, r0
 8004274:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004276:	0090      	lsls	r0, r2, #2
	{
 8004278:	4688      	mov	r8, r1
 800427a:	4616      	mov	r6, r2
 800427c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427e:	f7ff fb47 	bl	8003910 <pvPortMalloc>
			if( pxStack != NULL )
 8004282:	4605      	mov	r5, r0
 8004284:	b1e8      	cbz	r0, 80042c2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004286:	2054      	movs	r0, #84	; 0x54
 8004288:	f7ff fb42 	bl	8003910 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800428c:	4604      	mov	r4, r0
 800428e:	b1a8      	cbz	r0, 80042bc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004290:	2300      	movs	r3, #0
 8004292:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8004298:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800429e:	9002      	str	r0, [sp, #8]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	4632      	mov	r2, r6
 80042a4:	464b      	mov	r3, r9
 80042a6:	4641      	mov	r1, r8
 80042a8:	4638      	mov	r0, r7
 80042aa:	f7ff fed5 	bl	8004058 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff fe44 	bl	8003f3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042b4:	2001      	movs	r0, #1
	}
 80042b6:	b005      	add	sp, #20
 80042b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80042bc:	4628      	mov	r0, r5
 80042be:	f7ff fbb5 	bl	8003a2c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80042c6:	e7f6      	b.n	80042b6 <xTaskCreate+0x48>

080042c8 <vTaskDelete>:
	{
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4604      	mov	r4, r0
 80042cc:	4d29      	ldr	r5, [pc, #164]	; (8004374 <vTaskDelete+0xac>)
		taskENTER_CRITICAL();
 80042ce:	f7ff fa19 	bl	8003704 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80042d2:	b904      	cbnz	r4, 80042d6 <vTaskDelete+0xe>
 80042d4:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042d6:	1d26      	adds	r6, r4, #4
 80042d8:	4630      	mov	r0, r6
 80042da:	f7ff f9ad 	bl	8003638 <uxListRemove>
 80042de:	b960      	cbnz	r0, 80042fa <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042e0:	2114      	movs	r1, #20
 80042e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80042e4:	4b24      	ldr	r3, [pc, #144]	; (8004378 <vTaskDelete+0xb0>)
 80042e6:	4341      	muls	r1, r0
 80042e8:	585b      	ldr	r3, [r3, r1]
 80042ea:	b933      	cbnz	r3, 80042fa <vTaskDelete+0x32>
 80042ec:	2201      	movs	r2, #1
 80042ee:	4923      	ldr	r1, [pc, #140]	; (800437c <vTaskDelete+0xb4>)
 80042f0:	4082      	lsls	r2, r0
 80042f2:	680b      	ldr	r3, [r1, #0]
 80042f4:	ea23 0302 	bic.w	r3, r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042fc:	b11b      	cbz	r3, 8004306 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042fe:	f104 0018 	add.w	r0, r4, #24
 8004302:	f7ff f999 	bl	8003638 <uxListRemove>
			uxTaskNumber++;
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <vTaskDelete+0xb8>)
 8004308:	6813      	ldr	r3, [r2, #0]
 800430a:	3301      	adds	r3, #1
 800430c:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	429c      	cmp	r4, r3
 8004312:	d11b      	bne.n	800434c <vTaskDelete+0x84>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004314:	4631      	mov	r1, r6
 8004316:	481b      	ldr	r0, [pc, #108]	; (8004384 <vTaskDelete+0xbc>)
 8004318:	f7ff f96b 	bl	80035f2 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800431c:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <vTaskDelete+0xc0>)
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8004324:	f7ff fa10 	bl	8003748 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <vTaskDelete+0xc4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	b303      	cbz	r3, 8004370 <vTaskDelete+0xa8>
			if( pxTCB == pxCurrentTCB )
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	429c      	cmp	r4, r3
 8004332:	d11d      	bne.n	8004370 <vTaskDelete+0xa8>
				configASSERT( uxSchedulerSuspended == 0 );
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <vTaskDelete+0xc8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	b193      	cbz	r3, 8004360 <vTaskDelete+0x98>
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	e7fe      	b.n	800434a <vTaskDelete+0x82>
				--uxCurrentNumberOfTasks;
 800434c:	4a11      	ldr	r2, [pc, #68]	; (8004394 <vTaskDelete+0xcc>)
				prvDeleteTCB( pxTCB );
 800434e:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8004350:	6813      	ldr	r3, [r2, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004356:	f7ff fec0 	bl	80040da <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800435a:	f7ff fe6b 	bl	8004034 <prvResetNextTaskUnblockTime>
 800435e:	e7e1      	b.n	8004324 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8004360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <vTaskDelete+0xd0>)
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	bf00      	nop
 8004374:	20004fb8 	.word	0x20004fb8
 8004378:	20004fc4 	.word	0x20004fc4
 800437c:	20005064 	.word	0x20005064
 8004380:	20005060 	.word	0x20005060
 8004384:	200050c4 	.word	0x200050c4
 8004388:	20005054 	.word	0x20005054
 800438c:	200050ac 	.word	0x200050ac
 8004390:	2000505c 	.word	0x2000505c
 8004394:	20005050 	.word	0x20005050
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <vTaskStartScheduler>:
{
 800439c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800439e:	2400      	movs	r4, #0
{
 80043a0:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043a2:	aa07      	add	r2, sp, #28
 80043a4:	a906      	add	r1, sp, #24
 80043a6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043a8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043aa:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043ac:	f001 f824 	bl	80053f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043b0:	9b05      	ldr	r3, [sp, #20]
 80043b2:	9400      	str	r4, [sp, #0]
 80043b4:	9302      	str	r3, [sp, #8]
 80043b6:	9b06      	ldr	r3, [sp, #24]
 80043b8:	9a07      	ldr	r2, [sp, #28]
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	490d      	ldr	r1, [pc, #52]	; (80043f4 <vTaskStartScheduler+0x58>)
 80043be:	4623      	mov	r3, r4
 80043c0:	480d      	ldr	r0, [pc, #52]	; (80043f8 <vTaskStartScheduler+0x5c>)
 80043c2:	f7ff ff1d 	bl	8004200 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80043c6:	b190      	cbz	r0, 80043ee <vTaskStartScheduler+0x52>
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <vTaskStartScheduler+0x60>)
 80043de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043e0:	2201      	movs	r2, #1
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <vTaskStartScheduler+0x64>)
 80043e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <vTaskStartScheduler+0x68>)
 80043e8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80043ea:	f7ff fa13 	bl	8003814 <xPortStartScheduler>
}
 80043ee:	b008      	add	sp, #32
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	bf00      	nop
 80043f4:	08007412 	.word	0x08007412
 80043f8:	08004111 	.word	0x08004111
 80043fc:	20005090 	.word	0x20005090
 8004400:	200050ac 	.word	0x200050ac
 8004404:	200050d8 	.word	0x200050d8

08004408 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004408:	4a02      	ldr	r2, [pc, #8]	; (8004414 <vTaskSuspendAll+0xc>)
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000505c 	.word	0x2000505c

08004418 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004418:	4b01      	ldr	r3, [pc, #4]	; (8004420 <xTaskGetTickCount+0x8>)
 800441a:	6818      	ldr	r0, [r3, #0]
}
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200050d8 	.word	0x200050d8

08004424 <xTaskIncrementTick>:
{
 8004424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004428:	4b3c      	ldr	r3, [pc, #240]	; (800451c <xTaskIncrementTick+0xf8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d153      	bne.n	80044d8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004430:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <xTaskIncrementTick+0xfc>)
 8004432:	681c      	ldr	r4, [r3, #0]
 8004434:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004436:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004438:	b9bc      	cbnz	r4, 800446a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800443a:	4b3a      	ldr	r3, [pc, #232]	; (8004524 <xTaskIncrementTick+0x100>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	b142      	cbz	r2, 8004454 <xTaskIncrementTick+0x30>
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	e7fe      	b.n	8004452 <xTaskIncrementTick+0x2e>
 8004454:	4a34      	ldr	r2, [pc, #208]	; (8004528 <xTaskIncrementTick+0x104>)
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	6810      	ldr	r0, [r2, #0]
 800445a:	6018      	str	r0, [r3, #0]
 800445c:	6011      	str	r1, [r2, #0]
 800445e:	4a33      	ldr	r2, [pc, #204]	; (800452c <xTaskIncrementTick+0x108>)
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	f7ff fde5 	bl	8004034 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800446a:	4d31      	ldr	r5, [pc, #196]	; (8004530 <xTaskIncrementTick+0x10c>)
 800446c:	f04f 0b00 	mov.w	fp, #0
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	4f30      	ldr	r7, [pc, #192]	; (8004534 <xTaskIncrementTick+0x110>)
 8004474:	429c      	cmp	r4, r3
 8004476:	d33e      	bcc.n	80044f6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004478:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004524 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800447c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004544 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004480:	f8d8 2000 	ldr.w	r2, [r8]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	bb72      	cbnz	r2, 80044e6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004488:	f04f 32ff 	mov.w	r2, #4294967295
 800448c:	602a      	str	r2, [r5, #0]
					break;
 800448e:	e032      	b.n	80044f6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004490:	f106 0a04 	add.w	sl, r6, #4
 8004494:	4650      	mov	r0, sl
 8004496:	f7ff f8cf 	bl	8003638 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800449a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800449c:	b119      	cbz	r1, 80044a6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800449e:	f106 0018 	add.w	r0, r6, #24
 80044a2:	f7ff f8c9 	bl	8003638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044a6:	2201      	movs	r2, #1
 80044a8:	f04f 0e14 	mov.w	lr, #20
 80044ac:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80044ae:	f8d9 3000 	ldr.w	r3, [r9]
 80044b2:	fa02 f100 	lsl.w	r1, r2, r0
 80044b6:	4319      	orrs	r1, r3
 80044b8:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <xTaskIncrementTick+0x114>)
 80044ba:	f8c9 1000 	str.w	r1, [r9]
 80044be:	fb0e 3000 	mla	r0, lr, r0, r3
 80044c2:	4651      	mov	r1, sl
 80044c4:	f7ff f895 	bl	80035f2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c8:	6838      	ldr	r0, [r7, #0]
 80044ca:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80044cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80044ce:	4291      	cmp	r1, r2
 80044d0:	bf28      	it	cs
 80044d2:	f04f 0b01 	movcs.w	fp, #1
 80044d6:	e7d3      	b.n	8004480 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80044d8:	4a18      	ldr	r2, [pc, #96]	; (800453c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80044da:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	e011      	b.n	800450a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044e6:	f8d8 2000 	ldr.w	r2, [r8]
 80044ea:	68d2      	ldr	r2, [r2, #12]
 80044ec:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044ee:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80044f0:	428c      	cmp	r4, r1
 80044f2:	d2cd      	bcs.n	8004490 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80044f4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <xTaskIncrementTick+0x114>)
 80044fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044fc:	2214      	movs	r2, #20
 80044fe:	434a      	muls	r2, r1
 8004500:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004502:	2a02      	cmp	r2, #2
 8004504:	bf28      	it	cs
 8004506:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800450a:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <xTaskIncrementTick+0x11c>)
 800450c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800450e:	2a00      	cmp	r2, #0
 8004510:	bf18      	it	ne
 8004512:	f04f 0b01 	movne.w	fp, #1
}
 8004516:	4658      	mov	r0, fp
 8004518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451c:	2000505c 	.word	0x2000505c
 8004520:	200050d8 	.word	0x200050d8
 8004524:	20004fbc 	.word	0x20004fbc
 8004528:	20004fc0 	.word	0x20004fc0
 800452c:	20005094 	.word	0x20005094
 8004530:	20005090 	.word	0x20005090
 8004534:	20004fb8 	.word	0x20004fb8
 8004538:	20004fc4 	.word	0x20004fc4
 800453c:	20005058 	.word	0x20005058
 8004540:	200050dc 	.word	0x200050dc
 8004544:	20005064 	.word	0x20005064

08004548 <xTaskResumeAll>:
{
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800454c:	4c31      	ldr	r4, [pc, #196]	; (8004614 <xTaskResumeAll+0xcc>)
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	b943      	cbnz	r3, 8004564 <xTaskResumeAll+0x1c>
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	e7fe      	b.n	8004562 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004564:	f7ff f8ce 	bl	8003704 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800456e:	6824      	ldr	r4, [r4, #0]
 8004570:	b12c      	cbz	r4, 800457e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004572:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004574:	f7ff f8e8 	bl	8003748 <vPortExitCritical>
}
 8004578:	4620      	mov	r0, r4
 800457a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800457e:	4b26      	ldr	r3, [pc, #152]	; (8004618 <xTaskResumeAll+0xd0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f5      	beq.n	8004572 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004586:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8004630 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800458a:	4f24      	ldr	r7, [pc, #144]	; (800461c <xTaskResumeAll+0xd4>)
 800458c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004634 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004590:	f8d9 3000 	ldr.w	r3, [r9]
 8004594:	b9e3      	cbnz	r3, 80045d0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8004596:	b10c      	cbz	r4, 800459c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004598:	f7ff fd4c 	bl	8004034 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800459c:	4d20      	ldr	r5, [pc, #128]	; (8004620 <xTaskResumeAll+0xd8>)
 800459e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045a0:	b144      	cbz	r4, 80045b4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80045a2:	2701      	movs	r7, #1
 80045a4:	4e1f      	ldr	r6, [pc, #124]	; (8004624 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80045a6:	f7ff ff3d 	bl	8004424 <xTaskIncrementTick>
 80045aa:	b100      	cbz	r0, 80045ae <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80045ac:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045ae:	3c01      	subs	r4, #1
 80045b0:	d1f9      	bne.n	80045a6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80045b2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <xTaskResumeAll+0xdc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0da      	beq.n	8004572 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <xTaskResumeAll+0xe0>)
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80045cc:	2401      	movs	r4, #1
 80045ce:	e7d1      	b.n	8004574 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045d0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80045d4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045d6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045da:	f104 0018 	add.w	r0, r4, #24
 80045de:	f7ff f82b 	bl	8003638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7ff f828 	bl	8003638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045e8:	2014      	movs	r0, #20
 80045ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	fa05 f302 	lsl.w	r3, r5, r2
 80045f2:	430b      	orrs	r3, r1
 80045f4:	fb00 8002 	mla	r0, r0, r2, r8
 80045f8:	4631      	mov	r1, r6
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	f7fe fff9 	bl	80035f2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <xTaskResumeAll+0xe4>)
 8004602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800460a:	bf24      	itt	cs
 800460c:	4b05      	ldrcs	r3, [pc, #20]	; (8004624 <xTaskResumeAll+0xdc>)
 800460e:	601d      	strcs	r5, [r3, #0]
 8004610:	e7be      	b.n	8004590 <xTaskResumeAll+0x48>
 8004612:	bf00      	nop
 8004614:	2000505c 	.word	0x2000505c
 8004618:	20005050 	.word	0x20005050
 800461c:	20005064 	.word	0x20005064
 8004620:	20005058 	.word	0x20005058
 8004624:	200050dc 	.word	0x200050dc
 8004628:	e000ed04 	.word	0xe000ed04
 800462c:	20004fb8 	.word	0x20004fb8
 8004630:	20005098 	.word	0x20005098
 8004634:	20004fc4 	.word	0x20004fc4

08004638 <vTaskDelay>:
	{
 8004638:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800463a:	b940      	cbnz	r0, 800464e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800463c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <vTaskDelay+0x40>)
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <vTaskDelay+0x44>)
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	b141      	cbz	r1, 8004666 <vTaskDelay+0x2e>
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	e7fe      	b.n	8004664 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004666:	f7ff fecf 	bl	8004408 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800466a:	f7ff fd83 	bl	8004174 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800466e:	f7ff ff6b 	bl	8004548 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004672:	2800      	cmp	r0, #0
 8004674:	d0e2      	beq.n	800463c <vTaskDelay+0x4>
 8004676:	bd08      	pop	{r3, pc}
 8004678:	e000ed04 	.word	0xe000ed04
 800467c:	2000505c 	.word	0x2000505c

08004680 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <vTaskSwitchContext+0x60>)
{
 8004682:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <vTaskSwitchContext+0x64>)
 8004688:	b112      	cbz	r2, 8004690 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800468a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004690:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <vTaskSwitchContext+0x68>)
 8004694:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	2214      	movs	r2, #20
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f1c3 031f 	rsb	r3, r3, #31
 80046a2:	435a      	muls	r2, r3
 80046a4:	4911      	ldr	r1, [pc, #68]	; (80046ec <vTaskSwitchContext+0x6c>)
 80046a6:	588c      	ldr	r4, [r1, r2]
 80046a8:	1888      	adds	r0, r1, r2
 80046aa:	b944      	cbnz	r4, 80046be <vTaskSwitchContext+0x3e>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	e7fe      	b.n	80046bc <vTaskSwitchContext+0x3c>
 80046be:	6844      	ldr	r4, [r0, #4]
 80046c0:	3208      	adds	r2, #8
 80046c2:	6864      	ldr	r4, [r4, #4]
 80046c4:	440a      	add	r2, r1
 80046c6:	4294      	cmp	r4, r2
 80046c8:	bf08      	it	eq
 80046ca:	6862      	ldreq	r2, [r4, #4]
 80046cc:	6044      	str	r4, [r0, #4]
 80046ce:	bf08      	it	eq
 80046d0:	6042      	streq	r2, [r0, #4]
 80046d2:	2214      	movs	r2, #20
 80046d4:	fb02 1303 	mla	r3, r2, r3, r1
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <vTaskSwitchContext+0x70>)
 80046de:	e7d5      	b.n	800468c <vTaskSwitchContext+0xc>
 80046e0:	2000505c 	.word	0x2000505c
 80046e4:	200050dc 	.word	0x200050dc
 80046e8:	20005064 	.word	0x20005064
 80046ec:	20004fc4 	.word	0x20004fc4
 80046f0:	20004fb8 	.word	0x20004fb8

080046f4 <vTaskPlaceOnEventList>:
{
 80046f4:	b510      	push	{r4, lr}
 80046f6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80046f8:	b940      	cbnz	r0, 800470c <vTaskPlaceOnEventList+0x18>
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	e7fe      	b.n	800470a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <vTaskPlaceOnEventList+0x30>)
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	3118      	adds	r1, #24
 8004712:	f7fe ff7a 	bl	800360a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004716:	4620      	mov	r0, r4
}
 8004718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800471c:	2101      	movs	r1, #1
 800471e:	f7ff bd29 	b.w	8004174 <prvAddCurrentTaskToDelayedList>
 8004722:	bf00      	nop
 8004724:	20004fb8 	.word	0x20004fb8

08004728 <xTaskRemoveFromEventList>:
{
 8004728:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800472a:	68c3      	ldr	r3, [r0, #12]
 800472c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800472e:	b944      	cbnz	r4, 8004742 <xTaskRemoveFromEventList+0x1a>
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	e7fe      	b.n	8004740 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004742:	f104 0518 	add.w	r5, r4, #24
 8004746:	4628      	mov	r0, r5
 8004748:	f7fe ff76 	bl	8003638 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <xTaskRemoveFromEventList+0x6c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	b9e3      	cbnz	r3, 800478c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004752:	1d25      	adds	r5, r4, #4
 8004754:	4628      	mov	r0, r5
 8004756:	f7fe ff6f 	bl	8003638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800475a:	2301      	movs	r3, #1
 800475c:	490e      	ldr	r1, [pc, #56]	; (8004798 <xTaskRemoveFromEventList+0x70>)
 800475e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004760:	6808      	ldr	r0, [r1, #0]
 8004762:	4093      	lsls	r3, r2
 8004764:	4303      	orrs	r3, r0
 8004766:	2014      	movs	r0, #20
 8004768:	600b      	str	r3, [r1, #0]
 800476a:	4629      	mov	r1, r5
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <xTaskRemoveFromEventList+0x74>)
 800476e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004772:	f7fe ff3e 	bl	80035f2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <xTaskRemoveFromEventList+0x78>)
 8004778:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004780:	bf85      	ittet	hi
 8004782:	2001      	movhi	r0, #1
 8004784:	4b07      	ldrhi	r3, [pc, #28]	; (80047a4 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8004786:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004788:	6018      	strhi	r0, [r3, #0]
}
 800478a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800478c:	4629      	mov	r1, r5
 800478e:	4806      	ldr	r0, [pc, #24]	; (80047a8 <xTaskRemoveFromEventList+0x80>)
 8004790:	e7ef      	b.n	8004772 <xTaskRemoveFromEventList+0x4a>
 8004792:	bf00      	nop
 8004794:	2000505c 	.word	0x2000505c
 8004798:	20005064 	.word	0x20005064
 800479c:	20004fc4 	.word	0x20004fc4
 80047a0:	20004fb8 	.word	0x20004fb8
 80047a4:	200050dc 	.word	0x200050dc
 80047a8:	20005098 	.word	0x20005098

080047ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <vTaskInternalSetTimeOutState+0x10>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047b2:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <vTaskInternalSetTimeOutState+0x14>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6043      	str	r3, [r0, #4]
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20005094 	.word	0x20005094
 80047c0:	200050d8 	.word	0x200050d8

080047c4 <xTaskCheckForTimeOut>:
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80047c8:	4605      	mov	r5, r0
 80047ca:	b940      	cbnz	r0, 80047de <xTaskCheckForTimeOut+0x1a>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	e7fe      	b.n	80047dc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80047de:	b941      	cbnz	r1, 80047f2 <xTaskCheckForTimeOut+0x2e>
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	e7fe      	b.n	80047f0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80047f2:	f7fe ff87 	bl	8003704 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047f8:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80047fa:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	1c58      	adds	r0, r3, #1
 8004800:	d00e      	beq.n	8004820 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004802:	480d      	ldr	r0, [pc, #52]	; (8004838 <xTaskCheckForTimeOut+0x74>)
 8004804:	682e      	ldr	r6, [r5, #0]
 8004806:	6800      	ldr	r0, [r0, #0]
 8004808:	4286      	cmp	r6, r0
 800480a:	d001      	beq.n	8004810 <xTaskCheckForTimeOut+0x4c>
 800480c:	428a      	cmp	r2, r1
 800480e:	d20e      	bcs.n	800482e <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004810:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004812:	429a      	cmp	r2, r3
 8004814:	d209      	bcs.n	800482a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800481a:	4628      	mov	r0, r5
 800481c:	f7ff ffc6 	bl	80047ac <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004820:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004822:	f7fe ff91 	bl	8003748 <vPortExitCritical>
}
 8004826:	4620      	mov	r0, r4
 8004828:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800482e:	2401      	movs	r4, #1
 8004830:	e7f7      	b.n	8004822 <xTaskCheckForTimeOut+0x5e>
 8004832:	bf00      	nop
 8004834:	200050d8 	.word	0x200050d8
 8004838:	20005094 	.word	0x20005094

0800483c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800483c:	2201      	movs	r2, #1
 800483e:	4b01      	ldr	r3, [pc, #4]	; (8004844 <vTaskMissedYield+0x8>)
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	4770      	bx	lr
 8004844:	200050dc 	.word	0x200050dc

08004848 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <xTaskGetSchedulerState+0x18>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	b133      	cbz	r3, 800485c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <xTaskGetSchedulerState+0x1c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004854:	bf0c      	ite	eq
 8004856:	2002      	moveq	r0, #2
 8004858:	2000      	movne	r0, #0
 800485a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800485c:	2001      	movs	r0, #1
	}
 800485e:	4770      	bx	lr
 8004860:	200050ac 	.word	0x200050ac
 8004864:	2000505c 	.word	0x2000505c

08004868 <xTaskPriorityInherit>:
	{
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800486c:	4604      	mov	r4, r0
 800486e:	2800      	cmp	r0, #0
 8004870:	d042      	beq.n	80048f8 <xTaskPriorityInherit+0x90>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004872:	4a24      	ldr	r2, [pc, #144]	; (8004904 <xTaskPriorityInherit+0x9c>)
 8004874:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004876:	6811      	ldr	r1, [r2, #0]
 8004878:	4617      	mov	r7, r2
 800487a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800487c:	428b      	cmp	r3, r1
 800487e:	d232      	bcs.n	80048e6 <xTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004880:	2614      	movs	r6, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004882:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004884:	4d20      	ldr	r5, [pc, #128]	; (8004908 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004886:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004888:	bfa8      	it	ge
 800488a:	683a      	ldrge	r2, [r7, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800488c:	fb06 5303 	mla	r3, r6, r3, r5
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004890:	bfa2      	ittt	ge
 8004892:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8004894:	f1c2 0207 	rsbge	r2, r2, #7
 8004898:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800489a:	6942      	ldr	r2, [r0, #20]
 800489c:	429a      	cmp	r2, r3
 800489e:	d12d      	bne.n	80048fc <xTaskPriorityInherit+0x94>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048a0:	f100 0804 	add.w	r8, r0, #4
 80048a4:	4640      	mov	r0, r8
 80048a6:	f7fe fec7 	bl	8003638 <uxListRemove>
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <xTaskPriorityInherit+0xa4>)
 80048ac:	b948      	cbnz	r0, 80048c2 <xTaskPriorityInherit+0x5a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80048ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80048b0:	4346      	muls	r6, r0
 80048b2:	59aa      	ldr	r2, [r5, r6]
 80048b4:	b92a      	cbnz	r2, 80048c2 <xTaskPriorityInherit+0x5a>
 80048b6:	2101      	movs	r1, #1
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4081      	lsls	r1, r0
 80048bc:	ea22 0201 	bic.w	r2, r2, r1
 80048c0:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048c2:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80048c4:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048c8:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80048ca:	2401      	movs	r4, #1
 80048cc:	fa04 f002 	lsl.w	r0, r4, r2
 80048d0:	4308      	orrs	r0, r1
 80048d2:	6018      	str	r0, [r3, #0]
 80048d4:	2014      	movs	r0, #20
 80048d6:	4641      	mov	r1, r8
 80048d8:	fb00 5002 	mla	r0, r0, r2, r5
 80048dc:	f7fe fe89 	bl	80035f2 <vListInsertEnd>
				xReturn = pdTRUE;
 80048e0:	2001      	movs	r0, #1
	}
 80048e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80048ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80048ec:	42a0      	cmp	r0, r4
 80048ee:	bf2c      	ite	cs
 80048f0:	2000      	movcs	r0, #0
 80048f2:	2001      	movcc	r0, #1
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004902:	e7ed      	b.n	80048e0 <xTaskPriorityInherit+0x78>
 8004904:	20004fb8 	.word	0x20004fb8
 8004908:	20004fc4 	.word	0x20004fc4
 800490c:	20005064 	.word	0x20005064

08004910 <xTaskPriorityDisinherit>:
	{
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004912:	4604      	mov	r4, r0
 8004914:	b908      	cbnz	r0, 800491a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004916:	2000      	movs	r0, #0
 8004918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800491a:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <xTaskPriorityDisinherit+0x94>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4298      	cmp	r0, r3
 8004920:	d008      	beq.n	8004934 <xTaskPriorityDisinherit+0x24>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	e7fe      	b.n	8004932 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004934:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004936:	b943      	cbnz	r3, 800494a <xTaskPriorityDisinherit+0x3a>
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	e7fe      	b.n	8004948 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800494a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800494c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800494e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004950:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004952:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004954:	d0df      	beq.n	8004916 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1dd      	bne.n	8004916 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800495a:	1d05      	adds	r5, r0, #4
 800495c:	4628      	mov	r0, r5
 800495e:	f7fe fe6b 	bl	8003638 <uxListRemove>
 8004962:	4e11      	ldr	r6, [pc, #68]	; (80049a8 <xTaskPriorityDisinherit+0x98>)
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <xTaskPriorityDisinherit+0x9c>)
 8004966:	b950      	cbnz	r0, 800497e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004968:	2114      	movs	r1, #20
 800496a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800496c:	4379      	muls	r1, r7
 800496e:	5873      	ldr	r3, [r6, r1]
 8004970:	b92b      	cbnz	r3, 800497e <xTaskPriorityDisinherit+0x6e>
 8004972:	2001      	movs	r0, #1
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	40b8      	lsls	r0, r7
 8004978:	ea23 0300 	bic.w	r3, r3, r0
 800497c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800497e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004980:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004984:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004986:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004988:	2401      	movs	r4, #1
 800498a:	6811      	ldr	r1, [r2, #0]
 800498c:	fa04 f003 	lsl.w	r0, r4, r3
 8004990:	4308      	orrs	r0, r1
 8004992:	6010      	str	r0, [r2, #0]
 8004994:	2014      	movs	r0, #20
 8004996:	4629      	mov	r1, r5
 8004998:	fb00 6003 	mla	r0, r0, r3, r6
 800499c:	f7fe fe29 	bl	80035f2 <vListInsertEnd>
					xReturn = pdTRUE;
 80049a0:	4620      	mov	r0, r4
	}
 80049a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a4:	20004fb8 	.word	0x20004fb8
 80049a8:	20004fc4 	.word	0x20004fc4
 80049ac:	20005064 	.word	0x20005064

080049b0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80049b2:	4604      	mov	r4, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d04b      	beq.n	8004a50 <vTaskPriorityDisinheritAfterTimeout+0xa0>
			configASSERT( pxTCB->uxMutexesHeld );
 80049b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80049ba:	b942      	cbnz	r2, 80049ce <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	e7fe      	b.n	80049cc <vTaskPriorityDisinheritAfterTimeout+0x1c>
 80049ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80049d0:	4299      	cmp	r1, r3
 80049d2:	bf38      	it	cc
 80049d4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80049d8:	428b      	cmp	r3, r1
 80049da:	d039      	beq.n	8004a50 <vTaskPriorityDisinheritAfterTimeout+0xa0>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049dc:	2a01      	cmp	r2, #1
 80049de:	d137      	bne.n	8004a50 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					configASSERT( pxTCB != pxCurrentTCB );
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	4290      	cmp	r0, r2
 80049e6:	d108      	bne.n	80049fa <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	e7fe      	b.n	80049f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049fa:	2614      	movs	r6, #20
 80049fc:	4d16      	ldr	r5, [pc, #88]	; (8004a58 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049fe:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a00:	fb06 5303 	mla	r3, r6, r3, r5
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a04:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a06:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a08:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0a:	bfa4      	itt	ge
 8004a0c:	f1c1 0107 	rsbge	r1, r1, #7
 8004a10:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d11c      	bne.n	8004a50 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a16:	1d07      	adds	r7, r0, #4
 8004a18:	4638      	mov	r0, r7
 8004a1a:	f7fe fe0d 	bl	8003638 <uxListRemove>
 8004a1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a20:	4c0e      	ldr	r4, [pc, #56]	; (8004a5c <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8004a22:	b940      	cbnz	r0, 8004a36 <vTaskPriorityDisinheritAfterTimeout+0x86>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a24:	4356      	muls	r6, r2
 8004a26:	59ab      	ldr	r3, [r5, r6]
 8004a28:	b92b      	cbnz	r3, 8004a36 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	4091      	lsls	r1, r2
 8004a30:	ea23 0301 	bic.w	r3, r3, r1
 8004a34:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8004a36:	2301      	movs	r3, #1
 8004a38:	2014      	movs	r0, #20
 8004a3a:	6821      	ldr	r1, [r4, #0]
 8004a3c:	4093      	lsls	r3, r2
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	4639      	mov	r1, r7
 8004a44:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8004a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8004a4c:	f7fe bdd1 	b.w	80035f2 <vListInsertEnd>
 8004a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20004fb8 	.word	0x20004fb8
 8004a58:	20004fc4 	.word	0x20004fc4
 8004a5c:	20005064 	.word	0x20005064

08004a60 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <pvTaskIncrementMutexHeldCount+0x14>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	b11a      	cbz	r2, 8004a6e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a66:	6819      	ldr	r1, [r3, #0]
 8004a68:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8004a6a:	3201      	adds	r2, #1
 8004a6c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8004a6e:	6818      	ldr	r0, [r3, #0]
	}
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20004fb8 	.word	0x20004fb8

08004a78 <xAligningTask>:
#include "structures.h"

extern xSemaphoreHandle xNewPressureSemaphore;


void xAligningTask(void *arguments){
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float impUpCoeff = 2.0;
	float impDownCoeff = -2.0;
	float impCoeff = 0.0;

	xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8004a7c:	4c68      	ldr	r4, [pc, #416]	; (8004c20 <xAligningTask+0x1a8>)
void xAligningTask(void *arguments){
 8004a7e:	b087      	sub	sp, #28
	xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8004a80:	f04f 31ff 	mov.w	r1, #4294967295
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	f7ff f999 	bl	8003dbc <xQueueSemaphoreTake>
	float impDownCoeff = -2.0;
 8004a8a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8004a8e:	9304      	str	r3, [sp, #16]
	float impUpCoeff = 2.0;
 8004a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	uint8_t currentTry = 0;
 8004a94:	2700      	movs	r7, #0
 8004a96:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8004c38 <xAligningTask+0x1c0>

			if (pressIsLower){
				impTime = (int32_t)(impUpCoeff * (float) deltaPressure);
				if (impTime <= 0) impTime = 1000;
				else if (impTime > 5000) impTime = 5000;
				VALVE_UP_ON;
 8004a9a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8004c3c <xAligningTask+0x1c4>
	float impUpCoeff = 2.0;
 8004a9e:	9303      	str	r3, [sp, #12]
 8004aa0:	9405      	str	r4, [sp, #20]
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8004aa2:	9b05      	ldr	r3, [sp, #20]
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	f7ff f987 	bl	8003dbc <xQueueSemaphoreTake>
		if (xStatus == pdPASS){
 8004aae:	2801      	cmp	r0, #1
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8004ab0:	4604      	mov	r4, r0
		if (xStatus == pdPASS){
 8004ab2:	d1f6      	bne.n	8004aa2 <xAligningTask+0x2a>
			if (currentTry > MAX_ALIGNING_TRIES){
 8004ab4:	2f08      	cmp	r7, #8
 8004ab6:	4e5b      	ldr	r6, [pc, #364]	; (8004c24 <xAligningTask+0x1ac>)
 8004ab8:	d11f      	bne.n	8004afa <xAligningTask+0x82>
				vTaskDelay(testingParams.delayAfterAligningMs);
 8004aba:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8004abe:	f7ff fdbb 	bl	8004638 <vTaskDelay>
				testingParams.testStartPressure = controllerState.sensorData;
 8004ac2:	8873      	ldrh	r3, [r6, #2]
				testingParams.timePassed = 0;
 8004ac4:	2200      	movs	r2, #0
				testingParams.testStartPressure = controllerState.sensorData;
 8004ac6:	f8a9 300a 	strh.w	r3, [r9, #10]
				testingParams.timePassed = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e9c9 2304 	strd	r2, r3, [r9, #16]
				controllerState.state = TESTING;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	72b3      	strb	r3, [r6, #10]
				all_led_off();
 8004ad4:	f001 fa32 	bl	8005f3c <all_led_off>
				xTaskCreate(xTestingTask, "testing", 200, NULL, 1, &testingTreadHandle);
 8004ad8:	4b53      	ldr	r3, [pc, #332]	; (8004c28 <xAligningTask+0x1b0>)
 8004ada:	9400      	str	r4, [sp, #0]
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	22c8      	movs	r2, #200	; 0xc8
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4952      	ldr	r1, [pc, #328]	; (8004c2c <xAligningTask+0x1b4>)
 8004ae4:	4852      	ldr	r0, [pc, #328]	; (8004c30 <xAligningTask+0x1b8>)
 8004ae6:	f7ff fbc2 	bl	800426e <xTaskCreate>
				aligninThreadHandle = NULL;
 8004aea:	2000      	movs	r0, #0
 8004aec:	4b51      	ldr	r3, [pc, #324]	; (8004c34 <xAligningTask+0x1bc>)
 8004aee:	6018      	str	r0, [r3, #0]
				vTaskDelete(NULL);
 8004af0:	f7ff fbea 	bl	80042c8 <vTaskDelete>
				continue;
 8004af4:	e7d5      	b.n	8004aa2 <xAligningTask+0x2a>
				currentTry = MAX_ALIGNING_TRIES + 1;
 8004af6:	2708      	movs	r7, #8
 8004af8:	e7d3      	b.n	8004aa2 <xAligningTask+0x2a>
			startPressure = controllerState.sensorData;
 8004afa:	8875      	ldrh	r5, [r6, #2]
			deltaPressure = testingParams.testPressure - startPressure;
 8004afc:	f8b9 3000 	ldrh.w	r3, [r9]
 8004b00:	1b58      	subs	r0, r3, r5
			deltaPressure = abs(deltaPressure);
 8004b02:	b200      	sxth	r0, r0
 8004b04:	2800      	cmp	r0, #0
 8004b06:	bfb8      	it	lt
 8004b08:	4240      	neglt	r0, r0
 8004b0a:	b200      	sxth	r0, r0
			if (deltaPressure > PRESSURE_ACCURACY_THRESHOLD){
 8004b0c:	2819      	cmp	r0, #25
 8004b0e:	ddf2      	ble.n	8004af6 <xAligningTask+0x7e>
				if (testingParams.testPressure > startPressure){
 8004b10:	b22a      	sxth	r2, r5
 8004b12:	4293      	cmp	r3, r2
 8004b14:	dc78      	bgt.n	8004c08 <xAligningTask+0x190>
				controllerState.valveIsOpen = 1;
			}
			else{
				impTime = (int32_t)(impDownCoeff * (float) deltaPressure);
 8004b16:	f7fc f843 	bl	8000ba0 <__aeabi_i2f>
 8004b1a:	9904      	ldr	r1, [sp, #16]
 8004b1c:	f7fc f894 	bl	8000c48 <__aeabi_fmul>
 8004b20:	f7fc fa58 	bl	8000fd4 <__aeabi_f2iz>
				if (impTime <= 0) impTime = 1000;
 8004b24:	1e04      	subs	r4, r0, #0
 8004b26:	dc59      	bgt.n	8004bdc <xAligningTask+0x164>
 8004b28:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004b2c:	e05b      	b.n	8004be6 <xAligningTask+0x16e>
 8004b2e:	f241 3088 	movw	r0, #5000	; 0x1388
 8004b32:	4284      	cmp	r4, r0
 8004b34:	bfa8      	it	ge
 8004b36:	4604      	movge	r4, r0
				controllerState.valveIsOpen = 1;
 8004b38:	f04f 0801 	mov.w	r8, #1
				VALVE_UP_ON;
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4650      	mov	r0, sl
 8004b42:	f7fd f9a1 	bl	8001e88 <HAL_GPIO_WritePin>
				controllerState.valveIsOpen = 1;
 8004b46:	f886 8014 	strb.w	r8, [r6, #20]
				else if (impTime > 5000) impTime = 5000;
				VALVE_DOWN_ON;
				controllerState.valveIsOpen = -1;
			}

			curImpCounter = xTaskGetTickCount();
 8004b4a:	f7ff fc65 	bl	8004418 <xTaskGetTickCount>
 8004b4e:	4683      	mov	fp, r0

			while(1){
				vTaskDelay(10);
 8004b50:	200a      	movs	r0, #10
 8004b52:	f7ff fd71 	bl	8004638 <vTaskDelay>
				dImpCounter = xTaskGetTickCount() -  curImpCounter;
 8004b56:	f7ff fc5f 	bl	8004418 <xTaskGetTickCount>
 8004b5a:	eba0 000b 	sub.w	r0, r0, fp
				if (dImpCounter > impTime){
 8004b5e:	4284      	cmp	r4, r0
 8004b60:	daf6      	bge.n	8004b50 <xAligningTask+0xd8>
					controllerState.valveIsOpen = 0;
 8004b62:	f04f 0b00 	mov.w	fp, #0
					VALVE_UP_OFF;
 8004b66:	2102      	movs	r1, #2
 8004b68:	465a      	mov	r2, fp
 8004b6a:	4650      	mov	r0, sl
					controllerState.valveIsOpen = 0;
 8004b6c:	f886 b014 	strb.w	fp, [r6, #20]
					VALVE_UP_OFF;
 8004b70:	f7fd f98a 	bl	8001e88 <HAL_GPIO_WritePin>
					VALVE_DOWN_OFF;
 8004b74:	465a      	mov	r2, fp
 8004b76:	2104      	movs	r1, #4
 8004b78:	4650      	mov	r0, sl
 8004b7a:	f7fd f985 	bl	8001e88 <HAL_GPIO_WritePin>
					break;
				}
			}

			vTaskDelay(3000);
 8004b7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004b82:	f7ff fd59 	bl	8004638 <vTaskDelay>

			deltaPressure = controllerState.sensorData - startPressure;
 8004b86:	8873      	ldrh	r3, [r6, #2]
			impCoeff = (float)impTime / (float) deltaPressure;
 8004b88:	4620      	mov	r0, r4
			deltaPressure = controllerState.sensorData - startPressure;
 8004b8a:	1b5d      	subs	r5, r3, r5
			impCoeff = (float)impTime / (float) deltaPressure;
 8004b8c:	f7fc f808 	bl	8000ba0 <__aeabi_i2f>
			deltaPressure = controllerState.sensorData - startPressure;
 8004b90:	b22d      	sxth	r5, r5
			impCoeff = (float)impTime / (float) deltaPressure;
 8004b92:	4683      	mov	fp, r0
 8004b94:	4628      	mov	r0, r5
 8004b96:	f7fc f803 	bl	8000ba0 <__aeabi_i2f>
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4658      	mov	r0, fp
 8004b9e:	f7fc f907 	bl	8000db0 <__aeabi_fdiv>
			if (pressIsLower){
				if (impCoeff >= 0.0) impUpCoeff = impCoeff;
 8004ba2:	2100      	movs	r1, #0
			impCoeff = (float)impTime / (float) deltaPressure;
 8004ba4:	4683      	mov	fp, r0
			if (pressIsLower){
 8004ba6:	f1b8 0f00 	cmp.w	r8, #0
 8004baa:	d026      	beq.n	8004bfa <xAligningTask+0x182>
				if (impCoeff >= 0.0) impUpCoeff = impCoeff;
 8004bac:	f7fc f9fe 	bl	8000fac <__aeabi_fcmpge>
 8004bb0:	b108      	cbz	r0, 8004bb6 <xAligningTask+0x13e>
 8004bb2:	f8cd b00c 	str.w	fp, [sp, #12]
			}
			else{
				if (impCoeff <= 0.0) impDownCoeff = impCoeff;
			}

			deltaPressure = abs(deltaPressure);
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	bfb8      	it	lt
 8004bba:	426d      	neglt	r5, r5
			if (deltaPressure < PRESSURE_ACCURACY_THRESHOLD && impTime > 1000){
 8004bbc:	b22d      	sxth	r5, r5
 8004bbe:	2d18      	cmp	r5, #24
 8004bc0:	dc09      	bgt.n	8004bd6 <xAligningTask+0x15e>
 8004bc2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8004bc6:	dd06      	ble.n	8004bd6 <xAligningTask+0x15e>
				all_led_off();
 8004bc8:	f001 f9b8 	bl	8005f3c <all_led_off>
				controllerState.state = TEST_ERROR;
 8004bcc:	2302      	movs	r3, #2
				vTaskDelete(NULL);
 8004bce:	2000      	movs	r0, #0
				controllerState.state = TEST_ERROR;
 8004bd0:	72b3      	strb	r3, [r6, #10]
				vTaskDelete(NULL);
 8004bd2:	f7ff fb79 	bl	80042c8 <vTaskDelete>
			}

			currentTry += 1;
 8004bd6:	3701      	adds	r7, #1
 8004bd8:	b2ff      	uxtb	r7, r7
 8004bda:	e762      	b.n	8004aa2 <xAligningTask+0x2a>
 8004bdc:	f241 3088 	movw	r0, #5000	; 0x1388
 8004be0:	4284      	cmp	r4, r0
 8004be2:	bfa8      	it	ge
 8004be4:	4604      	movge	r4, r0
				VALVE_DOWN_ON;
 8004be6:	2201      	movs	r2, #1
 8004be8:	2104      	movs	r1, #4
 8004bea:	4650      	mov	r0, sl
 8004bec:	f7fd f94c 	bl	8001e88 <HAL_GPIO_WritePin>
				controllerState.valveIsOpen = -1;
 8004bf0:	23ff      	movs	r3, #255	; 0xff
					pressIsLower = 0;
 8004bf2:	f04f 0800 	mov.w	r8, #0
				controllerState.valveIsOpen = -1;
 8004bf6:	7533      	strb	r3, [r6, #20]
 8004bf8:	e7a7      	b.n	8004b4a <xAligningTask+0xd2>
				if (impCoeff <= 0.0) impDownCoeff = impCoeff;
 8004bfa:	f7fc f9cd 	bl	8000f98 <__aeabi_fcmple>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d0d9      	beq.n	8004bb6 <xAligningTask+0x13e>
 8004c02:	f8cd b010 	str.w	fp, [sp, #16]
 8004c06:	e7d6      	b.n	8004bb6 <xAligningTask+0x13e>
				impTime = (int32_t)(impUpCoeff * (float) deltaPressure);
 8004c08:	f7fb ffca 	bl	8000ba0 <__aeabi_i2f>
 8004c0c:	9903      	ldr	r1, [sp, #12]
 8004c0e:	f7fc f81b 	bl	8000c48 <__aeabi_fmul>
 8004c12:	f7fc f9df 	bl	8000fd4 <__aeabi_f2iz>
				if (impTime <= 0) impTime = 1000;
 8004c16:	1e04      	subs	r4, r0, #0
 8004c18:	dc89      	bgt.n	8004b2e <xAligningTask+0xb6>
 8004c1a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004c1e:	e78b      	b.n	8004b38 <xAligningTask+0xc0>
 8004c20:	2000551c 	.word	0x2000551c
 8004c24:	20005364 	.word	0x20005364
 8004c28:	200053d0 	.word	0x200053d0
 8004c2c:	08007417 	.word	0x08007417
 8004c30:	08005e71 	.word	0x08005e71
 8004c34:	20005360 	.word	0x20005360
 8004c38:	200053a8 	.word	0x200053a8
 8004c3c:	40010800 	.word	0x40010800

08004c40 <scanAnalogInput>:
extern uint16_t adcRawData;
extern uint8_t symbolsToShow[2];

extern xSemaphoreHandle xNewPressureSemaphore;

void scanAnalogInput(void *arguments){
 8004c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t array[10] = {1};
	uint8_t pArray = 0;
	uint32_t sum = 0;
	uint8_t i = 0;
	StateMachine prevState = IDLE;
 8004c44:	f04f 0800 	mov.w	r8, #0
void scanAnalogInput(void *arguments){
 8004c48:	b086      	sub	sp, #24
	uint16_t array[10] = {1};
 8004c4a:	f10d 0904 	add.w	r9, sp, #4
 8004c4e:	2214      	movs	r2, #20
 8004c50:	2100      	movs	r1, #0
 8004c52:	4648      	mov	r0, r9
 8004c54:	f001 facd 	bl	80061f2 <memset>
 8004c58:	2301      	movs	r3, #1
	uint8_t pArray = 0;
 8004c5a:	4644      	mov	r4, r8
			controllerState.sensorData = (uint16_t)(sum / 10);

			controllerState.dataToSend[0] = controllerState.sensorData;

			controllerState.sensorDataBar = adc_to_bar(controllerState.sensorData);
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 8004c5c:	2600      	movs	r6, #0
			controllerState.sensorData = (uint16_t)(sum / 10);
 8004c5e:	4d43      	ldr	r5, [pc, #268]	; (8004d6c <scanAnalogInput+0x12c>)
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 8004c60:	4f43      	ldr	r7, [pc, #268]	; (8004d70 <scanAnalogInput+0x130>)
	uint16_t array[10] = {1};
 8004c62:	f8ad 3004 	strh.w	r3, [sp, #4]
		if (pArray == 10){
 8004c66:	2c0a      	cmp	r4, #10
 8004c68:	d165      	bne.n	8004d36 <scanAnalogInput+0xf6>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4618      	mov	r0, r3
				sum += array[i];
 8004c6e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8004c72:	3301      	adds	r3, #1
			for (i = 0; i < 10; i++){
 8004c74:	2b0a      	cmp	r3, #10
				sum += array[i];
 8004c76:	4410      	add	r0, r2
			for (i = 0; i < 10; i++){
 8004c78:	d1f9      	bne.n	8004c6e <scanAnalogInput+0x2e>
			controllerState.sensorData = (uint16_t)(sum / 10);
 8004c7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c7e:	b280      	uxth	r0, r0
 8004c80:	8068      	strh	r0, [r5, #2]
			controllerState.dataToSend[0] = controllerState.sensorData;
 8004c82:	81e8      	strh	r0, [r5, #14]
			controllerState.sensorDataBar = adc_to_bar(controllerState.sensorData);
 8004c84:	f001 f998 	bl	8005fb8 <adc_to_bar>
 8004c88:	6068      	str	r0, [r5, #4]
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 8004c8a:	f7fb fc41 	bl	8000510 <__aeabi_f2d>
 8004c8e:	4632      	mov	r2, r6
 8004c90:	463b      	mov	r3, r7
 8004c92:	f7fb fc91 	bl	80005b8 <__aeabi_dmul>
 8004c96:	f7fb fea1 	bl	80009dc <__aeabi_d2iz>
 8004c9a:	b200      	sxth	r0, r0
			if (controllerState.valueToShow > 99) controllerState.valueToShow = 99;
 8004c9c:	2863      	cmp	r0, #99	; 0x63
 8004c9e:	bfca      	itet	gt
 8004ca0:	2363      	movgt	r3, #99	; 0x63
			controllerState.valueToShow = (int16_t)(controllerState.sensorDataBar * 10.0);
 8004ca2:	8128      	strhle	r0, [r5, #8]
			if (controllerState.valueToShow > 99) controllerState.valueToShow = 99;
 8004ca4:	812b      	strhgt	r3, [r5, #8]

			if (controllerState.valueToShow < 0){
 8004ca6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8004caa:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <scanAnalogInput+0x134>)
 8004cac:	2900      	cmp	r1, #0
				symbolsToShow[0] = 11;
				symbolsToShow[1] = 1;
			}
			else{
				symbolsToShow[0] = controllerState.valueToShow / 10;
 8004cae:	bfab      	itete	ge
 8004cb0:	200a      	movge	r0, #10
				symbolsToShow[0] = 11;
 8004cb2:	220b      	movlt	r2, #11
				symbolsToShow[0] = controllerState.valueToShow / 10;
 8004cb4:	fb91 f2f0 	sdivge	r2, r1, r0
				symbolsToShow[0] = 11;
 8004cb8:	701a      	strblt	r2, [r3, #0]
				symbolsToShow[1] = 1;
 8004cba:	bfb2      	itee	lt
 8004cbc:	2201      	movlt	r2, #1
				symbolsToShow[0] = controllerState.valueToShow / 10;
 8004cbe:	701a      	strbge	r2, [r3, #0]
				symbolsToShow[1] = controllerState.valueToShow % 10;
 8004cc0:	fb00 1212 	mlsge	r2, r0, r2, r1
			}

			if (controllerState.state == TESTING || controllerState.state == ALIGNING) {
 8004cc4:	f895 a00a 	ldrb.w	sl, [r5, #10]
				symbolsToShow[1] = controllerState.valueToShow % 10;
 8004cc8:	705a      	strb	r2, [r3, #1]
			if (controllerState.state == TESTING || controllerState.state == ALIGNING) {
 8004cca:	f1aa 0303 	sub.w	r3, sl, #3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d80a      	bhi.n	8004ce8 <scanAnalogInput+0xa8>
				//giving semaphore
				xSemaphoreGive(xNewPressureSemaphore);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4828      	ldr	r0, [pc, #160]	; (8004d78 <scanAnalogInput+0x138>)
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	f7fe ffb8 	bl	8003c50 <xQueueGenericSend>
						vTaskDelete(testingTreadHandle);
						testingTreadHandle = NULL;
					}
				}

				prevState = controllerState.state;
 8004ce0:	f895 a00a 	ldrb.w	sl, [r5, #10]
			pArray = 0;
 8004ce4:	2400      	movs	r4, #0
 8004ce6:	e030      	b.n	8004d4a <scanAnalogInput+0x10a>
			else if (prevState != controllerState.state && (prevState == TESTING || prevState == ALIGNING)&&
 8004ce8:	45d0      	cmp	r8, sl
 8004cea:	d0fb      	beq.n	8004ce4 <scanAnalogInput+0xa4>
 8004cec:	f1a8 0303 	sub.w	r3, r8, #3
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d8f6      	bhi.n	8004ce4 <scanAnalogInput+0xa4>
 8004cf6:	f1ba 0f05 	cmp.w	sl, #5
 8004cfa:	d0f3      	beq.n	8004ce4 <scanAnalogInput+0xa4>
					(controllerState.state != STEP_ERROR && controllerState.state != TEST_ERROR)){
 8004cfc:	f1ba 0f02 	cmp.w	sl, #2
 8004d00:	d0f0      	beq.n	8004ce4 <scanAnalogInput+0xa4>
				if (prevState == ALIGNING){
 8004d02:	f1b8 0f04 	cmp.w	r8, #4
 8004d06:	d128      	bne.n	8004d5a <scanAnalogInput+0x11a>
					if (aligninThreadHandle != NULL){
 8004d08:	f8df a080 	ldr.w	sl, [pc, #128]	; 8004d8c <scanAnalogInput+0x14c>
 8004d0c:	f8da 0000 	ldr.w	r0, [sl]
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d0e5      	beq.n	8004ce0 <scanAnalogInput+0xa0>
						aligninThreadHandle = NULL;
 8004d14:	2400      	movs	r4, #0
						vTaskDelete(aligninThreadHandle);
 8004d16:	f7ff fad7 	bl	80042c8 <vTaskDelete>
						VALVE_UP_OFF;
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	4817      	ldr	r0, [pc, #92]	; (8004d7c <scanAnalogInput+0x13c>)
						aligninThreadHandle = NULL;
 8004d20:	f8ca 4000 	str.w	r4, [sl]
						VALVE_UP_OFF;
 8004d24:	f7fd f8b0 	bl	8001e88 <HAL_GPIO_WritePin>
						VALVE_DOWN_OFF;
 8004d28:	4622      	mov	r2, r4
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	4813      	ldr	r0, [pc, #76]	; (8004d7c <scanAnalogInput+0x13c>)
 8004d2e:	f7fd f8ab 	bl	8001e88 <HAL_GPIO_WritePin>
						controllerState.valveIsOpen = 0;
 8004d32:	752c      	strb	r4, [r5, #20]
 8004d34:	e7d4      	b.n	8004ce0 <scanAnalogInput+0xa0>
				prevState = controllerState.state;
			}
		}
		else{
			array[pArray] = adcRawData;
			pArray++;
 8004d36:	46c2      	mov	sl, r8
			array[pArray] = adcRawData;
 8004d38:	4a11      	ldr	r2, [pc, #68]	; (8004d80 <scanAnalogInput+0x140>)
 8004d3a:	ab06      	add	r3, sp, #24
 8004d3c:	8812      	ldrh	r2, [r2, #0]
 8004d3e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
			pArray++;
 8004d42:	3401      	adds	r4, #1
			array[pArray] = adcRawData;
 8004d44:	f823 2c14 	strh.w	r2, [r3, #-20]
			pArray++;
 8004d48:	b2e4      	uxtb	r4, r4
		}

		HAL_ADC_Start_IT(&hadc1);
 8004d4a:	480e      	ldr	r0, [pc, #56]	; (8004d84 <scanAnalogInput+0x144>)
 8004d4c:	f7fc fc8e 	bl	800166c <HAL_ADC_Start_IT>



		vTaskDelay(50);
 8004d50:	2032      	movs	r0, #50	; 0x32
 8004d52:	f7ff fc71 	bl	8004638 <vTaskDelay>
		if (pArray == 10){
 8004d56:	46d0      	mov	r8, sl
 8004d58:	e785      	b.n	8004c66 <scanAnalogInput+0x26>
					if (testingTreadHandle != NULL){
 8004d5a:	4c0b      	ldr	r4, [pc, #44]	; (8004d88 <scanAnalogInput+0x148>)
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d0be      	beq.n	8004ce0 <scanAnalogInput+0xa0>
						vTaskDelete(testingTreadHandle);
 8004d62:	f7ff fab1 	bl	80042c8 <vTaskDelete>
						testingTreadHandle = NULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	e7b9      	b.n	8004ce0 <scanAnalogInput+0xa0>
 8004d6c:	20005364 	.word	0x20005364
 8004d70:	40240000 	.word	0x40240000
 8004d74:	2000535e 	.word	0x2000535e
 8004d78:	2000551c 	.word	0x2000551c
 8004d7c:	40010800 	.word	0x40010800
 8004d80:	20005334 	.word	0x20005334
 8004d84:	20005524 	.word	0x20005524
 8004d88:	200053d0 	.word	0x200053d0
 8004d8c:	20005360 	.word	0x20005360

08004d90 <get_modbus_address>:
void aligning_led_blynk(uint8_t curStep);
void step_error_led_blynk(uint8_t curStep);

xSemaphoreHandle xNewPressureSemaphore;

uint8_t get_modbus_address(){
 8004d90:	b510      	push	{r4, lr}
	uint8_t addr = 0;

	if (!HAL_GPIO_ReadPin(ADDR_0_PORT, ADDR_0_PIN)){
 8004d92:	2180      	movs	r1, #128	; 0x80
 8004d94:	481b      	ldr	r0, [pc, #108]	; (8004e04 <get_modbus_address+0x74>)
 8004d96:	f7fd f871 	bl	8001e7c <HAL_GPIO_ReadPin>
	uint8_t addr = 0;
 8004d9a:	fab0 f480 	clz	r4, r0
		addr |= (1 << 0);
	}
	if (!HAL_GPIO_ReadPin(ADDR_1_PORT, ADDR_1_PIN)){
 8004d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004da2:	4818      	ldr	r0, [pc, #96]	; (8004e04 <get_modbus_address+0x74>)
	uint8_t addr = 0;
 8004da4:	0964      	lsrs	r4, r4, #5
	if (!HAL_GPIO_ReadPin(ADDR_1_PORT, ADDR_1_PIN)){
 8004da6:	f7fd f869 	bl	8001e7c <HAL_GPIO_ReadPin>
 8004daa:	b908      	cbnz	r0, 8004db0 <get_modbus_address+0x20>
		addr |= (1 << 1);
 8004dac:	f044 0402 	orr.w	r4, r4, #2
	}
	if (!HAL_GPIO_ReadPin(ADDR_2_PORT, ADDR_2_PIN)){
 8004db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004db4:	4813      	ldr	r0, [pc, #76]	; (8004e04 <get_modbus_address+0x74>)
 8004db6:	f7fd f861 	bl	8001e7c <HAL_GPIO_ReadPin>
 8004dba:	b910      	cbnz	r0, 8004dc2 <get_modbus_address+0x32>
		addr |= (1 << 2);
 8004dbc:	f044 0404 	orr.w	r4, r4, #4
 8004dc0:	b2e4      	uxtb	r4, r4
	}
	if (!HAL_GPIO_ReadPin(ADDR_3_PORT, ADDR_3_PIN)){
 8004dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dc6:	4810      	ldr	r0, [pc, #64]	; (8004e08 <get_modbus_address+0x78>)
 8004dc8:	f7fd f858 	bl	8001e7c <HAL_GPIO_ReadPin>
 8004dcc:	b910      	cbnz	r0, 8004dd4 <get_modbus_address+0x44>
		addr |= (1 << 3);
 8004dce:	f044 0408 	orr.w	r4, r4, #8
 8004dd2:	b2e4      	uxtb	r4, r4
	}
	if (!HAL_GPIO_ReadPin(ADDR_4_PORT, ADDR_4_PIN)){
 8004dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004dd8:	480b      	ldr	r0, [pc, #44]	; (8004e08 <get_modbus_address+0x78>)
 8004dda:	f7fd f84f 	bl	8001e7c <HAL_GPIO_ReadPin>
 8004dde:	b910      	cbnz	r0, 8004de6 <get_modbus_address+0x56>
		addr |= (1 << 4);
 8004de0:	f044 0410 	orr.w	r4, r4, #16
 8004de4:	b2e4      	uxtb	r4, r4
	}
	if (!HAL_GPIO_ReadPin(ADDR_5_PORT, ADDR_5_PIN)){
 8004de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dea:	4807      	ldr	r0, [pc, #28]	; (8004e08 <get_modbus_address+0x78>)
 8004dec:	f7fd f846 	bl	8001e7c <HAL_GPIO_ReadPin>
 8004df0:	b920      	cbnz	r0, 8004dfc <get_modbus_address+0x6c>
		addr |= (1 << 5);
 8004df2:	f044 0420 	orr.w	r4, r4, #32
 8004df6:	b2e4      	uxtb	r4, r4
	}

	if (addr == 0) addr = 1;

	return addr;
}
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bd10      	pop	{r4, pc}
	if (addr == 0) addr = 1;
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	bf08      	it	eq
 8004e00:	2401      	moveq	r4, #1
 8004e02:	e7f9      	b.n	8004df8 <get_modbus_address+0x68>
 8004e04:	40010c00 	.word	0x40010c00
 8004e08:	40011000 	.word	0x40011000

08004e0c <controller_init>:



void controller_init(){
 8004e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	controllerState.modbusAddr = get_modbus_address();
 8004e0e:	f7ff ffbf 	bl	8004d90 <get_modbus_address>

	eMBErrorCode    eStatus;
	eStatus = eMBInit( MB_RTU, (UCHAR)controllerState.modbusAddr, 0, 38400, MB_PAR_NONE );
 8004e12:	2400      	movs	r4, #0
	controllerState.modbusAddr = get_modbus_address();
 8004e14:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <controller_init+0xcc>)
 8004e16:	4601      	mov	r1, r0
 8004e18:	7018      	strb	r0, [r3, #0]
	eStatus = eMBInit( MB_RTU, (UCHAR)controllerState.modbusAddr, 0, 38400, MB_PAR_NONE );
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8004e20:	9400      	str	r4, [sp, #0]
 8004e22:	4620      	mov	r0, r4
 8004e24:	f7fe f8b4 	bl	8002f90 <eMBInit>
	//eStatus = eMBInit( MB_RTU, 17, 0, 38400, MB_PAR_NONE );

	eStatus = eMBEnable(  );
 8004e28:	f7fe f90a 	bl	8003040 <eMBEnable>

	vSemaphoreCreateBinary(xNewPressureSemaphore);
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	4621      	mov	r1, r4
 8004e30:	2001      	movs	r0, #1
 8004e32:	f7fe fee9 	bl	8003c08 <xQueueGenericCreate>
 8004e36:	4a29      	ldr	r2, [pc, #164]	; (8004edc <controller_init+0xd0>)
 8004e38:	6010      	str	r0, [r2, #0]
 8004e3a:	b120      	cbz	r0, 8004e46 <controller_init+0x3a>
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4621      	mov	r1, r4
 8004e42:	f7fe ff05 	bl	8003c50 <xQueueGenericSend>
////
//	testProgram.testPressure[4] = 20;
//	testProgram.testTime[4] = 10;
//	testProgram.testDiffPressure[4] = 10;

	mRead_flash();
 8004e46:	f000 fac7 	bl	80053d8 <mRead_flash>
	if (testProgram.testPressure[0] > 200){
 8004e4a:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <controller_init+0xd4>)
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	2ac8      	cmp	r2, #200	; 0xc8
 8004e50:	d91c      	bls.n	8004e8c <controller_init+0x80>
		testProgram.testPressure[0] = 61;
 8004e52:	223d      	movs	r2, #61	; 0x3d
		testProgram.testTime[0] = 5;
		testProgram.testDiffPressure[0] = 10;
	//
		testProgram.testPressure[1] = 52;
 8004e54:	2034      	movs	r0, #52	; 0x34
		testProgram.testPressure[0] = 61;
 8004e56:	801a      	strh	r2, [r3, #0]
		testProgram.testDiffPressure[0] = 10;
 8004e58:	220a      	movs	r2, #10
		testProgram.testTime[0] = 5;
 8004e5a:	2105      	movs	r1, #5
		testProgram.testDiffPressure[0] = 10;
 8004e5c:	829a      	strh	r2, [r3, #20]
		testProgram.testPressure[1] = 52;
 8004e5e:	8058      	strh	r0, [r3, #2]
		testProgram.testTime[1] = 5;
		testProgram.testDiffPressure[1] = 10;
 8004e60:	82da      	strh	r2, [r3, #22]
	//
		testProgram.testPressure[2] = 43;
 8004e62:	202b      	movs	r0, #43	; 0x2b
		testProgram.testTime[2] = 5;
		testProgram.testDiffPressure[2] = 10;
 8004e64:	831a      	strh	r2, [r3, #24]
	//
		testProgram.testPressure[3] = 30;
		testProgram.testTime[3] = 5;
		testProgram.testDiffPressure[3] = 10;
 8004e66:	835a      	strh	r2, [r3, #26]
	//
		testProgram.testPressure[4] = 20;
		testProgram.testTime[4] = 10;
 8004e68:	825a      	strh	r2, [r3, #18]
		testProgram.testDiffPressure[4] = 10;
 8004e6a:	839a      	strh	r2, [r3, #28]

		testProgram.checkingDelaySeconds = 10;
 8004e6c:	845a      	strh	r2, [r3, #34]	; 0x22
		testProgram.delayAfterAligningSeconds = 60;
 8004e6e:	223c      	movs	r2, #60	; 0x3c
		testProgram.testTime[0] = 5;
 8004e70:	8159      	strh	r1, [r3, #10]
		testProgram.testTime[1] = 5;
 8004e72:	8199      	strh	r1, [r3, #12]
		testProgram.testPressure[2] = 43;
 8004e74:	8098      	strh	r0, [r3, #4]
		testProgram.testTime[2] = 5;
 8004e76:	81d9      	strh	r1, [r3, #14]
		testProgram.testPressure[3] = 30;
 8004e78:	201e      	movs	r0, #30
		testProgram.testTime[3] = 5;
 8004e7a:	8219      	strh	r1, [r3, #16]
		testProgram.delayAfterAligningSeconds = 60;
 8004e7c:	83da      	strh	r2, [r3, #30]
		testProgram.testPressure[4] = 20;
 8004e7e:	2114      	movs	r1, #20
		testProgram.maxNumberOfBadPressure = 12;
 8004e80:	220c      	movs	r2, #12
		testProgram.testPressure[3] = 30;
 8004e82:	80d8      	strh	r0, [r3, #6]
		testProgram.testPressure[4] = 20;
 8004e84:	8119      	strh	r1, [r3, #8]
		testProgram.maxNumberOfBadPressure = 12;
 8004e86:	841a      	strh	r2, [r3, #32]
		mWrite_flash();
 8004e88:	f000 fa82 	bl	8005390 <mWrite_flash>
	}


	xTaskCreate(indicationTask, "Blynk", 200, NULL, 1, NULL);
 8004e8c:	2400      	movs	r4, #0
 8004e8e:	2501      	movs	r5, #1
 8004e90:	4623      	mov	r3, r4
 8004e92:	9401      	str	r4, [sp, #4]
 8004e94:	9500      	str	r5, [sp, #0]
 8004e96:	22c8      	movs	r2, #200	; 0xc8
 8004e98:	4912      	ldr	r1, [pc, #72]	; (8004ee4 <controller_init+0xd8>)
 8004e9a:	4813      	ldr	r0, [pc, #76]	; (8004ee8 <controller_init+0xdc>)
 8004e9c:	f7ff f9e7 	bl	800426e <xTaskCreate>
	xTaskCreate(scanBtnsTask, "Btns", 200, NULL, 1, NULL);
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	9401      	str	r4, [sp, #4]
 8004ea4:	9500      	str	r5, [sp, #0]
 8004ea6:	22c8      	movs	r2, #200	; 0xc8
 8004ea8:	4910      	ldr	r1, [pc, #64]	; (8004eec <controller_init+0xe0>)
 8004eaa:	4811      	ldr	r0, [pc, #68]	; (8004ef0 <controller_init+0xe4>)
 8004eac:	f7ff f9df 	bl	800426e <xTaskCreate>
	xTaskCreate(scanAnalogInput, "analog", 200, NULL, 1, NULL);
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	9401      	str	r4, [sp, #4]
 8004eb4:	9500      	str	r5, [sp, #0]
 8004eb6:	22c8      	movs	r2, #200	; 0xc8
 8004eb8:	490e      	ldr	r1, [pc, #56]	; (8004ef4 <controller_init+0xe8>)
 8004eba:	480f      	ldr	r0, [pc, #60]	; (8004ef8 <controller_init+0xec>)
 8004ebc:	f7ff f9d7 	bl	800426e <xTaskCreate>
	xTaskCreate(xModbusPollTask, "modbus", 400, NULL, 1, NULL);
 8004ec0:	9401      	str	r4, [sp, #4]
 8004ec2:	9500      	str	r5, [sp, #0]
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004eca:	490c      	ldr	r1, [pc, #48]	; (8004efc <controller_init+0xf0>)
 8004ecc:	480c      	ldr	r0, [pc, #48]	; (8004f00 <controller_init+0xf4>)
 8004ece:	f7ff f9ce 	bl	800426e <xTaskCreate>

}
 8004ed2:	b003      	add	sp, #12
 8004ed4:	bd30      	pop	{r4, r5, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20005364 	.word	0x20005364
 8004edc:	2000551c 	.word	0x2000551c
 8004ee0:	2000537c 	.word	0x2000537c
 8004ee4:	0800741f 	.word	0x0800741f
 8004ee8:	080052e5 	.word	0x080052e5
 8004eec:	08007425 	.word	0x08007425
 8004ef0:	08005911 	.word	0x08005911
 8004ef4:	0800742a 	.word	0x0800742a
 8004ef8:	08004c41 	.word	0x08004c41
 8004efc:	08007431 	.word	0x08007431
 8004f00:	08005689 	.word	0x08005689

08004f04 <testing_led_blynk>:
	}
	vTaskDelete(NULL);
}

void testing_led_blynk(uint8_t curStep){
	switch(curStep){
 8004f04:	3801      	subs	r0, #1
void testing_led_blynk(uint8_t curStep){
 8004f06:	b508      	push	{r3, lr}
	switch(curStep){
 8004f08:	2804      	cmp	r0, #4
 8004f0a:	d865      	bhi.n	8004fd8 <testing_led_blynk+0xd4>
 8004f0c:	e8df f000 	tbb	[pc, r0]
 8004f10:	36271d03 	.word	0x36271d03
 8004f14:	4a          	.byte	0x4a
 8004f15:	00          	.byte	0x00
		case(1):{
			HAL_GPIO_TogglePin(LED_STEP_1_PORT, LED_STEP_1_PIN);
 8004f16:	2110      	movs	r1, #16
 8004f18:	4848      	ldr	r0, [pc, #288]	; (800503c <testing_led_blynk+0x138>)
 8004f1a:	f7fc ffba 	bl	8001e92 <HAL_GPIO_TogglePin>
			LED_STEP_2_OFF;
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2120      	movs	r1, #32
 8004f22:	4846      	ldr	r0, [pc, #280]	; (800503c <testing_led_blynk+0x138>)
 8004f24:	f7fc ffb0 	bl	8001e88 <HAL_GPIO_WritePin>
			break;
		}
		case(2):{
			LED_STEP_1_ON;
			HAL_GPIO_TogglePin(LED_STEP_2_PORT, LED_STEP_2_PIN);
			LED_STEP_3_OFF;
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2140      	movs	r1, #64	; 0x40
 8004f2c:	4843      	ldr	r0, [pc, #268]	; (800503c <testing_led_blynk+0x138>)
 8004f2e:	f7fc ffab 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_4_OFF;
 8004f32:	2200      	movs	r2, #0
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	4841      	ldr	r0, [pc, #260]	; (800503c <testing_led_blynk+0x138>)
 8004f38:	f7fc ffa6 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_5_OFF;
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2110      	movs	r1, #16
 8004f40:	483f      	ldr	r0, [pc, #252]	; (8005040 <testing_led_blynk+0x13c>)
			  LED_ERR_3_OFF;
			  LED_ERR_4_OFF;
			  LED_ERR_5_OFF;
		}
	}
}
 8004f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			  LED_ERR_5_OFF;
 8004f46:	f7fc bf9f 	b.w	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_1_ON;
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2110      	movs	r1, #16
 8004f4e:	483b      	ldr	r0, [pc, #236]	; (800503c <testing_led_blynk+0x138>)
 8004f50:	f7fc ff9a 	bl	8001e88 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_STEP_2_PORT, LED_STEP_2_PIN);
 8004f54:	2120      	movs	r1, #32
 8004f56:	4839      	ldr	r0, [pc, #228]	; (800503c <testing_led_blynk+0x138>)
 8004f58:	f7fc ff9b 	bl	8001e92 <HAL_GPIO_TogglePin>
 8004f5c:	e7e4      	b.n	8004f28 <testing_led_blynk+0x24>
			LED_STEP_1_ON;
 8004f5e:	2201      	movs	r2, #1
 8004f60:	2110      	movs	r1, #16
 8004f62:	4836      	ldr	r0, [pc, #216]	; (800503c <testing_led_blynk+0x138>)
 8004f64:	f7fc ff90 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_2_ON;
 8004f68:	2201      	movs	r2, #1
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	4833      	ldr	r0, [pc, #204]	; (800503c <testing_led_blynk+0x138>)
 8004f6e:	f7fc ff8b 	bl	8001e88 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_STEP_3_PORT, LED_STEP_3_PIN);
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	4831      	ldr	r0, [pc, #196]	; (800503c <testing_led_blynk+0x138>)
 8004f76:	f7fc ff8c 	bl	8001e92 <HAL_GPIO_TogglePin>
 8004f7a:	e7da      	b.n	8004f32 <testing_led_blynk+0x2e>
			LED_STEP_1_ON;
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2110      	movs	r1, #16
 8004f80:	482e      	ldr	r0, [pc, #184]	; (800503c <testing_led_blynk+0x138>)
 8004f82:	f7fc ff81 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_2_ON;
 8004f86:	2201      	movs	r2, #1
 8004f88:	2120      	movs	r1, #32
 8004f8a:	482c      	ldr	r0, [pc, #176]	; (800503c <testing_led_blynk+0x138>)
 8004f8c:	f7fc ff7c 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_3_ON;
 8004f90:	2201      	movs	r2, #1
 8004f92:	2140      	movs	r1, #64	; 0x40
 8004f94:	4829      	ldr	r0, [pc, #164]	; (800503c <testing_led_blynk+0x138>)
 8004f96:	f7fc ff77 	bl	8001e88 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_STEP_4_PORT, LED_STEP_4_PIN);
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	4827      	ldr	r0, [pc, #156]	; (800503c <testing_led_blynk+0x138>)
 8004f9e:	f7fc ff78 	bl	8001e92 <HAL_GPIO_TogglePin>
 8004fa2:	e7cb      	b.n	8004f3c <testing_led_blynk+0x38>
			LED_STEP_1_ON;
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	4824      	ldr	r0, [pc, #144]	; (800503c <testing_led_blynk+0x138>)
 8004faa:	f7fc ff6d 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_2_ON;
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	4822      	ldr	r0, [pc, #136]	; (800503c <testing_led_blynk+0x138>)
 8004fb4:	f7fc ff68 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_3_ON;
 8004fb8:	2201      	movs	r2, #1
 8004fba:	2140      	movs	r1, #64	; 0x40
 8004fbc:	481f      	ldr	r0, [pc, #124]	; (800503c <testing_led_blynk+0x138>)
 8004fbe:	f7fc ff63 	bl	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_4_ON;
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	481d      	ldr	r0, [pc, #116]	; (800503c <testing_led_blynk+0x138>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f7fc ff5e 	bl	8001e88 <HAL_GPIO_WritePin>
}
 8004fcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_TogglePin(LED_STEP_5_PORT, LED_STEP_5_PIN);
 8004fd0:	2110      	movs	r1, #16
 8004fd2:	481b      	ldr	r0, [pc, #108]	; (8005040 <testing_led_blynk+0x13c>)
 8004fd4:	f7fc bf5d 	b.w	8001e92 <HAL_GPIO_TogglePin>
			  LED_STEP_1_OFF;
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2110      	movs	r1, #16
 8004fdc:	4817      	ldr	r0, [pc, #92]	; (800503c <testing_led_blynk+0x138>)
 8004fde:	f7fc ff53 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	4815      	ldr	r0, [pc, #84]	; (800503c <testing_led_blynk+0x138>)
 8004fe8:	f7fc ff4e 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8004fec:	2200      	movs	r2, #0
 8004fee:	2140      	movs	r1, #64	; 0x40
 8004ff0:	4812      	ldr	r0, [pc, #72]	; (800503c <testing_led_blynk+0x138>)
 8004ff2:	f7fc ff49 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	4810      	ldr	r0, [pc, #64]	; (800503c <testing_led_blynk+0x138>)
 8004ffc:	f7fc ff44 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 8005000:	2200      	movs	r2, #0
 8005002:	2110      	movs	r1, #16
 8005004:	480e      	ldr	r0, [pc, #56]	; (8005040 <testing_led_blynk+0x13c>)
 8005006:	f7fc ff3f 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 800500a:	2200      	movs	r2, #0
 800500c:	2108      	movs	r1, #8
 800500e:	480b      	ldr	r0, [pc, #44]	; (800503c <testing_led_blynk+0x138>)
 8005010:	f7fc ff3a 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 8005014:	2200      	movs	r2, #0
 8005016:	2120      	movs	r1, #32
 8005018:	4809      	ldr	r0, [pc, #36]	; (8005040 <testing_led_blynk+0x13c>)
 800501a:	f7fc ff35 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 800501e:	2200      	movs	r2, #0
 8005020:	2104      	movs	r1, #4
 8005022:	4808      	ldr	r0, [pc, #32]	; (8005044 <testing_led_blynk+0x140>)
 8005024:	f7fc ff30 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 8005028:	2200      	movs	r2, #0
 800502a:	2102      	movs	r1, #2
 800502c:	4805      	ldr	r0, [pc, #20]	; (8005044 <testing_led_blynk+0x140>)
 800502e:	f7fc ff2b 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_5_OFF;
 8005032:	2200      	movs	r2, #0
 8005034:	2101      	movs	r1, #1
 8005036:	4803      	ldr	r0, [pc, #12]	; (8005044 <testing_led_blynk+0x140>)
 8005038:	e783      	b.n	8004f42 <testing_led_blynk+0x3e>
 800503a:	bf00      	nop
 800503c:	40010800 	.word	0x40010800
 8005040:	40011000 	.word	0x40011000
 8005044:	40010c00 	.word	0x40010c00

08005048 <aligning_led_blynk>:

void aligning_led_blynk(uint8_t curStep){
	switch(curStep){
 8005048:	3801      	subs	r0, #1
void aligning_led_blynk(uint8_t curStep){
 800504a:	b508      	push	{r3, lr}
	switch(curStep){
 800504c:	2804      	cmp	r0, #4
 800504e:	d818      	bhi.n	8005082 <aligning_led_blynk+0x3a>
 8005050:	e8df f000 	tbb	[pc, r0]
 8005054:	100d0a03 	.word	0x100d0a03
 8005058:	13          	.byte	0x13
 8005059:	00          	.byte	0x00
		case(1):{
			LED_STEP_1_ON;
 800505a:	2201      	movs	r2, #1
 800505c:	2110      	movs	r1, #16
		case(3):{
			LED_STEP_3_ON;
			break;
		}
		case(4):{
			LED_STEP_4_ON;
 800505e:	4821      	ldr	r0, [pc, #132]	; (80050e4 <aligning_led_blynk+0x9c>)
			  LED_ERR_3_OFF;
			  LED_ERR_4_OFF;
			  LED_ERR_5_OFF;
		}
	}
}
 8005060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			  LED_ERR_5_OFF;
 8005064:	f7fc bf10 	b.w	8001e88 <HAL_GPIO_WritePin>
			LED_STEP_2_ON;
 8005068:	2201      	movs	r2, #1
 800506a:	2120      	movs	r1, #32
 800506c:	e7f7      	b.n	800505e <aligning_led_blynk+0x16>
			LED_STEP_3_ON;
 800506e:	2201      	movs	r2, #1
 8005070:	2140      	movs	r1, #64	; 0x40
 8005072:	e7f4      	b.n	800505e <aligning_led_blynk+0x16>
			LED_STEP_4_ON;
 8005074:	2201      	movs	r2, #1
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	e7f1      	b.n	800505e <aligning_led_blynk+0x16>
			LED_STEP_5_ON;
 800507a:	2201      	movs	r2, #1
 800507c:	2110      	movs	r1, #16
 800507e:	481a      	ldr	r0, [pc, #104]	; (80050e8 <aligning_led_blynk+0xa0>)
 8005080:	e7ee      	b.n	8005060 <aligning_led_blynk+0x18>
			  LED_STEP_1_OFF;
 8005082:	2200      	movs	r2, #0
 8005084:	2110      	movs	r1, #16
 8005086:	4817      	ldr	r0, [pc, #92]	; (80050e4 <aligning_led_blynk+0x9c>)
 8005088:	f7fc fefe 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 800508c:	2200      	movs	r2, #0
 800508e:	2120      	movs	r1, #32
 8005090:	4814      	ldr	r0, [pc, #80]	; (80050e4 <aligning_led_blynk+0x9c>)
 8005092:	f7fc fef9 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8005096:	2200      	movs	r2, #0
 8005098:	2140      	movs	r1, #64	; 0x40
 800509a:	4812      	ldr	r0, [pc, #72]	; (80050e4 <aligning_led_blynk+0x9c>)
 800509c:	f7fc fef4 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 80050a0:	2200      	movs	r2, #0
 80050a2:	2180      	movs	r1, #128	; 0x80
 80050a4:	480f      	ldr	r0, [pc, #60]	; (80050e4 <aligning_led_blynk+0x9c>)
 80050a6:	f7fc feef 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 80050aa:	2200      	movs	r2, #0
 80050ac:	2110      	movs	r1, #16
 80050ae:	480e      	ldr	r0, [pc, #56]	; (80050e8 <aligning_led_blynk+0xa0>)
 80050b0:	f7fc feea 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 80050b4:	2200      	movs	r2, #0
 80050b6:	2108      	movs	r1, #8
 80050b8:	480a      	ldr	r0, [pc, #40]	; (80050e4 <aligning_led_blynk+0x9c>)
 80050ba:	f7fc fee5 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 80050be:	2200      	movs	r2, #0
 80050c0:	2120      	movs	r1, #32
 80050c2:	4809      	ldr	r0, [pc, #36]	; (80050e8 <aligning_led_blynk+0xa0>)
 80050c4:	f7fc fee0 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 80050c8:	2200      	movs	r2, #0
 80050ca:	2104      	movs	r1, #4
 80050cc:	4807      	ldr	r0, [pc, #28]	; (80050ec <aligning_led_blynk+0xa4>)
 80050ce:	f7fc fedb 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 80050d2:	2200      	movs	r2, #0
 80050d4:	2102      	movs	r1, #2
 80050d6:	4805      	ldr	r0, [pc, #20]	; (80050ec <aligning_led_blynk+0xa4>)
 80050d8:	f7fc fed6 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_5_OFF;
 80050dc:	2200      	movs	r2, #0
 80050de:	2101      	movs	r1, #1
 80050e0:	4802      	ldr	r0, [pc, #8]	; (80050ec <aligning_led_blynk+0xa4>)
 80050e2:	e7bd      	b.n	8005060 <aligning_led_blynk+0x18>
 80050e4:	40010800 	.word	0x40010800
 80050e8:	40011000 	.word	0x40011000
 80050ec:	40010c00 	.word	0x40010c00

080050f0 <step_error_led_blynk>:

void step_error_led_blynk(uint8_t curStep){
	switch(curStep){
 80050f0:	3801      	subs	r0, #1
void step_error_led_blynk(uint8_t curStep){
 80050f2:	b508      	push	{r3, lr}
	switch(curStep){
 80050f4:	2804      	cmp	r0, #4
 80050f6:	d82c      	bhi.n	8005152 <step_error_led_blynk+0x62>
 80050f8:	e8df f000 	tbb	[pc, r0]
 80050fc:	1c150e03 	.word	0x1c150e03
 8005100:	23          	.byte	0x23
 8005101:	00          	.byte	0x00
		case(1):{
			HAL_GPIO_TogglePin(LED_ERR_1_PORT, LED_ERR_1_PIN);
 8005102:	2108      	movs	r1, #8
 8005104:	482b      	ldr	r0, [pc, #172]	; (80051b4 <step_error_led_blynk+0xc4>)
 8005106:	f7fc fec4 	bl	8001e92 <HAL_GPIO_TogglePin>
			LED_STEP_1_ON;
 800510a:	2201      	movs	r2, #1
 800510c:	2110      	movs	r1, #16
			LED_STEP_3_ON;
			break;
		}
		case(4):{
			HAL_GPIO_TogglePin(LED_ERR_4_PORT, LED_ERR_4_PIN);
			LED_STEP_4_ON;
 800510e:	4829      	ldr	r0, [pc, #164]	; (80051b4 <step_error_led_blynk+0xc4>)
			  LED_ERR_3_OFF;
			  LED_ERR_4_OFF;
			  LED_ERR_5_OFF;
		}
	}
}
 8005110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			  LED_ERR_5_OFF;
 8005114:	f7fc beb8 	b.w	8001e88 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_ERR_2_PORT, LED_ERR_2_PIN);
 8005118:	2120      	movs	r1, #32
 800511a:	4827      	ldr	r0, [pc, #156]	; (80051b8 <step_error_led_blynk+0xc8>)
 800511c:	f7fc feb9 	bl	8001e92 <HAL_GPIO_TogglePin>
			LED_STEP_2_ON;
 8005120:	2201      	movs	r2, #1
 8005122:	2120      	movs	r1, #32
 8005124:	e7f3      	b.n	800510e <step_error_led_blynk+0x1e>
			HAL_GPIO_TogglePin(LED_ERR_3_PORT, LED_ERR_3_PIN);
 8005126:	2104      	movs	r1, #4
 8005128:	4824      	ldr	r0, [pc, #144]	; (80051bc <step_error_led_blynk+0xcc>)
 800512a:	f7fc feb2 	bl	8001e92 <HAL_GPIO_TogglePin>
			LED_STEP_3_ON;
 800512e:	2201      	movs	r2, #1
 8005130:	2140      	movs	r1, #64	; 0x40
 8005132:	e7ec      	b.n	800510e <step_error_led_blynk+0x1e>
			HAL_GPIO_TogglePin(LED_ERR_4_PORT, LED_ERR_4_PIN);
 8005134:	2102      	movs	r1, #2
 8005136:	4821      	ldr	r0, [pc, #132]	; (80051bc <step_error_led_blynk+0xcc>)
 8005138:	f7fc feab 	bl	8001e92 <HAL_GPIO_TogglePin>
			LED_STEP_4_ON;
 800513c:	2201      	movs	r2, #1
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	e7e5      	b.n	800510e <step_error_led_blynk+0x1e>
			HAL_GPIO_TogglePin(LED_ERR_5_PORT, LED_ERR_5_PIN);
 8005142:	2101      	movs	r1, #1
 8005144:	481d      	ldr	r0, [pc, #116]	; (80051bc <step_error_led_blynk+0xcc>)
 8005146:	f7fc fea4 	bl	8001e92 <HAL_GPIO_TogglePin>
			LED_STEP_5_ON;
 800514a:	2201      	movs	r2, #1
 800514c:	2110      	movs	r1, #16
 800514e:	481a      	ldr	r0, [pc, #104]	; (80051b8 <step_error_led_blynk+0xc8>)
 8005150:	e7de      	b.n	8005110 <step_error_led_blynk+0x20>
			  LED_STEP_1_OFF;
 8005152:	2200      	movs	r2, #0
 8005154:	2110      	movs	r1, #16
 8005156:	4817      	ldr	r0, [pc, #92]	; (80051b4 <step_error_led_blynk+0xc4>)
 8005158:	f7fc fe96 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 800515c:	2200      	movs	r2, #0
 800515e:	2120      	movs	r1, #32
 8005160:	4814      	ldr	r0, [pc, #80]	; (80051b4 <step_error_led_blynk+0xc4>)
 8005162:	f7fc fe91 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8005166:	2200      	movs	r2, #0
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	4812      	ldr	r0, [pc, #72]	; (80051b4 <step_error_led_blynk+0xc4>)
 800516c:	f7fc fe8c 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 8005170:	2200      	movs	r2, #0
 8005172:	2180      	movs	r1, #128	; 0x80
 8005174:	480f      	ldr	r0, [pc, #60]	; (80051b4 <step_error_led_blynk+0xc4>)
 8005176:	f7fc fe87 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 800517a:	2200      	movs	r2, #0
 800517c:	2110      	movs	r1, #16
 800517e:	480e      	ldr	r0, [pc, #56]	; (80051b8 <step_error_led_blynk+0xc8>)
 8005180:	f7fc fe82 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 8005184:	2200      	movs	r2, #0
 8005186:	2108      	movs	r1, #8
 8005188:	480a      	ldr	r0, [pc, #40]	; (80051b4 <step_error_led_blynk+0xc4>)
 800518a:	f7fc fe7d 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 800518e:	2200      	movs	r2, #0
 8005190:	2120      	movs	r1, #32
 8005192:	4809      	ldr	r0, [pc, #36]	; (80051b8 <step_error_led_blynk+0xc8>)
 8005194:	f7fc fe78 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 8005198:	2200      	movs	r2, #0
 800519a:	2104      	movs	r1, #4
 800519c:	4807      	ldr	r0, [pc, #28]	; (80051bc <step_error_led_blynk+0xcc>)
 800519e:	f7fc fe73 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 80051a2:	2200      	movs	r2, #0
 80051a4:	2102      	movs	r1, #2
 80051a6:	4805      	ldr	r0, [pc, #20]	; (80051bc <step_error_led_blynk+0xcc>)
 80051a8:	f7fc fe6e 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_5_OFF;
 80051ac:	2200      	movs	r2, #0
 80051ae:	2101      	movs	r1, #1
 80051b0:	4802      	ldr	r0, [pc, #8]	; (80051bc <step_error_led_blynk+0xcc>)
 80051b2:	e7ad      	b.n	8005110 <step_error_led_blynk+0x20>
 80051b4:	40010800 	.word	0x40010800
 80051b8:	40011000 	.word	0x40011000
 80051bc:	40010c00 	.word	0x40010c00

080051c0 <idle_led_blynk>:

void idle_led_blynk(uint8_t i){
 80051c0:	b508      	push	{r3, lr}
	  switch(i){
 80051c2:	2809      	cmp	r0, #9
 80051c4:	d85c      	bhi.n	8005280 <idle_led_blynk+0xc0>
 80051c6:	e8df f000 	tbb	[pc, r0]
 80051ca:	0d05      	.short	0x0d05
 80051cc:	31292119 	.word	0x31292119
 80051d0:	534a423a 	.word	0x534a423a
		  case 0:{
			  LED_STEP_1_ON;
 80051d4:	2201      	movs	r2, #1
 80051d6:	2110      	movs	r1, #16
 80051d8:	483f      	ldr	r0, [pc, #252]	; (80052d8 <idle_led_blynk+0x118>)
			  LED_STEP_4_OFF;
			  LED_STEP_5_OFF;
			  LED_ERR_1_OFF;
			  LED_ERR_2_OFF;
			  LED_ERR_3_OFF;
			  LED_ERR_4_OFF;
 80051da:	f7fc fe55 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_5_OFF;
 80051de:	2200      	movs	r2, #0
 80051e0:	2101      	movs	r1, #1
 80051e2:	e043      	b.n	800526c <idle_led_blynk+0xac>
			  LED_STEP_2_ON;
 80051e4:	2201      	movs	r2, #1
 80051e6:	2120      	movs	r1, #32
 80051e8:	483b      	ldr	r0, [pc, #236]	; (80052d8 <idle_led_blynk+0x118>)
 80051ea:	f7fc fe4d 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_1_OFF;
 80051ee:	2200      	movs	r2, #0
 80051f0:	2110      	movs	r1, #16
			  LED_ERR_1_OFF;
 80051f2:	4839      	ldr	r0, [pc, #228]	; (80052d8 <idle_led_blynk+0x118>)
			  break;
		  }
	  }
}
 80051f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			  LED_ERR_5_OFF;
 80051f8:	f7fc be46 	b.w	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_3_ON;
 80051fc:	2201      	movs	r2, #1
 80051fe:	2140      	movs	r1, #64	; 0x40
 8005200:	4835      	ldr	r0, [pc, #212]	; (80052d8 <idle_led_blynk+0x118>)
 8005202:	f7fc fe41 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 8005206:	2200      	movs	r2, #0
 8005208:	2120      	movs	r1, #32
 800520a:	e7f2      	b.n	80051f2 <idle_led_blynk+0x32>
			  LED_STEP_4_ON;
 800520c:	2201      	movs	r2, #1
 800520e:	2180      	movs	r1, #128	; 0x80
 8005210:	4831      	ldr	r0, [pc, #196]	; (80052d8 <idle_led_blynk+0x118>)
 8005212:	f7fc fe39 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8005216:	2200      	movs	r2, #0
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	e7ea      	b.n	80051f2 <idle_led_blynk+0x32>
			  LED_STEP_5_ON;
 800521c:	2201      	movs	r2, #1
 800521e:	2110      	movs	r1, #16
 8005220:	482e      	ldr	r0, [pc, #184]	; (80052dc <idle_led_blynk+0x11c>)
 8005222:	f7fc fe31 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 8005226:	2200      	movs	r2, #0
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	e7e2      	b.n	80051f2 <idle_led_blynk+0x32>
			  LED_ERR_1_ON;
 800522c:	2201      	movs	r2, #1
 800522e:	2108      	movs	r1, #8
 8005230:	4829      	ldr	r0, [pc, #164]	; (80052d8 <idle_led_blynk+0x118>)
 8005232:	f7fc fe29 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 8005236:	2200      	movs	r2, #0
 8005238:	2110      	movs	r1, #16
			  LED_ERR_2_OFF;
 800523a:	4828      	ldr	r0, [pc, #160]	; (80052dc <idle_led_blynk+0x11c>)
 800523c:	e7da      	b.n	80051f4 <idle_led_blynk+0x34>
			  LED_ERR_2_ON;
 800523e:	2201      	movs	r2, #1
 8005240:	2120      	movs	r1, #32
 8005242:	4826      	ldr	r0, [pc, #152]	; (80052dc <idle_led_blynk+0x11c>)
 8005244:	f7fc fe20 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 8005248:	2200      	movs	r2, #0
 800524a:	2108      	movs	r1, #8
 800524c:	e7d1      	b.n	80051f2 <idle_led_blynk+0x32>
			  LED_ERR_3_ON;
 800524e:	2201      	movs	r2, #1
 8005250:	2104      	movs	r1, #4
 8005252:	4823      	ldr	r0, [pc, #140]	; (80052e0 <idle_led_blynk+0x120>)
 8005254:	f7fc fe18 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 8005258:	2200      	movs	r2, #0
 800525a:	2120      	movs	r1, #32
 800525c:	e7ed      	b.n	800523a <idle_led_blynk+0x7a>
			  LED_ERR_4_ON;
 800525e:	2201      	movs	r2, #1
 8005260:	2102      	movs	r1, #2
 8005262:	481f      	ldr	r0, [pc, #124]	; (80052e0 <idle_led_blynk+0x120>)
 8005264:	f7fc fe10 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 8005268:	2200      	movs	r2, #0
 800526a:	2104      	movs	r1, #4
			  LED_ERR_5_OFF;
 800526c:	481c      	ldr	r0, [pc, #112]	; (80052e0 <idle_led_blynk+0x120>)
 800526e:	e7c1      	b.n	80051f4 <idle_led_blynk+0x34>
			  LED_ERR_5_ON;
 8005270:	2201      	movs	r2, #1
 8005272:	481b      	ldr	r0, [pc, #108]	; (80052e0 <idle_led_blynk+0x120>)
 8005274:	4611      	mov	r1, r2
 8005276:	f7fc fe07 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 800527a:	2200      	movs	r2, #0
 800527c:	2102      	movs	r1, #2
 800527e:	e7f5      	b.n	800526c <idle_led_blynk+0xac>
			  LED_STEP_1_OFF;
 8005280:	2200      	movs	r2, #0
 8005282:	2110      	movs	r1, #16
 8005284:	4814      	ldr	r0, [pc, #80]	; (80052d8 <idle_led_blynk+0x118>)
 8005286:	f7fc fdff 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_2_OFF;
 800528a:	2200      	movs	r2, #0
 800528c:	2120      	movs	r1, #32
 800528e:	4812      	ldr	r0, [pc, #72]	; (80052d8 <idle_led_blynk+0x118>)
 8005290:	f7fc fdfa 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_3_OFF;
 8005294:	2200      	movs	r2, #0
 8005296:	2140      	movs	r1, #64	; 0x40
 8005298:	480f      	ldr	r0, [pc, #60]	; (80052d8 <idle_led_blynk+0x118>)
 800529a:	f7fc fdf5 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_4_OFF;
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	480d      	ldr	r0, [pc, #52]	; (80052d8 <idle_led_blynk+0x118>)
 80052a4:	f7fc fdf0 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_STEP_5_OFF;
 80052a8:	2200      	movs	r2, #0
 80052aa:	2110      	movs	r1, #16
 80052ac:	480b      	ldr	r0, [pc, #44]	; (80052dc <idle_led_blynk+0x11c>)
 80052ae:	f7fc fdeb 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_1_OFF;
 80052b2:	2200      	movs	r2, #0
 80052b4:	2108      	movs	r1, #8
 80052b6:	4808      	ldr	r0, [pc, #32]	; (80052d8 <idle_led_blynk+0x118>)
 80052b8:	f7fc fde6 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_2_OFF;
 80052bc:	2200      	movs	r2, #0
 80052be:	2120      	movs	r1, #32
 80052c0:	4806      	ldr	r0, [pc, #24]	; (80052dc <idle_led_blynk+0x11c>)
 80052c2:	f7fc fde1 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_3_OFF;
 80052c6:	2200      	movs	r2, #0
 80052c8:	2104      	movs	r1, #4
 80052ca:	4805      	ldr	r0, [pc, #20]	; (80052e0 <idle_led_blynk+0x120>)
 80052cc:	f7fc fddc 	bl	8001e88 <HAL_GPIO_WritePin>
			  LED_ERR_4_OFF;
 80052d0:	2200      	movs	r2, #0
 80052d2:	2102      	movs	r1, #2
 80052d4:	4802      	ldr	r0, [pc, #8]	; (80052e0 <idle_led_blynk+0x120>)
 80052d6:	e780      	b.n	80051da <idle_led_blynk+0x1a>
 80052d8:	40010800 	.word	0x40010800
 80052dc:	40011000 	.word	0x40011000
 80052e0:	40010c00 	.word	0x40010c00

080052e4 <indicationTask>:
void indicationTask(void *arguments){
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch(controllerState.state){
 80052e6:	4f26      	ldr	r7, [pc, #152]	; (8005380 <indicationTask+0x9c>)
	uint8_t i = 0;
 80052e8:	2400      	movs	r4, #0
 80052ea:	463e      	mov	r6, r7
				HAL_GPIO_TogglePin(LED_ERR_1_PORT, LED_ERR_1_PIN);
 80052ec:	4d25      	ldr	r5, [pc, #148]	; (8005384 <indicationTask+0xa0>)
		switch(controllerState.state){
 80052ee:	7abb      	ldrb	r3, [r7, #10]
 80052f0:	2b05      	cmp	r3, #5
 80052f2:	d80c      	bhi.n	800530e <indicationTask+0x2a>
 80052f4:	e8df f003 	tbb	[pc, r3]
 80052f8:	10311c03 	.word	0x10311c03
 80052fc:	1814      	.short	0x1814
				idle_led_blynk(i);
 80052fe:	4620      	mov	r0, r4
				i++;
 8005300:	3401      	adds	r4, #1
 8005302:	b2e4      	uxtb	r4, r4
				idle_led_blynk(i);
 8005304:	f7ff ff5c 	bl	80051c0 <idle_led_blynk>
				if (i > 9) i = 0;
 8005308:	2c0a      	cmp	r4, #10
 800530a:	bf28      	it	cs
 800530c:	2400      	movcs	r4, #0
		vTaskDelay(500);
 800530e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005312:	f7ff f991 	bl	8004638 <vTaskDelay>
		switch(controllerState.state){
 8005316:	e7ea      	b.n	80052ee <indicationTask+0xa>
				testing_led_blynk(controllerState.currentStep);
 8005318:	7af0      	ldrb	r0, [r6, #11]
 800531a:	f7ff fdf3 	bl	8004f04 <testing_led_blynk>
				break;
 800531e:	e7f6      	b.n	800530e <indicationTask+0x2a>
				aligning_led_blynk(controllerState.currentStep);
 8005320:	7af0      	ldrb	r0, [r6, #11]
 8005322:	f7ff fe91 	bl	8005048 <aligning_led_blynk>
				break;
 8005326:	e7f2      	b.n	800530e <indicationTask+0x2a>
				step_error_led_blynk(controllerState.currentStep);
 8005328:	7af0      	ldrb	r0, [r6, #11]
 800532a:	f7ff fee1 	bl	80050f0 <step_error_led_blynk>
				break;
 800532e:	e7ee      	b.n	800530e <indicationTask+0x2a>
				HAL_GPIO_TogglePin(LED_STEP_1_PORT, LED_STEP_1_PIN);
 8005330:	2110      	movs	r1, #16
 8005332:	4628      	mov	r0, r5
 8005334:	f7fc fdad 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_2_PORT, LED_STEP_2_PIN);
 8005338:	2120      	movs	r1, #32
 800533a:	4628      	mov	r0, r5
 800533c:	f7fc fda9 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_3_PORT, LED_STEP_3_PIN);
 8005340:	2140      	movs	r1, #64	; 0x40
 8005342:	4628      	mov	r0, r5
 8005344:	f7fc fda5 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_4_PORT, LED_STEP_4_PIN);
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	4628      	mov	r0, r5
 800534c:	f7fc fda1 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_STEP_5_PORT, LED_STEP_5_PIN);
 8005350:	2110      	movs	r1, #16
 8005352:	480d      	ldr	r0, [pc, #52]	; (8005388 <indicationTask+0xa4>)
				HAL_GPIO_TogglePin(LED_ERR_5_PORT, LED_ERR_5_PIN);
 8005354:	f7fc fd9d 	bl	8001e92 <HAL_GPIO_TogglePin>
				break;
 8005358:	e7d9      	b.n	800530e <indicationTask+0x2a>
				HAL_GPIO_TogglePin(LED_ERR_1_PORT, LED_ERR_1_PIN);
 800535a:	2108      	movs	r1, #8
 800535c:	4628      	mov	r0, r5
 800535e:	f7fc fd98 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_2_PORT, LED_ERR_2_PIN);
 8005362:	2120      	movs	r1, #32
 8005364:	4808      	ldr	r0, [pc, #32]	; (8005388 <indicationTask+0xa4>)
 8005366:	f7fc fd94 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_3_PORT, LED_ERR_3_PIN);
 800536a:	2104      	movs	r1, #4
 800536c:	4807      	ldr	r0, [pc, #28]	; (800538c <indicationTask+0xa8>)
 800536e:	f7fc fd90 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_4_PORT, LED_ERR_4_PIN);
 8005372:	2102      	movs	r1, #2
 8005374:	4805      	ldr	r0, [pc, #20]	; (800538c <indicationTask+0xa8>)
 8005376:	f7fc fd8c 	bl	8001e92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_ERR_5_PORT, LED_ERR_5_PIN);
 800537a:	2101      	movs	r1, #1
 800537c:	4803      	ldr	r0, [pc, #12]	; (800538c <indicationTask+0xa8>)
 800537e:	e7e9      	b.n	8005354 <indicationTask+0x70>
 8005380:	20005364 	.word	0x20005364
 8005384:	40010800 	.word	0x40010800
 8005388:	40011000 	.word	0x40011000
 800538c:	40010c00 	.word	0x40010c00

08005390 <mWrite_flash>:
#include "structures.h"
#include "flashFunctions.h"

#define CONTROLLER_LENGTH_WORDS		(sizeof(testProgram)	/ 4)

void mWrite_flash(void){
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	b086      	sub	sp, #24
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t pageError;
	uint16_t i;

	HAL_FLASH_Unlock();
 8005394:	f7fc fb92 	bl	8001abc <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8005398:	2300      	movs	r3, #0
 800539a:	9302      	str	r3, [sp, #8]
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
	EraseInitStruct.NbPages = 1;
 800539c:	2301      	movs	r3, #1
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 800539e:	4c0b      	ldr	r4, [pc, #44]	; (80053cc <mWrite_flash+0x3c>)

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80053a0:	a901      	add	r1, sp, #4
 80053a2:	a802      	add	r0, sp, #8
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 80053a4:	9404      	str	r4, [sp, #16]
	EraseInitStruct.NbPages = 1;
 80053a6:	9305      	str	r3, [sp, #20]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80053a8:	f7fc fc38 	bl	8001c1c <HAL_FLASHEx_Erase>
	}

	uint32_t *source_addr = (void *)&testProgram;
	uint32_t *dest_addr = (uint32_t *) SETTINGS_FLASH_PAGE_ADDR;
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr);
 80053ac:	4e08      	ldr	r6, [pc, #32]	; (80053d0 <mWrite_flash+0x40>)
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80053ae:	4d09      	ldr	r5, [pc, #36]	; (80053d4 <mWrite_flash+0x44>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr);
 80053b0:	59a2      	ldr	r2, [r4, r6]
 80053b2:	4621      	mov	r1, r4
 80053b4:	2300      	movs	r3, #0
 80053b6:	2002      	movs	r0, #2
//		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
//			//print_debug("Write Flash Error\n");
//			asm()
//		}
		source_addr++;
		dest_addr++;
 80053b8:	3404      	adds	r4, #4
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr);
 80053ba:	f7fc fbc5 	bl	8001b48 <HAL_FLASH_Program>
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80053be:	42ac      	cmp	r4, r5
 80053c0:	d1f6      	bne.n	80053b0 <mWrite_flash+0x20>
	}

	HAL_FLASH_Lock();
 80053c2:	f7fc fb8d 	bl	8001ae0 <HAL_FLASH_Lock>
	//print_debug("Flash ok\n");
}
 80053c6:	b006      	add	sp, #24
 80053c8:	bd70      	pop	{r4, r5, r6, pc}
 80053ca:	bf00      	nop
 80053cc:	0801f800 	.word	0x0801f800
 80053d0:	17fe5b7c 	.word	0x17fe5b7c
 80053d4:	0801f824 	.word	0x0801f824

080053d8 <mRead_flash>:

void mRead_flash(void){
	//print_debug("reading flash\n");

	uint32_t *source_addr = (uint32_t *)SETTINGS_FLASH_PAGE_ADDR;
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <mRead_flash+0x14>)
    uint32_t *dest_addr = (void*)&testProgram;

    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
        *dest_addr = *(__IO uint32_t*)source_addr;
 80053da:	4905      	ldr	r1, [pc, #20]	; (80053f0 <mRead_flash+0x18>)
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80053dc:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <mRead_flash+0x1c>)
        *dest_addr = *(__IO uint32_t*)source_addr;
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	5058      	str	r0, [r3, r1]
        source_addr++;
 80053e2:	3304      	adds	r3, #4
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d1fa      	bne.n	80053de <mRead_flash+0x6>
        dest_addr++;
    }

   // print_debug("Flash read\n");
}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	0801f800 	.word	0x0801f800
 80053f0:	17fe5b7c 	.word	0x17fe5b7c
 80053f4:	0801f824 	.word	0x0801f824

080053f8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <vApplicationGetIdleTaskMemory+0x10>)
 80053fa:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <vApplicationGetIdleTaskMemory+0x14>)
 80053fe:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	200052e0 	.word	0x200052e0
 800540c:	200050e0 	.word	0x200050e0

08005410 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005410:	2238      	movs	r2, #56	; 0x38
{
 8005412:	b530      	push	{r4, r5, lr}
 8005414:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005416:	eb0d 0002 	add.w	r0, sp, r2
 800541a:	2100      	movs	r1, #0
 800541c:	f000 fee9 	bl	80061f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005420:	2214      	movs	r2, #20
 8005422:	2100      	movs	r1, #0
 8005424:	a801      	add	r0, sp, #4
 8005426:	f000 fee4 	bl	80061f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800542a:	2220      	movs	r2, #32
 800542c:	2100      	movs	r1, #0
 800542e:	a806      	add	r0, sp, #24
 8005430:	f000 fedf 	bl	80061f2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005438:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800543a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800543c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800543e:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005440:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005444:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005446:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005448:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800544a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800544c:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800544e:	f7fc fd27 	bl	8001ea0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005452:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005454:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005458:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800545a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800545c:	4621      	mov	r1, r4
 800545e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005460:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005462:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005464:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005466:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005468:	f7fc ff7c 	bl	8002364 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800546c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005470:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005472:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005474:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005476:	f7fd f833 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800547a:	4b02      	ldr	r3, [pc, #8]	; (8005484 <SystemClock_Config+0x74>)
 800547c:	601d      	str	r5, [r3, #0]
}
 800547e:	b01d      	add	sp, #116	; 0x74
 8005480:	bd30      	pop	{r4, r5, pc}
 8005482:	bf00      	nop
 8005484:	42420070 	.word	0x42420070

08005488 <main>:
{
 8005488:	b500      	push	{lr}
 800548a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800548c:	f7fb ff94 	bl	80013b8 <HAL_Init>
  SystemClock_Config();
 8005490:	f7ff ffbe 	bl	8005410 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005494:	2210      	movs	r2, #16
 8005496:	2100      	movs	r1, #0
 8005498:	eb0d 0002 	add.w	r0, sp, r2
 800549c:	f000 fea9 	bl	80061f2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a0:	4b64      	ldr	r3, [pc, #400]	; (8005634 <main+0x1ac>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80054a2:	f648 11fe 	movw	r1, #35326	; 0x89fe
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80054a8:	4863      	ldr	r0, [pc, #396]	; (8005638 <main+0x1b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054aa:	f042 0210 	orr.w	r2, r2, #16
 80054ae:	619a      	str	r2, [r3, #24]
 80054b0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054b2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054b4:	f002 0210 	and.w	r2, r2, #16
 80054b8:	9200      	str	r2, [sp, #0]
 80054ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054bc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054be:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054c0:	f042 0220 	orr.w	r2, r2, #32
 80054c4:	619a      	str	r2, [r3, #24]
 80054c6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c8:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ca:	f002 0220 	and.w	r2, r2, #32
 80054ce:	9201      	str	r2, [sp, #4]
 80054d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	f042 0204 	orr.w	r2, r2, #4
 80054d8:	619a      	str	r2, [r3, #24]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	f002 0204 	and.w	r2, r2, #4
 80054e0:	9202      	str	r2, [sp, #8]
 80054e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	f042 0208 	orr.w	r2, r2, #8
 80054ea:	619a      	str	r2, [r3, #24]
 80054ec:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80054ee:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	9303      	str	r3, [sp, #12]
 80054f6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80054f8:	f7fc fcc6 	bl	8001e88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10 
 80054fc:	2200      	movs	r2, #0
 80054fe:	f641 6130 	movw	r1, #7728	; 0x1e30
 8005502:	484e      	ldr	r0, [pc, #312]	; (800563c <main+0x1b4>)
 8005504:	f7fc fcc0 	bl	8001e88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005508:	2200      	movs	r2, #0
 800550a:	217f      	movs	r1, #127	; 0x7f
 800550c:	484c      	ldr	r0, [pc, #304]	; (8005640 <main+0x1b8>)
 800550e:	f7fc fcbb 	bl	8001e88 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005512:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005516:	a904      	add	r1, sp, #16
 8005518:	4848      	ldr	r0, [pc, #288]	; (800563c <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800551a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800551c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800551e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005520:	f7fc fbca 	bl	8001cb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005524:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005526:	a904      	add	r1, sp, #16
 8005528:	4844      	ldr	r0, [pc, #272]	; (800563c <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800552a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800552c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005530:	f7fc fbc2 	bl	8001cb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8005534:	f648 13fe 	movw	r3, #35326	; 0x89fe
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005538:	a904      	add	r1, sp, #16
 800553a:	483f      	ldr	r0, [pc, #252]	; (8005638 <main+0x1b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800553c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800553e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005540:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005542:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005544:	f7fc fbb8 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10 
 8005548:	f641 6330 	movw	r3, #7728	; 0x1e30
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800554c:	a904      	add	r1, sp, #16
 800554e:	483b      	ldr	r0, [pc, #236]	; (800563c <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10 
 8005550:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005552:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005554:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005558:	f7fc fbae 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800555c:	237f      	movs	r3, #127	; 0x7f
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800555e:	a904      	add	r1, sp, #16
 8005560:	4837      	ldr	r0, [pc, #220]	; (8005640 <main+0x1b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8005562:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005564:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005566:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005568:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800556a:	f7fc fba5 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800556e:	f44f 7360 	mov.w	r3, #896	; 0x380
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005572:	a904      	add	r1, sp, #16
 8005574:	4832      	ldr	r0, [pc, #200]	; (8005640 <main+0x1b8>)
  hadc1.Instance = ADC1;
 8005576:	4d33      	ldr	r5, [pc, #204]	; (8005644 <main+0x1bc>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005578:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800557a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800557c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557e:	f7fc fb9b 	bl	8001cb8 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8005582:	4b31      	ldr	r3, [pc, #196]	; (8005648 <main+0x1c0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005584:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8005586:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005588:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 800558c:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800558e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005590:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005592:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005594:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005596:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005598:	9404      	str	r4, [sp, #16]
 800559a:	9405      	str	r4, [sp, #20]
 800559c:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800559e:	f7fc f8ed 	bl	800177c <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80055a2:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055a4:	a904      	add	r1, sp, #16
 80055a6:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80055a8:	9605      	str	r6, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80055aa:	9306      	str	r3, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_0;
 80055ac:	9404      	str	r4, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055ae:	f7fb ffa1 	bl	80014f4 <HAL_ADC_ConfigChannel>
  htim6.Init.Prescaler = 72;
 80055b2:	2348      	movs	r3, #72	; 0x48
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <main+0x1c4>)
  htim6.Instance = TIM6;
 80055b6:	4d26      	ldr	r5, [pc, #152]	; (8005650 <main+0x1c8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055b8:	9404      	str	r4, [sp, #16]
  htim6.Init.Prescaler = 72;
 80055ba:	e885 000c 	stmia.w	r5, {r2, r3}
  htim6.Init.Period = 4999;
 80055be:	f241 3387 	movw	r3, #4999	; 0x1387
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80055c2:	4628      	mov	r0, r5
  htim6.Init.Period = 4999;
 80055c4:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055c6:	9405      	str	r4, [sp, #20]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055c8:	60ac      	str	r4, [r5, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ca:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80055cc:	f7fd f952 	bl	8002874 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055d0:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80055d2:	a904      	add	r1, sp, #16
 80055d4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055d6:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055d8:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80055da:	f7fd f965 	bl	80028a8 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 38200;
 80055de:	f249 5338 	movw	r3, #38200	; 0x9538
  huart1.Instance = USART1;
 80055e2:	481c      	ldr	r0, [pc, #112]	; (8005654 <main+0x1cc>)
  huart1.Init.BaudRate = 38200;
 80055e4:	491c      	ldr	r1, [pc, #112]	; (8005658 <main+0x1d0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055e6:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 38200;
 80055e8:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055ec:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055ee:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055f0:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055f2:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055f4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055f6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055f8:	f7fd f9be 	bl	8002978 <HAL_UART_Init>
  htim7.Init.Prescaler = 71;
 80055fc:	2347      	movs	r3, #71	; 0x47
  htim7.Instance = TIM7;
 80055fe:	4e17      	ldr	r6, [pc, #92]	; (800565c <main+0x1d4>)
  htim7.Init.Prescaler = 71;
 8005600:	4817      	ldr	r0, [pc, #92]	; (8005660 <main+0x1d8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005602:	9404      	str	r4, [sp, #16]
  htim7.Init.Prescaler = 71;
 8005604:	e886 0009 	stmia.w	r6, {r0, r3}
  htim7.Init.Period = 49;
 8005608:	2331      	movs	r3, #49	; 0x31
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800560a:	4630      	mov	r0, r6
  htim7.Init.Period = 49;
 800560c:	60f3      	str	r3, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800560e:	9405      	str	r4, [sp, #20]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005610:	60b4      	str	r4, [r6, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005612:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005614:	f7fd f92e 	bl	8002874 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005618:	a904      	add	r1, sp, #16
 800561a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800561c:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800561e:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005620:	f7fd f942 	bl	80028a8 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim6);
 8005624:	4628      	mov	r0, r5
 8005626:	f7fd f819 	bl	800265c <HAL_TIM_Base_Start_IT>
  controller_init();
 800562a:	f7ff fbef 	bl	8004e0c <controller_init>
  osKernelStart();
 800562e:	f7fd ffcd 	bl	80035cc <osKernelStart>
 8005632:	e7fe      	b.n	8005632 <main+0x1aa>
 8005634:	40021000 	.word	0x40021000
 8005638:	40010800 	.word	0x40010800
 800563c:	40011000 	.word	0x40011000
 8005640:	40010c00 	.word	0x40010c00
 8005644:	20005524 	.word	0x20005524
 8005648:	40012400 	.word	0x40012400
 800564c:	40001000 	.word	0x40001000
 8005650:	20005594 	.word	0x20005594
 8005654:	20005554 	.word	0x20005554
 8005658:	40013800 	.word	0x40013800
 800565c:	200055d4 	.word	0x200055d4
 8005660:	40001400 	.word	0x40001400

08005664 <HAL_ADC_ConvCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8005664:	b510      	push	{r4, lr}
 8005666:	4604      	mov	r4, r0

	adcRawData = HAL_ADC_GetValue(hadc1);
 8005668:	f7fb feca 	bl	8001400 <HAL_ADC_GetValue>
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <HAL_ADC_ConvCpltCallback+0x18>)
 800566e:	8018      	strh	r0, [r3, #0]
	HAL_ADC_Stop_IT(hadc1);
 8005670:	4620      	mov	r0, r4

}
 8005672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Stop_IT(hadc1);
 8005676:	f7fc b901 	b.w	800187c <HAL_ADC_Stop_IT>
 800567a:	bf00      	nop
 800567c:	20005334 	.word	0x20005334

08005680 <__critical_enter>:

void __critical_enter(void){
	portENTER_CRITICAL();
 8005680:	f7fe b840 	b.w	8003704 <vPortEnterCritical>

08005684 <__critical_exit>:
}
void __critical_exit(void){
	portEXIT_CRITICAL();
 8005684:	f7fe b860 	b.w	8003748 <vPortExitCritical>

08005688 <xModbusPollTask>:

uint8_t needToWriteFlash = 0;

uint16_t modbusArray[REG_TEST_PROGRAM_NREGS] = {0};

void xModbusPollTask(void *arguments){
 8005688:	b508      	push	{r3, lr}
	for(;;){
		( void )eMBPoll(  );
		vTaskDelay(50);
		if (needToWriteFlash){
 800568a:	4c08      	ldr	r4, [pc, #32]	; (80056ac <xModbusPollTask+0x24>)
			controllerState.state = IDLE;
 800568c:	4e08      	ldr	r6, [pc, #32]	; (80056b0 <xModbusPollTask+0x28>)
		( void )eMBPoll(  );
 800568e:	f7fd fce9 	bl	8003064 <eMBPoll>
		vTaskDelay(50);
 8005692:	2032      	movs	r0, #50	; 0x32
 8005694:	f7fe ffd0 	bl	8004638 <vTaskDelay>
		if (needToWriteFlash){
 8005698:	7823      	ldrb	r3, [r4, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f7      	beq.n	800568e <xModbusPollTask+0x6>
			controllerState.state = IDLE;
 800569e:	2500      	movs	r5, #0
 80056a0:	72b5      	strb	r5, [r6, #10]
			mWrite_flash();
 80056a2:	f7ff fe75 	bl	8005390 <mWrite_flash>
			needToWriteFlash = 0;
 80056a6:	7025      	strb	r5, [r4, #0]
 80056a8:	e7f1      	b.n	800568e <xModbusPollTask+0x6>
 80056aa:	bf00      	nop
 80056ac:	2000535a 	.word	0x2000535a
 80056b0:	20005364 	.word	0x20005364

080056b4 <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int8_t         iRegIndex;

    if( ( usAddress == REG_STATE_START ) && ( usAddress + usNRegs <= REG_STATE_START + REG_STATE_NREGS))
 80056b4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
{
 80056b8:	b530      	push	{r4, r5, lr}
    if( ( usAddress == REG_STATE_START ) && ( usAddress + usNRegs <= REG_STATE_START + REG_STATE_NREGS))
 80056ba:	d11b      	bne.n	80056f4 <eMBRegInputCB+0x40>
 80056bc:	2a03      	cmp	r2, #3
 80056be:	dc19      	bgt.n	80056f4 <eMBRegInputCB+0x40>
    {
        iRegIndex = (int8_t)( usAddress - REG_STATE_START );
        controllerState.dataToSend[1] = controllerState.currentStep;
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <eMBRegInputCB+0x44>)
 80056c2:	4604      	mov	r4, r0
 80056c4:	7ad9      	ldrb	r1, [r3, #11]
        controllerState.dataToSend[2] = (uint16_t)controllerState.state;
        while( usNRegs > 0 )
 80056c6:	4610      	mov	r0, r2
        controllerState.dataToSend[1] = controllerState.currentStep;
 80056c8:	8219      	strh	r1, [r3, #16]
        controllerState.dataToSend[2] = (uint16_t)controllerState.state;
 80056ca:	7a99      	ldrb	r1, [r3, #10]
 80056cc:	8259      	strh	r1, [r3, #18]
 80056ce:	4619      	mov	r1, r3
 80056d0:	1a13      	subs	r3, r2, r0
 80056d2:	b25b      	sxtb	r3, r3
 80056d4:	3402      	adds	r4, #2
        while( usNRegs > 0 )
 80056d6:	b900      	cbnz	r0, 80056da <eMBRegInputCB+0x26>
 80056d8:	bd30      	pop	{r4, r5, pc}
        {
            *pucRegBuffer++ =
                ( unsigned char )( controllerState.dataToSend[iRegIndex] >> 8 );
 80056da:	3304      	adds	r3, #4
 80056dc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80056e0:	88dd      	ldrh	r5, [r3, #6]
            *pucRegBuffer++ =
                ( unsigned char )( controllerState.dataToSend[iRegIndex] & 0xFF );
            iRegIndex++;
            usNRegs--;
 80056e2:	3801      	subs	r0, #1
                ( unsigned char )( controllerState.dataToSend[iRegIndex] >> 8 );
 80056e4:	0a2d      	lsrs	r5, r5, #8
 80056e6:	f804 5c02 	strb.w	r5, [r4, #-2]
                ( unsigned char )( controllerState.dataToSend[iRegIndex] & 0xFF );
 80056ea:	88db      	ldrh	r3, [r3, #6]
            usNRegs--;
 80056ec:	b280      	uxth	r0, r0
                ( unsigned char )( controllerState.dataToSend[iRegIndex] & 0xFF );
 80056ee:	f804 3c01 	strb.w	r3, [r4, #-1]
 80056f2:	e7ed      	b.n	80056d0 <eMBRegInputCB+0x1c>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80056f4:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80056f6:	bd30      	pop	{r4, r5, pc}
 80056f8:	20005364 	.word	0x20005364

080056fc <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 80056fc:	b570      	push	{r4, r5, r6, lr}
    eMBErrorCode    eStatus = MB_ENOERR;
    int8_t         iRegIndex;

    modbusArray[0] = testProgram.testPressure[0];
 80056fe:	4c5b      	ldr	r4, [pc, #364]	; (800586c <eMBRegHoldingCB+0x170>)
 8005700:	4d5b      	ldr	r5, [pc, #364]	; (8005870 <eMBRegHoldingCB+0x174>)
 8005702:	8826      	ldrh	r6, [r4, #0]

    modbusArray[15] = testProgram.delayAfterAligningSeconds;
    modbusArray[16] = testProgram.checkingDelaySeconds;
    modbusArray[17] = testProgram.maxNumberOfBadPressure;

    if( ( usAddress == REG_TEST_PROGRAM_START ) && ( usAddress + usNRegs <= REG_TEST_PROGRAM_START + REG_TEST_PROGRAM_NREGS ) )
 8005704:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
    modbusArray[0] = testProgram.testPressure[0];
 8005708:	802e      	strh	r6, [r5, #0]
    modbusArray[1] = testProgram.testTime[0];
 800570a:	8966      	ldrh	r6, [r4, #10]
 800570c:	806e      	strh	r6, [r5, #2]
    modbusArray[2] = testProgram.testDiffPressure[0];
 800570e:	8aa6      	ldrh	r6, [r4, #20]
 8005710:	80ae      	strh	r6, [r5, #4]
    modbusArray[3] = testProgram.testPressure[1];
 8005712:	8866      	ldrh	r6, [r4, #2]
 8005714:	80ee      	strh	r6, [r5, #6]
    modbusArray[4] = testProgram.testTime[1];
 8005716:	89a6      	ldrh	r6, [r4, #12]
 8005718:	812e      	strh	r6, [r5, #8]
    modbusArray[5] = testProgram.testDiffPressure[1];
 800571a:	8ae6      	ldrh	r6, [r4, #22]
 800571c:	816e      	strh	r6, [r5, #10]
    modbusArray[6] = testProgram.testPressure[2];
 800571e:	88a6      	ldrh	r6, [r4, #4]
 8005720:	81ae      	strh	r6, [r5, #12]
    modbusArray[7] = testProgram.testTime[2];
 8005722:	89e6      	ldrh	r6, [r4, #14]
 8005724:	81ee      	strh	r6, [r5, #14]
    modbusArray[8] = testProgram.testDiffPressure[2];
 8005726:	8b26      	ldrh	r6, [r4, #24]
 8005728:	822e      	strh	r6, [r5, #16]
    modbusArray[9] = testProgram.testPressure[3];
 800572a:	88e6      	ldrh	r6, [r4, #6]
 800572c:	826e      	strh	r6, [r5, #18]
    modbusArray[10] = testProgram.testTime[3];
 800572e:	8a26      	ldrh	r6, [r4, #16]
 8005730:	82ae      	strh	r6, [r5, #20]
    modbusArray[11] = testProgram.testDiffPressure[3];
 8005732:	8b66      	ldrh	r6, [r4, #26]
 8005734:	82ee      	strh	r6, [r5, #22]
    modbusArray[12] = testProgram.testPressure[4];
 8005736:	8926      	ldrh	r6, [r4, #8]
 8005738:	832e      	strh	r6, [r5, #24]
    modbusArray[13] = testProgram.testTime[4];
 800573a:	8a66      	ldrh	r6, [r4, #18]
 800573c:	836e      	strh	r6, [r5, #26]
    modbusArray[14] = testProgram.testDiffPressure[4];
 800573e:	8ba6      	ldrh	r6, [r4, #28]
 8005740:	83ae      	strh	r6, [r5, #28]
    modbusArray[15] = testProgram.delayAfterAligningSeconds;
 8005742:	8be6      	ldrh	r6, [r4, #30]
 8005744:	83ee      	strh	r6, [r5, #30]
    modbusArray[16] = testProgram.checkingDelaySeconds;
 8005746:	8c66      	ldrh	r6, [r4, #34]	; 0x22
 8005748:	842e      	strh	r6, [r5, #32]
    modbusArray[17] = testProgram.maxNumberOfBadPressure;
 800574a:	8c26      	ldrh	r6, [r4, #32]
 800574c:	846e      	strh	r6, [r5, #34]	; 0x22
    if( ( usAddress == REG_TEST_PROGRAM_START ) && ( usAddress + usNRegs <= REG_TEST_PROGRAM_START + REG_TEST_PROGRAM_NREGS ) )
 800574e:	f040 808a 	bne.w	8005866 <eMBRegHoldingCB+0x16a>
 8005752:	2a12      	cmp	r2, #18
 8005754:	f300 8087 	bgt.w	8005866 <eMBRegHoldingCB+0x16a>
    {
        iRegIndex = ( int )( usAddress - REG_TEST_PROGRAM_START );

        switch (eMode){
 8005758:	b11b      	cbz	r3, 8005762 <eMBRegHoldingCB+0x66>
 800575a:	2b01      	cmp	r3, #1
 800575c:	d014      	beq.n	8005788 <eMBRegHoldingCB+0x8c>
    eMBErrorCode    eStatus = MB_ENOERR;
 800575e:	2000      	movs	r0, #0
    }
    else{
    	eStatus = MB_ENOREG;
    }
    return eStatus;
}
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	4601      	mov	r1, r0
        switch (eMode){
 8005764:	4610      	mov	r0, r2
 8005766:	1a13      	subs	r3, r2, r0
 8005768:	b25b      	sxtb	r3, r3
 800576a:	3102      	adds	r1, #2
		        while( usNRegs > 0 )
 800576c:	b900      	cbnz	r0, 8005770 <eMBRegHoldingCB+0x74>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
		            *pucRegBuffer++ = ( unsigned char )( modbusArray[iRegIndex] >> 8 );
 8005770:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8005774:	0a24      	lsrs	r4, r4, #8
 8005776:	f801 4c02 	strb.w	r4, [r1, #-2]
		            *pucRegBuffer++ = ( unsigned char )( modbusArray[iRegIndex] & 0xFF );
 800577a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800577e:	f801 3c01 	strb.w	r3, [r1, #-1]
		            usNRegs--;
 8005782:	1e43      	subs	r3, r0, #1
 8005784:	b298      	uxth	r0, r3
 8005786:	e7ee      	b.n	8005766 <eMBRegHoldingCB+0x6a>
				if (usNRegs > 17){
 8005788:	2a11      	cmp	r2, #17
 800578a:	d968      	bls.n	800585e <eMBRegHoldingCB+0x162>
					testProgram.testPressure[0] = (uint16_t) ((*pucRegBuffer++) << 8);
 800578c:	7803      	ldrb	r3, [r0, #0]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	8023      	strh	r3, [r4, #0]
					testProgram.testPressure[0] += *pucRegBuffer++;
 8005792:	7842      	ldrb	r2, [r0, #1]
 8005794:	4413      	add	r3, r2
 8005796:	8023      	strh	r3, [r4, #0]
					testProgram.testTime[0] = (uint16_t) ((*pucRegBuffer++) << 8);
 8005798:	7883      	ldrb	r3, [r0, #2]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	8163      	strh	r3, [r4, #10]
					testProgram.testTime[0] += *pucRegBuffer++;
 800579e:	78c2      	ldrb	r2, [r0, #3]
 80057a0:	4413      	add	r3, r2
 80057a2:	8163      	strh	r3, [r4, #10]
					testProgram.testDiffPressure[0] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057a4:	7903      	ldrb	r3, [r0, #4]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	82a3      	strh	r3, [r4, #20]
					testProgram.testDiffPressure[0] += *pucRegBuffer++;
 80057aa:	7942      	ldrb	r2, [r0, #5]
 80057ac:	4413      	add	r3, r2
 80057ae:	82a3      	strh	r3, [r4, #20]
					testProgram.testPressure[1] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057b0:	7982      	ldrb	r2, [r0, #6]
					testProgram.testPressure[1] += *pucRegBuffer++;
 80057b2:	79c3      	ldrb	r3, [r0, #7]
 80057b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80057b8:	8063      	strh	r3, [r4, #2]
					testProgram.testTime[1] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057ba:	7a03      	ldrb	r3, [r0, #8]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	81a3      	strh	r3, [r4, #12]
					testProgram.testTime[1] += *pucRegBuffer++;
 80057c0:	7a42      	ldrb	r2, [r0, #9]
 80057c2:	4413      	add	r3, r2
 80057c4:	81a3      	strh	r3, [r4, #12]
					testProgram.testDiffPressure[1] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057c6:	7a83      	ldrb	r3, [r0, #10]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	82e3      	strh	r3, [r4, #22]
					testProgram.testDiffPressure[1] += *pucRegBuffer++;
 80057cc:	7ac2      	ldrb	r2, [r0, #11]
 80057ce:	4413      	add	r3, r2
 80057d0:	82e3      	strh	r3, [r4, #22]
					testProgram.testPressure[2] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057d2:	7b02      	ldrb	r2, [r0, #12]
					testProgram.testPressure[2] += *pucRegBuffer++;
 80057d4:	7b43      	ldrb	r3, [r0, #13]
 80057d6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80057da:	80a3      	strh	r3, [r4, #4]
					testProgram.testTime[2] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057dc:	7b83      	ldrb	r3, [r0, #14]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	81e3      	strh	r3, [r4, #14]
					testProgram.testTime[2] += *pucRegBuffer++;
 80057e2:	7bc2      	ldrb	r2, [r0, #15]
 80057e4:	4413      	add	r3, r2
 80057e6:	81e3      	strh	r3, [r4, #14]
					testProgram.testDiffPressure[2] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057e8:	7c03      	ldrb	r3, [r0, #16]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	8323      	strh	r3, [r4, #24]
					testProgram.testDiffPressure[2] += *pucRegBuffer++;
 80057ee:	7c42      	ldrb	r2, [r0, #17]
 80057f0:	4413      	add	r3, r2
 80057f2:	8323      	strh	r3, [r4, #24]
					testProgram.testPressure[3] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057f4:	7c82      	ldrb	r2, [r0, #18]
					testProgram.testPressure[3] += *pucRegBuffer++;
 80057f6:	7cc3      	ldrb	r3, [r0, #19]
 80057f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80057fc:	80e3      	strh	r3, [r4, #6]
					testProgram.testTime[3] = (uint16_t) ((*pucRegBuffer++) << 8);
 80057fe:	7d02      	ldrb	r2, [r0, #20]
					testProgram.testTime[3] += *pucRegBuffer++;
 8005800:	7d43      	ldrb	r3, [r0, #21]
 8005802:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005806:	8223      	strh	r3, [r4, #16]
					testProgram.testDiffPressure[3] = (uint16_t) ((*pucRegBuffer++) << 8);
 8005808:	7d83      	ldrb	r3, [r0, #22]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	8363      	strh	r3, [r4, #26]
					testProgram.testDiffPressure[3] += *pucRegBuffer++;
 800580e:	7dc2      	ldrb	r2, [r0, #23]
 8005810:	4413      	add	r3, r2
 8005812:	8363      	strh	r3, [r4, #26]
					testProgram.testPressure[4] = (uint16_t) ((*pucRegBuffer++) << 8);
 8005814:	7e02      	ldrb	r2, [r0, #24]
					testProgram.testPressure[4] += *pucRegBuffer++;
 8005816:	7e43      	ldrb	r3, [r0, #25]
 8005818:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800581c:	8123      	strh	r3, [r4, #8]
					testProgram.testTime[4] = (uint16_t) ((*pucRegBuffer++) << 8);
 800581e:	7e82      	ldrb	r2, [r0, #26]
					testProgram.testTime[4] += *pucRegBuffer++;
 8005820:	7ec3      	ldrb	r3, [r0, #27]
 8005822:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005826:	8263      	strh	r3, [r4, #18]
					testProgram.testDiffPressure[4] = (uint16_t) ((*pucRegBuffer++) << 8);
 8005828:	7f03      	ldrb	r3, [r0, #28]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	83a3      	strh	r3, [r4, #28]
					testProgram.testDiffPressure[4] += *pucRegBuffer++;
 800582e:	7f42      	ldrb	r2, [r0, #29]
 8005830:	4413      	add	r3, r2
 8005832:	83a3      	strh	r3, [r4, #28]
					testProgram.delayAfterAligningSeconds = (uint16_t) ((*pucRegBuffer++) << 8);
 8005834:	7f83      	ldrb	r3, [r0, #30]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	83e3      	strh	r3, [r4, #30]
					testProgram.delayAfterAligningSeconds += *pucRegBuffer++;
 800583a:	7fc2      	ldrb	r2, [r0, #31]
 800583c:	4413      	add	r3, r2
 800583e:	83e3      	strh	r3, [r4, #30]
					testProgram.checkingDelaySeconds = (uint16_t) ((*pucRegBuffer++) << 8);
 8005840:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	8463      	strh	r3, [r4, #34]	; 0x22
					testProgram.checkingDelaySeconds += *pucRegBuffer++;
 8005848:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800584c:	4413      	add	r3, r2
 800584e:	8463      	strh	r3, [r4, #34]	; 0x22
					testProgram.maxNumberOfBadPressure = (uint16_t) ((*pucRegBuffer++) << 8);
 8005850:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
					testProgram.maxNumberOfBadPressure += *pucRegBuffer++;
 8005854:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005858:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800585c:	8423      	strh	r3, [r4, #32]
				needToWriteFlash = 1;
 800585e:	2201      	movs	r2, #1
 8005860:	4b04      	ldr	r3, [pc, #16]	; (8005874 <eMBRegHoldingCB+0x178>)
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e77b      	b.n	800575e <eMBRegHoldingCB+0x62>
    	eStatus = MB_ENOREG;
 8005866:	2001      	movs	r0, #1
 8005868:	bd70      	pop	{r4, r5, r6, pc}
 800586a:	bf00      	nop
 800586c:	2000537c 	.word	0x2000537c
 8005870:	20005336 	.word	0x20005336
 8005874:	2000535a 	.word	0x2000535a

08005878 <eMBRegCoilsCB>:
    eMBErrorCode    eStatus = MB_ENOERR;
    short           iNCoils = ( short )usNCoils;
    unsigned short  usBitOffset;

    /* Check if we have registers mapped at this block. */
    if( ( usAddress >= REG_COILS_START ) &&
 8005878:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
{
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ( usAddress >= REG_COILS_START ) &&
 800587e:	d33e      	bcc.n	80058fe <eMBRegCoilsCB+0x86>
        ( usAddress + usNCoils <= REG_COILS_START + REG_COILS_SIZE ) )
 8005880:	188c      	adds	r4, r1, r2
    if( ( usAddress >= REG_COILS_START ) &&
 8005882:	f5b4 6ffc 	cmp.w	r4, #2016	; 0x7e0
 8005886:	dc3a      	bgt.n	80058fe <eMBRegCoilsCB+0x86>
    {
        usBitOffset = ( unsigned short )( usAddress - REG_COILS_START );
 8005888:	f5a1 61fa 	sub.w	r1, r1, #2000	; 0x7d0
    short           iNCoils = ( short )usNCoils;
 800588c:	b214      	sxth	r4, r2
        usBitOffset = ( unsigned short )( usAddress - REG_COILS_START );
 800588e:	b28d      	uxth	r5, r1
        switch ( eMode )
 8005890:	b18b      	cbz	r3, 80058b6 <eMBRegCoilsCB+0x3e>
 8005892:	2b01      	cmp	r3, #1
 8005894:	d113      	bne.n	80058be <eMBRegCoilsCB+0x46>

                /* Update current register values. */
            case MB_REG_WRITE:
                while( iNCoils > 0 )
                {
                    xMBUtilSetBits( ucRegCoilsBuf, usBitOffset,
 8005896:	4f1b      	ldr	r7, [pc, #108]	; (8005904 <eMBRegCoilsCB+0x8c>)
 8005898:	1e46      	subs	r6, r0, #1
                while( iNCoils > 0 )
 800589a:	2c00      	cmp	r4, #0
 800589c:	dc21      	bgt.n	80058e2 <eMBRegCoilsCB+0x6a>
                                    ( unsigned char )( iNCoils > 8 ? 8 : iNCoils ),
                                    *pucRegBuffer++ );
                    iNCoils -= 8;
                }

                if (ucRegCoilsBuf[0] & 0x01) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800589e:	4b19      	ldr	r3, [pc, #100]	; (8005904 <eMBRegCoilsCB+0x8c>)
                else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80058a0:	2101      	movs	r1, #1
                if (ucRegCoilsBuf[0] & 0x01) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80058a2:	7818      	ldrb	r0, [r3, #0]
 80058a4:	f010 0401 	ands.w	r4, r0, #1
 80058a8:	bf14      	ite	ne
 80058aa:	2201      	movne	r2, #1
                else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80058ac:	4622      	moveq	r2, r4
 80058ae:	4816      	ldr	r0, [pc, #88]	; (8005908 <eMBRegCoilsCB+0x90>)
 80058b0:	f7fc faea 	bl	8001e88 <HAL_GPIO_WritePin>
 80058b4:	e003      	b.n	80058be <eMBRegCoilsCB+0x46>
                        xMBUtilGetBits( ucRegCoilsBuf, usBitOffset,
 80058b6:	4f13      	ldr	r7, [pc, #76]	; (8005904 <eMBRegCoilsCB+0x8c>)
 80058b8:	1e46      	subs	r6, r0, #1
                while( iNCoils > 0 )
 80058ba:	2c00      	cmp	r4, #0
 80058bc:	dc01      	bgt.n	80058c2 <eMBRegCoilsCB+0x4a>
    eMBErrorCode    eStatus = MB_ENOERR;
 80058be:	2000      	movs	r0, #0
    else
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
}
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        xMBUtilGetBits( ucRegCoilsBuf, usBitOffset,
 80058c2:	2c08      	cmp	r4, #8
 80058c4:	4622      	mov	r2, r4
 80058c6:	bfa8      	it	ge
 80058c8:	2208      	movge	r2, #8
 80058ca:	4629      	mov	r1, r5
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	4638      	mov	r0, r7
 80058d0:	f7fd fb44 	bl	8002f5c <xMBUtilGetBits>
 80058d4:	3c08      	subs	r4, #8
                    usBitOffset += 8;
 80058d6:	3508      	adds	r5, #8
                    *pucRegBuffer++ =
 80058d8:	f806 0f01 	strb.w	r0, [r6, #1]!
 80058dc:	b224      	sxth	r4, r4
                    usBitOffset += 8;
 80058de:	b2ad      	uxth	r5, r5
 80058e0:	e7eb      	b.n	80058ba <eMBRegCoilsCB+0x42>
                    xMBUtilSetBits( ucRegCoilsBuf, usBitOffset,
 80058e2:	2c08      	cmp	r4, #8
 80058e4:	4622      	mov	r2, r4
 80058e6:	bfa8      	it	ge
 80058e8:	2208      	movge	r2, #8
 80058ea:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	4629      	mov	r1, r5
 80058f2:	4638      	mov	r0, r7
 80058f4:	3c08      	subs	r4, #8
 80058f6:	f7fd fb07 	bl	8002f08 <xMBUtilSetBits>
 80058fa:	b224      	sxth	r4, r4
 80058fc:	e7cd      	b.n	800589a <eMBRegCoilsCB+0x22>
        eStatus = MB_ENOREG;
 80058fe:	2001      	movs	r0, #1
 8005900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005902:	bf00      	nop
 8005904:	2000535b 	.word	0x2000535b
 8005908:	40011000 	.word	0x40011000

0800590c <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
 800590c:	2001      	movs	r0, #1
 800590e:	4770      	bx	lr

08005910 <scanBtnsTask>:

#include "utils.h"

#include "aligningTask.h"

void scanBtnsTask(void *arguments){
 8005910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t prevBtn1State = 0;
 8005914:	2600      	movs	r6, #0
	for(;;){
		if(HAL_GPIO_ReadPin(BTN_UP_PORT, BTN_UP_PIN))
			VALVE_UP_ON;
		else{
			if (controllerState.valveIsOpen != 1){
				VALVE_UP_OFF;
 8005916:	f04f 0902 	mov.w	r9, #2
		if(HAL_GPIO_ReadPin(BTN_UP_PORT, BTN_UP_PIN))
 800591a:	4d36      	ldr	r5, [pc, #216]	; (80059f4 <scanBtnsTask+0xe4>)
				VALVE_UP_OFF;
 800591c:	4f36      	ldr	r7, [pc, #216]	; (80059f8 <scanBtnsTask+0xe8>)
		if(HAL_GPIO_ReadPin(BTN_UP_PORT, BTN_UP_PIN))
 800591e:	2101      	movs	r1, #1
 8005920:	4628      	mov	r0, r5
 8005922:	f7fc faab 	bl	8001e7c <HAL_GPIO_ReadPin>
 8005926:	4602      	mov	r2, r0
 8005928:	b128      	cbz	r0, 8005936 <scanBtnsTask+0x26>
			VALVE_UP_ON;
 800592a:	2201      	movs	r2, #1
				VALVE_UP_OFF;
 800592c:	2102      	movs	r1, #2
 800592e:	4638      	mov	r0, r7
 8005930:	f7fc faaa 	bl	8001e88 <HAL_GPIO_WritePin>
 8005934:	e004      	b.n	8005940 <scanBtnsTask+0x30>
			if (controllerState.valveIsOpen != 1){
 8005936:	4b31      	ldr	r3, [pc, #196]	; (80059fc <scanBtnsTask+0xec>)
 8005938:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d1f5      	bne.n	800592c <scanBtnsTask+0x1c>
			}
		}

		if(HAL_GPIO_ReadPin(BTN_DOWN_PORT, BTN_DOWN_PIN))
 8005940:	2104      	movs	r1, #4
 8005942:	4628      	mov	r0, r5
 8005944:	f7fc fa9a 	bl	8001e7c <HAL_GPIO_ReadPin>
 8005948:	4602      	mov	r2, r0
 800594a:	b128      	cbz	r0, 8005958 <scanBtnsTask+0x48>
			VALVE_DOWN_ON;
 800594c:	2201      	movs	r2, #1
		else{
			if (controllerState.valveIsOpen != -1){
				VALVE_DOWN_OFF;
 800594e:	2104      	movs	r1, #4
 8005950:	4638      	mov	r0, r7
 8005952:	f7fc fa99 	bl	8001e88 <HAL_GPIO_WritePin>
 8005956:	e004      	b.n	8005962 <scanBtnsTask+0x52>
			if (controllerState.valveIsOpen != -1){
 8005958:	4b28      	ldr	r3, [pc, #160]	; (80059fc <scanBtnsTask+0xec>)
 800595a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800595e:	3301      	adds	r3, #1
 8005960:	d1f5      	bne.n	800594e <scanBtnsTask+0x3e>
			}
		}

		if(HAL_GPIO_ReadPin(BTN_1_PORT, BTN_1_PIN) != prevBtn1State){
 8005962:	2102      	movs	r1, #2
 8005964:	4628      	mov	r0, r5
 8005966:	f7fc fa89 	bl	8001e7c <HAL_GPIO_ReadPin>
 800596a:	4286      	cmp	r6, r0
 800596c:	d037      	beq.n	80059de <scanBtnsTask+0xce>
			vTaskDelay(1);
 800596e:	2001      	movs	r0, #1
 8005970:	f7fe fe62 	bl	8004638 <vTaskDelay>
			if(HAL_GPIO_ReadPin(BTN_1_PORT, BTN_1_PIN) != prevBtn1State){
 8005974:	2102      	movs	r1, #2
 8005976:	4628      	mov	r0, r5
 8005978:	f7fc fa80 	bl	8001e7c <HAL_GPIO_ReadPin>
 800597c:	4286      	cmp	r6, r0
 800597e:	d02e      	beq.n	80059de <scanBtnsTask+0xce>
				prevBtn1State = HAL_GPIO_ReadPin(BTN_1_PORT, BTN_1_PIN);
 8005980:	2102      	movs	r1, #2
 8005982:	4628      	mov	r0, r5
 8005984:	f7fc fa7a 	bl	8001e7c <HAL_GPIO_ReadPin>

				if (prevBtn1State){
 8005988:	4606      	mov	r6, r0
 800598a:	b340      	cbz	r0, 80059de <scanBtnsTask+0xce>
					switch(controllerState.state){
 800598c:	4c1b      	ldr	r4, [pc, #108]	; (80059fc <scanBtnsTask+0xec>)
 800598e:	7aa3      	ldrb	r3, [r4, #10]
 8005990:	2b05      	cmp	r3, #5
 8005992:	d824      	bhi.n	80059de <scanBtnsTask+0xce>
 8005994:	e8df f003 	tbb	[pc, r3]
 8005998:	27272703 	.word	0x27272703
 800599c:	2727      	.short	0x2727
						case IDLE:{
							if (controllerState.sensorData == 0){
 800599e:	8863      	ldrh	r3, [r4, #2]
 80059a0:	b923      	cbnz	r3, 80059ac <scanBtnsTask+0x9c>
								controllerState.state = ALIGNING;
								//create aligning task
								xTaskCreate(xAligningTask, "aligning", 400, NULL, 1, &aligninThreadHandle);
							}
							else{
								all_led_off();
 80059a2:	f000 facb 	bl	8005f3c <all_led_off>
								controllerState.state = TEST_ERROR;
 80059a6:	f884 900a 	strb.w	r9, [r4, #10]
 80059aa:	e018      	b.n	80059de <scanBtnsTask+0xce>
							controllerState.currentStep = 0;
 80059ac:	f04f 0800 	mov.w	r8, #0
							controllerState.currentStep = calculate_test_params(controllerState.currentStep);
 80059b0:	4640      	mov	r0, r8
							controllerState.currentStep = 0;
 80059b2:	f884 800b 	strb.w	r8, [r4, #11]
							controllerState.currentStep = calculate_test_params(controllerState.currentStep);
 80059b6:	f000 fb61 	bl	800607c <calculate_test_params>
 80059ba:	72e0      	strb	r0, [r4, #11]
							if (controllerState.currentStep > 0){
 80059bc:	2800      	cmp	r0, #0
 80059be:	d0f0      	beq.n	80059a2 <scanBtnsTask+0x92>
								all_led_off();
 80059c0:	f000 fabc 	bl	8005f3c <all_led_off>
								controllerState.state = ALIGNING;
 80059c4:	2304      	movs	r3, #4
 80059c6:	72a3      	strb	r3, [r4, #10]
								xTaskCreate(xAligningTask, "aligning", 400, NULL, 1, &aligninThreadHandle);
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <scanBtnsTask+0xf0>)
 80059ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	2301      	movs	r3, #1
 80059d2:	490c      	ldr	r1, [pc, #48]	; (8005a04 <scanBtnsTask+0xf4>)
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	480c      	ldr	r0, [pc, #48]	; (8005a08 <scanBtnsTask+0xf8>)
 80059d8:	4643      	mov	r3, r8
 80059da:	f7fe fc48 	bl	800426e <xTaskCreate>
					}
				}
			}

		}
		vTaskDelay(2);
 80059de:	2002      	movs	r0, #2
 80059e0:	f7fe fe2a 	bl	8004638 <vTaskDelay>
		if(HAL_GPIO_ReadPin(BTN_UP_PORT, BTN_UP_PIN))
 80059e4:	e79b      	b.n	800591e <scanBtnsTask+0xe>
							all_led_off();
 80059e6:	f000 faa9 	bl	8005f3c <all_led_off>
							controllerState.state = IDLE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	72a3      	strb	r3, [r4, #10]
							controllerState.currentStep = 0;
 80059ee:	72e3      	strb	r3, [r4, #11]
							break;
 80059f0:	e7f5      	b.n	80059de <scanBtnsTask+0xce>
 80059f2:	bf00      	nop
 80059f4:	40011000 	.word	0x40011000
 80059f8:	40010800 	.word	0x40010800
 80059fc:	20005364 	.word	0x20005364
 8005a00:	20005360 	.word	0x20005360
 8005a04:	08007438 	.word	0x08007438
 8005a08:	08004a79 	.word	0x08004a79

08005a0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_MspInit+0x48>)
{
 8005a0e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a10:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a12:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	619a      	str	r2, [r3, #24]
 8005a1a:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a1c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005a20:	f002 0201 	and.w	r2, r2, #1
 8005a24:	9200      	str	r2, [sp, #0]
 8005a26:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a2e:	61da      	str	r2, [r3, #28]
 8005a30:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a32:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a3c:	f7fb ff50 	bl	80018e0 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005a40:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <HAL_MspInit+0x4c>)
 8005a42:	6853      	ldr	r3, [r2, #4]
 8005a44:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a4e:	b003      	add	sp, #12
 8005a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40010000 	.word	0x40010000

08005a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4604      	mov	r4, r0
 8005a60:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a62:	2210      	movs	r2, #16
 8005a64:	2100      	movs	r1, #0
 8005a66:	a802      	add	r0, sp, #8
 8005a68:	f000 fbc3 	bl	80061f2 <memset>
  if(hadc->Instance==ADC1)
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <HAL_ADC_MspInit+0x64>)
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d123      	bne.n	8005abc <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a74:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005a78:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a7a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a80:	619a      	str	r2, [r3, #24]
 8005a82:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a84:	480f      	ldr	r0, [pc, #60]	; (8005ac4 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a86:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005a8a:	9200      	str	r2, [sp, #0]
 8005a8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	f042 0204 	orr.w	r2, r2, #4
 8005a94:	619a      	str	r2, [r3, #24]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa8:	f7fc f906 	bl	8001cb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8005aac:	2012      	movs	r0, #18
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2105      	movs	r1, #5
 8005ab2:	f7fb ff15 	bl	80018e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005ab6:	2012      	movs	r0, #18
 8005ab8:	f7fb ff46 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005abc:	b006      	add	sp, #24
 8005abe:	bd10      	pop	{r4, pc}
 8005ac0:	40012400 	.word	0x40012400
 8005ac4:	40010800 	.word	0x40010800

08005ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ac8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 8005aca:	6803      	ldr	r3, [r0, #0]
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <HAL_TIM_Base_MspInit+0x5c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d114      	bne.n	8005afc <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <HAL_TIM_Base_MspInit+0x60>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8005ad4:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005ad6:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8005ad8:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005ada:	f042 0210 	orr.w	r2, r2, #16
 8005ade:	61da      	str	r2, [r3, #28]
 8005ae0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8005ae2:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8005aec:	f7fb fef8 	bl	80018e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005af0:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005af2:	f7fb ff29 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005af6:	b003      	add	sp, #12
 8005af8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8005afc:	4a0b      	ldr	r2, [pc, #44]	; (8005b2c <HAL_TIM_Base_MspInit+0x64>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d1f9      	bne.n	8005af6 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005b04:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b06:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005b08:	2105      	movs	r1, #5
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b0a:	f042 0220 	orr.w	r2, r2, #32
 8005b0e:	61da      	str	r2, [r3, #28]
 8005b10:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005b12:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005b1c:	f7fb fee0 	bl	80018e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005b20:	2037      	movs	r0, #55	; 0x37
 8005b22:	e7e6      	b.n	8005af2 <HAL_TIM_Base_MspInit+0x2a>
 8005b24:	40001000 	.word	0x40001000
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40001400 	.word	0x40001400

08005b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b30:	b510      	push	{r4, lr}
 8005b32:	4604      	mov	r4, r0
 8005b34:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b36:	2210      	movs	r2, #16
 8005b38:	2100      	movs	r1, #0
 8005b3a:	a802      	add	r0, sp, #8
 8005b3c:	f000 fb59 	bl	80061f2 <memset>
  if(huart->Instance==USART1)
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <HAL_UART_MspInit+0x80>)
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d130      	bne.n	8005baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b48:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005b4c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b4e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b54:	619a      	str	r2, [r3, #24]
 8005b56:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b58:	4816      	ldr	r0, [pc, #88]	; (8005bb4 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005b5e:	9200      	str	r2, [sp, #0]
 8005b60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b62:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b64:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b66:	f042 0204 	orr.w	r2, r2, #4
 8005b6a:	619a      	str	r2, [r3, #24]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b80:	2303      	movs	r3, #3
 8005b82:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b84:	f7fc f898 	bl	8001cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b8c:	a902      	add	r1, sp, #8
 8005b8e:	4809      	ldr	r0, [pc, #36]	; (8005bb4 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b92:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b94:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b96:	f7fc f88f 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005b9a:	2025      	movs	r0, #37	; 0x25
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	2105      	movs	r1, #5
 8005ba0:	f7fb fe9e 	bl	80018e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ba4:	2025      	movs	r0, #37	; 0x25
 8005ba6:	f7fb fecf 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005baa:	b006      	add	sp, #24
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	bf00      	nop
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40010800 	.word	0x40010800

08005bb8 <draw_digit>:
uint8_t debugCurDigit = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void draw_digit(uint8_t digit){
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4605      	mov	r5, r0
	if (digitSegments[digit] & (1 << 0)) 	IND_A_ON;
 8005bbc:	4c23      	ldr	r4, [pc, #140]	; (8005c4c <draw_digit+0x94>)
	else				  					IND_A_OFF;
 8005bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	if (digitSegments[digit] & (1 << 0)) 	IND_A_ON;
 8005bc2:	5c22      	ldrb	r2, [r4, r0]
	else				  					IND_A_OFF;
 8005bc4:	4822      	ldr	r0, [pc, #136]	; (8005c50 <draw_digit+0x98>)
	if (digitSegments[digit] & (1 << 0)) 	IND_A_ON;
 8005bc6:	f012 0201 	ands.w	r2, r2, #1
 8005bca:	bf18      	it	ne
 8005bcc:	2201      	movne	r2, #1
	else				  					IND_A_OFF;
 8005bce:	f7fc f95b 	bl	8001e88 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 1)) 	IND_B_ON;
 8005bd2:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_B_OFF;
 8005bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
	if (digitSegments[digit] & (1 << 1)) 	IND_B_ON;
 8005bd8:	f012 0202 	ands.w	r2, r2, #2
 8005bdc:	bf18      	it	ne
 8005bde:	2201      	movne	r2, #1
	else				  					IND_B_OFF;
 8005be0:	481c      	ldr	r0, [pc, #112]	; (8005c54 <draw_digit+0x9c>)
 8005be2:	f7fc f951 	bl	8001e88 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 2)) 	IND_C_ON;
 8005be6:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_C_OFF;
 8005be8:	2108      	movs	r1, #8
	if (digitSegments[digit] & (1 << 2)) 	IND_C_ON;
 8005bea:	f012 0204 	ands.w	r2, r2, #4
 8005bee:	bf18      	it	ne
 8005bf0:	2201      	movne	r2, #1
	else				  					IND_C_OFF;
 8005bf2:	4819      	ldr	r0, [pc, #100]	; (8005c58 <draw_digit+0xa0>)
 8005bf4:	f7fc f948 	bl	8001e88 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 3)) 	IND_D_ON;
 8005bf8:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_D_OFF;
 8005bfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	if (digitSegments[digit] & (1 << 3)) 	IND_D_ON;
 8005bfe:	f012 0208 	ands.w	r2, r2, #8
 8005c02:	bf18      	it	ne
 8005c04:	2201      	movne	r2, #1
	else				  					IND_D_OFF;
 8005c06:	4813      	ldr	r0, [pc, #76]	; (8005c54 <draw_digit+0x9c>)
 8005c08:	f7fc f93e 	bl	8001e88 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 4)) 	IND_E_ON;
 8005c0c:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_E_OFF;
 8005c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
	if (digitSegments[digit] & (1 << 4)) 	IND_E_ON;
 8005c12:	f012 0210 	ands.w	r2, r2, #16
 8005c16:	bf18      	it	ne
 8005c18:	2201      	movne	r2, #1
	else				  					IND_E_OFF;
 8005c1a:	480e      	ldr	r0, [pc, #56]	; (8005c54 <draw_digit+0x9c>)
 8005c1c:	f7fc f934 	bl	8001e88 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 5)) 	IND_F_ON;
 8005c20:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_F_OFF;
 8005c22:	f44f 7180 	mov.w	r1, #256	; 0x100
	if (digitSegments[digit] & (1 << 5)) 	IND_F_ON;
 8005c26:	f012 0220 	ands.w	r2, r2, #32
 8005c2a:	bf18      	it	ne
 8005c2c:	2201      	movne	r2, #1
	else				  					IND_F_OFF;
 8005c2e:	4808      	ldr	r0, [pc, #32]	; (8005c50 <draw_digit+0x98>)
 8005c30:	f7fc f92a 	bl	8001e88 <HAL_GPIO_WritePin>

	if (digitSegments[digit] & (1 << 6)) 	IND_G_ON;
 8005c34:	5d62      	ldrb	r2, [r4, r5]
	else				  					IND_G_OFF;
 8005c36:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 8005c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (digitSegments[digit] & (1 << 6)) 	IND_G_ON;
 8005c3e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8005c42:	bf18      	it	ne
 8005c44:	2201      	movne	r2, #1
	else				  					IND_G_OFF;
 8005c46:	4803      	ldr	r0, [pc, #12]	; (8005c54 <draw_digit+0x9c>)
 8005c48:	f7fc b91e 	b.w	8001e88 <HAL_GPIO_WritePin>
 8005c4c:	20000092 	.word	0x20000092
 8005c50:	40010800 	.word	0x40010800
 8005c54:	40011000 	.word	0x40011000
 8005c58:	40010c00 	.word	0x40010c00

08005c5c <NMI_Handler>:
 8005c5c:	4770      	bx	lr

08005c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c5e:	e7fe      	b.n	8005c5e <HardFault_Handler>

08005c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c60:	e7fe      	b.n	8005c60 <MemManage_Handler>

08005c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c62:	e7fe      	b.n	8005c62 <BusFault_Handler>

08005c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c64:	e7fe      	b.n	8005c64 <UsageFault_Handler>

08005c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c66:	4770      	bx	lr

08005c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c6a:	f7fb fbb7 	bl	80013dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005c6e:	f7fe fdeb 	bl	8004848 <xTaskGetSchedulerState>
 8005c72:	2801      	cmp	r0, #1
 8005c74:	d003      	beq.n	8005c7e <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8005c7a:	f7fd bd9b 	b.w	80037b4 <xPortSysTickHandler>
 8005c7e:	bd08      	pop	{r3, pc}

08005c80 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <ADC1_2_IRQHandler+0x8>)
 8005c82:	f7fb bbc1 	b.w	8001408 <HAL_ADC_IRQHandler>
 8005c86:	bf00      	nop
 8005c88:	20005524 	.word	0x20005524

08005c8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005c8c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t isrflags   = READ_REG(huart1.Instance->SR);
 8005c8e:	4c17      	ldr	r4, [pc, #92]	; (8005cec <USART1_IRQHandler+0x60>)
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	681e      	ldr	r6, [r3, #0]
	uint32_t cr1its     = READ_REG(huart1.Instance->CR1);
 8005c94:	68dd      	ldr	r5, [r3, #12]
	//uint32_t cr3its     = READ_REG(huart1.Instance->CR3);

	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c96:	06b2      	lsls	r2, r6, #26
 8005c98:	d503      	bpl.n	8005ca2 <USART1_IRQHandler+0x16>
 8005c9a:	06ab      	lsls	r3, r5, #26
 8005c9c:	d501      	bpl.n	8005ca2 <USART1_IRQHandler+0x16>
	{
		prvvUARTRxISR();
 8005c9e:	f7fd fac3 	bl	8003228 <prvvUARTRxISR>
	}

	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ca2:	0630      	lsls	r0, r6, #24
 8005ca4:	d50f      	bpl.n	8005cc6 <USART1_IRQHandler+0x3a>
 8005ca6:	0629      	lsls	r1, r5, #24
 8005ca8:	d50d      	bpl.n	8005cc6 <USART1_IRQHandler+0x3a>
	{
		prvvUARTTxReadyISR();
 8005caa:	f7fd fab7 	bl	800321c <prvvUARTTxReadyISR>
		if (counter_mb_ext == 0){
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <USART1_IRQHandler+0x64>)
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b943      	cbnz	r3, 8005cc6 <USART1_IRQHandler+0x3a>
			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cbc:	60da      	str	r2, [r3, #12]
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	60da      	str	r2, [r3, #12]
		}
	}
	    /* UART in mode Transmitter end --------------------------------------------*/
	if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cc6:	0672      	lsls	r2, r6, #25
 8005cc8:	d50b      	bpl.n	8005ce2 <USART1_IRQHandler+0x56>
 8005cca:	066b      	lsls	r3, r5, #25
 8005ccc:	d509      	bpl.n	8005ce2 <USART1_IRQHandler+0x56>
	{
        __HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd6:	60da      	str	r2, [r3, #12]
		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_TC);
 8005cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
		prvvUARTTxReadyISR();
 8005cde:	f7fd fa9d 	bl	800321c <prvvUARTTxReadyISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_IRQHandler(&huart1);
 8005ce6:	4801      	ldr	r0, [pc, #4]	; (8005cec <USART1_IRQHandler+0x60>)
 8005ce8:	f7fc beb6 	b.w	8002a58 <HAL_UART_IRQHandler>
 8005cec:	20005554 	.word	0x20005554
 8005cf0:	20000090 	.word	0x20000090

08005cf4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005cf4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005cf6:	4818      	ldr	r0, [pc, #96]	; (8005d58 <TIM6_IRQHandler+0x64>)
 8005cf8:	f7fc fcd9 	bl	80026ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
  if (debugCurDigit == 0){
 8005cfc:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <TIM6_IRQHandler+0x68>)
 8005cfe:	4d18      	ldr	r5, [pc, #96]	; (8005d60 <TIM6_IRQHandler+0x6c>)
 8005d00:	781a      	ldrb	r2, [r3, #0]
 8005d02:	b9ba      	cbnz	r2, 8005d34 <TIM6_IRQHandler+0x40>
	  debugCurDigit = 1;
 8005d04:	2401      	movs	r4, #1
	  IND_DIG_2_OFF;
 8005d06:	2120      	movs	r1, #32
 8005d08:	4816      	ldr	r0, [pc, #88]	; (8005d64 <TIM6_IRQHandler+0x70>)
	  debugCurDigit = 1;
 8005d0a:	701c      	strb	r4, [r3, #0]
	  IND_DIG_2_OFF;
 8005d0c:	f7fc f8bc 	bl	8001e88 <HAL_GPIO_WritePin>
	  draw_digit(symbolsToShow[0]);
 8005d10:	7828      	ldrb	r0, [r5, #0]
 8005d12:	f7ff ff51 	bl	8005bb8 <draw_digit>

	  if (symbolsToShow[0] < 10) IND_DP_ON;
 8005d16:	782b      	ldrb	r3, [r5, #0]
 8005d18:	2b09      	cmp	r3, #9
 8005d1a:	d804      	bhi.n	8005d26 <TIM6_IRQHandler+0x32>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	2110      	movs	r1, #16
 8005d20:	4810      	ldr	r0, [pc, #64]	; (8005d64 <TIM6_IRQHandler+0x70>)
 8005d22:	f7fc f8b1 	bl	8001e88 <HAL_GPIO_WritePin>

	  IND_DIG_1_ON;
 8005d26:	2201      	movs	r2, #1
 8005d28:	2140      	movs	r1, #64	; 0x40
	  draw_digit(symbolsToShow[1]);
	  IND_DP_OFF;
	  IND_DIG_2_ON;
  }
  /* USER CODE END TIM6_IRQn 1 */
}
 8005d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  IND_DIG_2_ON;
 8005d2e:	480d      	ldr	r0, [pc, #52]	; (8005d64 <TIM6_IRQHandler+0x70>)
 8005d30:	f7fc b8aa 	b.w	8001e88 <HAL_GPIO_WritePin>
	  debugCurDigit = 0;
 8005d34:	2400      	movs	r4, #0
	  IND_DIG_1_OFF;
 8005d36:	2140      	movs	r1, #64	; 0x40
 8005d38:	4622      	mov	r2, r4
 8005d3a:	480a      	ldr	r0, [pc, #40]	; (8005d64 <TIM6_IRQHandler+0x70>)
	  debugCurDigit = 0;
 8005d3c:	701c      	strb	r4, [r3, #0]
	  IND_DIG_1_OFF;
 8005d3e:	f7fc f8a3 	bl	8001e88 <HAL_GPIO_WritePin>
	  draw_digit(symbolsToShow[1]);
 8005d42:	7868      	ldrb	r0, [r5, #1]
 8005d44:	f7ff ff38 	bl	8005bb8 <draw_digit>
	  IND_DP_OFF;
 8005d48:	4622      	mov	r2, r4
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	4805      	ldr	r0, [pc, #20]	; (8005d64 <TIM6_IRQHandler+0x70>)
 8005d4e:	f7fc f89b 	bl	8001e88 <HAL_GPIO_WritePin>
	  IND_DIG_2_ON;
 8005d52:	2201      	movs	r2, #1
 8005d54:	2120      	movs	r1, #32
 8005d56:	e7e8      	b.n	8005d2a <TIM6_IRQHandler+0x36>
 8005d58:	20005594 	.word	0x20005594
 8005d5c:	2000535d 	.word	0x2000535d
 8005d60:	2000535e 	.word	0x2000535e
 8005d64:	40010c00 	.word	0x40010c00

08005d68 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005d68:	4801      	ldr	r0, [pc, #4]	; (8005d70 <TIM7_IRQHandler+0x8>)
 8005d6a:	f7fc bca0 	b.w	80026ae <HAL_TIM_IRQHandler>
 8005d6e:	bf00      	nop
 8005d70:	200055d4 	.word	0x200055d4

08005d74 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005d74:	2001      	movs	r0, #1
 8005d76:	4770      	bx	lr

08005d78 <_kill>:

int _kill(int pid, int sig)
{
 8005d78:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005d7a:	f000 fa17 	bl	80061ac <__errno>
 8005d7e:	2316      	movs	r3, #22
 8005d80:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005d82:	f04f 30ff 	mov.w	r0, #4294967295
 8005d86:	bd08      	pop	{r3, pc}

08005d88 <_exit>:

void _exit (int status)
{
 8005d88:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005d8a:	f000 fa0f 	bl	80061ac <__errno>
 8005d8e:	2316      	movs	r3, #22
 8005d90:	6003      	str	r3, [r0, #0]
 8005d92:	e7fe      	b.n	8005d92 <_exit+0xa>

08005d94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	460e      	mov	r6, r1
 8005d98:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	1ba3      	subs	r3, r4, r6
 8005d9e:	429d      	cmp	r5, r3
 8005da0:	dc01      	bgt.n	8005da6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005da2:	4628      	mov	r0, r5
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005da6:	f3af 8000 	nop.w
 8005daa:	f804 0b01 	strb.w	r0, [r4], #1
 8005dae:	e7f5      	b.n	8005d9c <_read+0x8>

08005db0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	460e      	mov	r6, r1
 8005db4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005db6:	460c      	mov	r4, r1
 8005db8:	1ba3      	subs	r3, r4, r6
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	dc01      	bgt.n	8005dc2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005dc2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005dc6:	f3af 8000 	nop.w
 8005dca:	e7f5      	b.n	8005db8 <_write+0x8>

08005dcc <_sbrk>:

caddr_t _sbrk(int incr)
{
 8005dcc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <_sbrk+0x2c>)
{
 8005dd0:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	b909      	cbnz	r1, 8005dda <_sbrk+0xe>
		heap_end = &end;
 8005dd6:	4909      	ldr	r1, [pc, #36]	; (8005dfc <_sbrk+0x30>)
 8005dd8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005dda:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005ddc:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005dde:	4402      	add	r2, r0
 8005de0:	428a      	cmp	r2, r1
 8005de2:	d906      	bls.n	8005df2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005de4:	f000 f9e2 	bl	80061ac <__errno>
 8005de8:	230c      	movs	r3, #12
 8005dea:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005df2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005df4:	bd08      	pop	{r3, pc}
 8005df6:	bf00      	nop
 8005df8:	200053d4 	.word	0x200053d4
 8005dfc:	20005618 	.word	0x20005618

08005e00 <_close>:

int _close(int file)
{
	return -1;
}
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	4770      	bx	lr

08005e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005e0a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005e0c:	604b      	str	r3, [r1, #4]
}
 8005e0e:	4770      	bx	lr

08005e10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005e10:	2001      	movs	r0, #1
 8005e12:	4770      	bx	lr

08005e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005e14:	2000      	movs	r0, #0
 8005e16:	4770      	bx	lr

08005e18 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005e18:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <SystemInit+0x4c>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8005e22:	6859      	ldr	r1, [r3, #4]
 8005e24:	4a10      	ldr	r2, [pc, #64]	; (8005e68 <SystemInit+0x50>)
 8005e26:	400a      	ands	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005e30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e34:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005e44:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8005e4e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005e52:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8005e54:	2200      	movs	r2, #0
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <SystemInit+0x54>)
 8005e5e:	609a      	str	r2, [r3, #8]
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000
 8005e68:	f0ff0000 	.word	0xf0ff0000
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <xTestingTask>:
#include "structures.h"

extern xSemaphoreHandle xNewPressureSemaphore;


void xTestingTask(void *arguments){
 8005e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	portBASE_TYPE xStatus;
	uint8_t badPressTicksCounter = 0;
	int16_t deltaPressure = 0;

	xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8005e74:	4f2a      	ldr	r7, [pc, #168]	; (8005f20 <xTestingTask+0xb0>)
 8005e76:	f04f 31ff 	mov.w	r1, #4294967295
 8005e7a:	6838      	ldr	r0, [r7, #0]
 8005e7c:	f7fd ff9e 	bl	8003dbc <xQueueSemaphoreTake>
	uint8_t badPressTicksCounter = 0;
 8005e80:	2600      	movs	r6, #0
	for(;;){
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
		if (xStatus == pdPASS){

			vTaskDelay(testingParams.checkingDelayMs);
 8005e82:	4c28      	ldr	r4, [pc, #160]	; (8005f24 <xTestingTask+0xb4>)

			deltaPressure = testingParams.testStartPressure - controllerState.sensorData;
 8005e84:	4d28      	ldr	r5, [pc, #160]	; (8005f28 <xTestingTask+0xb8>)
					else{
						all_led_off();
						controllerState.state = TEST_COMPLETE;
					}
					//delete curTask
					testingTreadHandle = NULL;
 8005e86:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005f38 <xTestingTask+0xc8>
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8005e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e8e:	6838      	ldr	r0, [r7, #0]
 8005e90:	f7fd ff94 	bl	8003dbc <xQueueSemaphoreTake>
		if (xStatus == pdPASS){
 8005e94:	2801      	cmp	r0, #1
		xStatus = xSemaphoreTake(xNewPressureSemaphore, portMAX_DELAY);
 8005e96:	4680      	mov	r8, r0
		if (xStatus == pdPASS){
 8005e98:	d1f7      	bne.n	8005e8a <xTestingTask+0x1a>
			vTaskDelay(testingParams.checkingDelayMs);
 8005e9a:	69e0      	ldr	r0, [r4, #28]
 8005e9c:	f7fe fbcc 	bl	8004638 <vTaskDelay>
			deltaPressure = testingParams.testStartPressure - controllerState.sensorData;
 8005ea0:	886a      	ldrh	r2, [r5, #2]
 8005ea2:	8963      	ldrh	r3, [r4, #10]
 8005ea4:	1a9b      	subs	r3, r3, r2
			if (deltaPressure > testingParams.testDiffPressure){
 8005ea6:	8922      	ldrh	r2, [r4, #8]
 8005ea8:	b21b      	sxth	r3, r3
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	dd0c      	ble.n	8005ec8 <xTestingTask+0x58>
				badPressTicksCounter += 1;
 8005eae:	3601      	adds	r6, #1
				if (badPressTicksCounter > testingParams.maxNumberOfBadPressure){
 8005eb0:	8c23      	ldrh	r3, [r4, #32]
				badPressTicksCounter += 1;
 8005eb2:	b2f6      	uxtb	r6, r6
				if (badPressTicksCounter > testingParams.maxNumberOfBadPressure){
 8005eb4:	42b3      	cmp	r3, r6
 8005eb6:	d2e8      	bcs.n	8005e8a <xTestingTask+0x1a>
					all_led_off();
 8005eb8:	f000 f840 	bl	8005f3c <all_led_off>
					controllerState.state = STEP_ERROR;
 8005ebc:	2305      	movs	r3, #5
					vTaskDelete(NULL);
 8005ebe:	2000      	movs	r0, #0
					controllerState.state = STEP_ERROR;
 8005ec0:	72ab      	strb	r3, [r5, #10]
					vTaskDelete(NULL);
 8005ec2:	f7fe fa01 	bl	80042c8 <vTaskDelete>
 8005ec6:	e7e0      	b.n	8005e8a <xTestingTask+0x1a>
				testingParams.timePassed += testingParams.checkingDelayMs;
 8005ec8:	69e1      	ldr	r1, [r4, #28]
 8005eca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8005ece:	1852      	adds	r2, r2, r1
				if (testingParams.timePassed > testingParams.testTimeMS){
 8005ed0:	f04f 0100 	mov.w	r1, #0
				testingParams.timePassed += testingParams.checkingDelayMs;
 8005ed4:	f143 0300 	adc.w	r3, r3, #0
				if (testingParams.timePassed > testingParams.testTimeMS){
 8005ed8:	6860      	ldr	r0, [r4, #4]
 8005eda:	4299      	cmp	r1, r3
 8005edc:	bf08      	it	eq
 8005ede:	4290      	cmpeq	r0, r2
				testingParams.timePassed += testingParams.checkingDelayMs;
 8005ee0:	e9c4 2304 	strd	r2, r3, [r4, #16]
				if (testingParams.timePassed > testingParams.testTimeMS){
 8005ee4:	d2d1      	bcs.n	8005e8a <xTestingTask+0x1a>
					controllerState.currentStep = calculate_test_params(controllerState.currentStep);
 8005ee6:	7ae8      	ldrb	r0, [r5, #11]
 8005ee8:	f000 f8c8 	bl	800607c <calculate_test_params>
 8005eec:	72e8      	strb	r0, [r5, #11]
					if (controllerState.currentStep > 0){
 8005eee:	b190      	cbz	r0, 8005f16 <xTestingTask+0xa6>
						all_led_off();
 8005ef0:	f000 f824 	bl	8005f3c <all_led_off>
						controllerState.state = ALIGNING;
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	72ab      	strb	r3, [r5, #10]
						xTaskCreate(xAligningTask, "aligning", 400, NULL, 1, &aligninThreadHandle);
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <xTestingTask+0xbc>)
 8005efa:	f8cd 8000 	str.w	r8, [sp]
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f04:	2300      	movs	r3, #0
 8005f06:	490a      	ldr	r1, [pc, #40]	; (8005f30 <xTestingTask+0xc0>)
 8005f08:	480a      	ldr	r0, [pc, #40]	; (8005f34 <xTestingTask+0xc4>)
 8005f0a:	f7fe f9b0 	bl	800426e <xTaskCreate>
					testingTreadHandle = NULL;
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f8c9 0000 	str.w	r0, [r9]
 8005f14:	e7d5      	b.n	8005ec2 <xTestingTask+0x52>
						all_led_off();
 8005f16:	f000 f811 	bl	8005f3c <all_led_off>
						controllerState.state = TEST_COMPLETE;
 8005f1a:	f885 800a 	strb.w	r8, [r5, #10]
 8005f1e:	e7f6      	b.n	8005f0e <xTestingTask+0x9e>
 8005f20:	2000551c 	.word	0x2000551c
 8005f24:	200053a8 	.word	0x200053a8
 8005f28:	20005364 	.word	0x20005364
 8005f2c:	20005360 	.word	0x20005360
 8005f30:	08007438 	.word	0x08007438
 8005f34:	08004a79 	.word	0x08004a79
 8005f38:	200053d0 	.word	0x200053d0

08005f3c <all_led_off>:

#include "utils.h"
#include "globals.h"
#include "structures.h"

void all_led_off(void){
 8005f3c:	b538      	push	{r3, r4, r5, lr}
	LED_STEP_1_OFF;
 8005f3e:	4c1c      	ldr	r4, [pc, #112]	; (8005fb0 <all_led_off+0x74>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	4620      	mov	r0, r4
 8005f44:	2110      	movs	r1, #16
 8005f46:	f7fb ff9f 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_STEP_2_OFF;
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2120      	movs	r1, #32
 8005f50:	f7fb ff9a 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_STEP_3_OFF;
	LED_STEP_4_OFF;
	LED_STEP_5_OFF;
 8005f54:	4d17      	ldr	r5, [pc, #92]	; (8005fb4 <all_led_off+0x78>)
	LED_STEP_3_OFF;
 8005f56:	4620      	mov	r0, r4
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2140      	movs	r1, #64	; 0x40
 8005f5c:	f7fb ff94 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_STEP_4_OFF;
 8005f60:	4620      	mov	r0, r4
 8005f62:	2200      	movs	r2, #0
 8005f64:	2180      	movs	r1, #128	; 0x80
 8005f66:	f7fb ff8f 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_STEP_5_OFF;
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2110      	movs	r1, #16
 8005f70:	f7fb ff8a 	bl	8001e88 <HAL_GPIO_WritePin>

	LED_ERR_1_OFF;
 8005f74:	4620      	mov	r0, r4
 8005f76:	2200      	movs	r2, #0
 8005f78:	2108      	movs	r1, #8
 8005f7a:	f7fb ff85 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_ERR_2_OFF;
	LED_ERR_3_OFF;
 8005f7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
	LED_ERR_2_OFF;
 8005f82:	4628      	mov	r0, r5
 8005f84:	2200      	movs	r2, #0
 8005f86:	2120      	movs	r1, #32
 8005f88:	f7fb ff7e 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_ERR_3_OFF;
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2104      	movs	r1, #4
 8005f92:	f7fb ff79 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_ERR_4_OFF;
 8005f96:	4620      	mov	r0, r4
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2102      	movs	r1, #2
 8005f9c:	f7fb ff74 	bl	8001e88 <HAL_GPIO_WritePin>
	LED_ERR_5_OFF;
 8005fa0:	4620      	mov	r0, r4
}
 8005fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LED_ERR_5_OFF;
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2101      	movs	r1, #1
 8005faa:	f7fb bf6d 	b.w	8001e88 <HAL_GPIO_WritePin>
 8005fae:	bf00      	nop
 8005fb0:	40010800 	.word	0x40010800
 8005fb4:	40011000 	.word	0x40011000

08005fb8 <adc_to_bar>:
		}
	}
	return legalStep;
}

float adc_to_bar(uint16_t val){
 8005fb8:	b510      	push	{r4, lr}
	float valInBar = 0;
	float k = 20.0 / (3350.0 - 313.0); //calc 373.0
	float b = 20 - k * 3350.0;

	valInBar = k * (float)val + b;
 8005fba:	f7fa fded 	bl	8000b98 <__aeabi_ui2f>
 8005fbe:	490e      	ldr	r1, [pc, #56]	; (8005ff8 <adc_to_bar+0x40>)
 8005fc0:	f7fa fe42 	bl	8000c48 <__aeabi_fmul>
 8005fc4:	490d      	ldr	r1, [pc, #52]	; (8005ffc <adc_to_bar+0x44>)
 8005fc6:	f7fa fd35 	bl	8000a34 <__aeabi_fsub>

	if (valInBar > 20.0) return 20.0;
 8005fca:	490d      	ldr	r1, [pc, #52]	; (8006000 <adc_to_bar+0x48>)
	valInBar = k * (float)val + b;
 8005fcc:	4604      	mov	r4, r0
	if (valInBar > 20.0) return 20.0;
 8005fce:	f7fa fff7 	bl	8000fc0 <__aeabi_fcmpgt>
 8005fd2:	b958      	cbnz	r0, 8005fec <adc_to_bar+0x34>
	else if (valInBar < -1.0) return -1.0;
 8005fd4:	490b      	ldr	r1, [pc, #44]	; (8006004 <adc_to_bar+0x4c>)
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f7fa ffd4 	bl	8000f84 <__aeabi_fcmplt>
 8005fdc:	b948      	cbnz	r0, 8005ff2 <adc_to_bar+0x3a>
	else if (valInBar < 0.0) return 0.0;
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f7fa ffcf 	bl	8000f84 <__aeabi_fcmplt>
 8005fe6:	b110      	cbz	r0, 8005fee <adc_to_bar+0x36>
 8005fe8:	2400      	movs	r4, #0
 8005fea:	e000      	b.n	8005fee <adc_to_bar+0x36>
	if (valInBar > 20.0) return 20.0;
 8005fec:	4c04      	ldr	r4, [pc, #16]	; (8006000 <adc_to_bar+0x48>)
	else return valInBar;
}
 8005fee:	4620      	mov	r0, r4
 8005ff0:	bd10      	pop	{r4, pc}
	else if (valInBar < -1.0) return -1.0;
 8005ff2:	4c04      	ldr	r4, [pc, #16]	; (8006004 <adc_to_bar+0x4c>)
 8005ff4:	e7fb      	b.n	8005fee <adc_to_bar+0x36>
 8005ff6:	bf00      	nop
 8005ff8:	3bd7caba 	.word	0x3bd7caba
 8005ffc:	4003eb6f 	.word	0x4003eb6f
 8006000:	41a00000 	.word	0x41a00000
 8006004:	bf800000 	.word	0xbf800000

08006008 <bar_to_adc>:

uint16_t bar_to_adc(uint16_t bar){
 8006008:	b508      	push	{r3, lr}
	float valInBar = (float)bar / 10.0;
 800600a:	f7fa fdc5 	bl	8000b98 <__aeabi_ui2f>
 800600e:	490b      	ldr	r1, [pc, #44]	; (800603c <bar_to_adc+0x34>)
 8006010:	f7fa fece 	bl	8000db0 <__aeabi_fdiv>
	float k = (3350.0 - 313.0) / 20.0;
	float b = 3350.0 - k * 20.0;
	uint16_t adcVal = 0;

	adcVal = (uint16_t)(k * valInBar + b);
 8006014:	490a      	ldr	r1, [pc, #40]	; (8006040 <bar_to_adc+0x38>)
 8006016:	f7fa fe17 	bl	8000c48 <__aeabi_fmul>
 800601a:	490a      	ldr	r1, [pc, #40]	; (8006044 <bar_to_adc+0x3c>)
 800601c:	f7fa fd0c 	bl	8000a38 <__addsf3>
 8006020:	f7fa fffe 	bl	8001020 <__aeabi_f2uiz>
 8006024:	f240 1339 	movw	r3, #313	; 0x139
 8006028:	b280      	uxth	r0, r0
 800602a:	4298      	cmp	r0, r3
 800602c:	bf38      	it	cc
 800602e:	4618      	movcc	r0, r3

	if (adcVal > 3350) return 3350;
	else if (adcVal < 313) return 313;
	else return adcVal;
}
 8006030:	f640 5316 	movw	r3, #3350	; 0xd16
 8006034:	4298      	cmp	r0, r3
 8006036:	bf28      	it	cs
 8006038:	4618      	movcs	r0, r3
 800603a:	bd08      	pop	{r3, pc}
 800603c:	41200000 	.word	0x41200000
 8006040:	4317d99a 	.word	0x4317d99a
 8006044:	439c7ffc 	.word	0x439c7ffc

08006048 <bar_to_adc_diff>:

uint16_t bar_to_adc_diff(uint16_t bar){
 8006048:	b508      	push	{r3, lr}
	float valInBar = (float)bar / 10.0;
 800604a:	f7fa fda5 	bl	8000b98 <__aeabi_ui2f>
 800604e:	4909      	ldr	r1, [pc, #36]	; (8006074 <bar_to_adc_diff+0x2c>)
 8006050:	f7fa feae 	bl	8000db0 <__aeabi_fdiv>
	float k = (3350.0 - 313.0) / 20.0;
	uint16_t adcVal = 0;

	adcVal = (uint16_t)(k * valInBar);
 8006054:	4908      	ldr	r1, [pc, #32]	; (8006078 <bar_to_adc_diff+0x30>)
 8006056:	f7fa fdf7 	bl	8000c48 <__aeabi_fmul>
 800605a:	f7fa ffe1 	bl	8001020 <__aeabi_f2uiz>

	if (adcVal > 3350) return 3350;
 800605e:	f640 5316 	movw	r3, #3350	; 0xd16
	adcVal = (uint16_t)(k * valInBar);
 8006062:	b280      	uxth	r0, r0
	if (adcVal > 3350) return 3350;
 8006064:	4298      	cmp	r0, r3
 8006066:	d803      	bhi.n	8006070 <bar_to_adc_diff+0x28>
	else if (adcVal < 1) return 1;
 8006068:	2800      	cmp	r0, #0
 800606a:	bf08      	it	eq
 800606c:	2001      	moveq	r0, #1
 800606e:	bd08      	pop	{r3, pc}
	if (adcVal > 3350) return 3350;
 8006070:	4618      	mov	r0, r3
	else return adcVal;
}
 8006072:	bd08      	pop	{r3, pc}
 8006074:	41200000 	.word	0x41200000
 8006078:	4317d99a 	.word	0x4317d99a

0800607c <calculate_test_params>:
	if ((start >= 0) && (start < 5)){
 800607c:	2804      	cmp	r0, #4
uint8_t calculate_test_params(uint8_t start){
 800607e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((start >= 0) && (start < 5)){
 8006082:	d849      	bhi.n	8006118 <calculate_test_params+0x9c>
 8006084:	0043      	lsls	r3, r0, #1
 8006086:	4e25      	ldr	r6, [pc, #148]	; (800611c <calculate_test_params+0xa0>)
 8006088:	3b02      	subs	r3, #2
 800608a:	4433      	add	r3, r6
			if (	(testProgram.testPressure[i] > 0) &&
 800608c:	f833 7f02 	ldrh.w	r7, [r3, #2]!
 8006090:	1c44      	adds	r4, r0, #1
 8006092:	1e7a      	subs	r2, r7, #1
 8006094:	2a76      	cmp	r2, #118	; 0x76
 8006096:	d83c      	bhi.n	8006112 <calculate_test_params+0x96>
					(testProgram.testTime[i] > 0) &&
 8006098:	f8b3 800a 	ldrh.w	r8, [r3, #10]
					(testProgram.testPressure[i] < 120) &&
 800609c:	f1b8 0f00 	cmp.w	r8, #0
 80060a0:	d037      	beq.n	8006112 <calculate_test_params+0x96>
					(testProgram.testDiffPressure[i] > 0) &&
 80060a2:	8a98      	ldrh	r0, [r3, #20]
					(testProgram.testTime[i] > 0) &&
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d034      	beq.n	8006112 <calculate_test_params+0x96>
					(testProgram.testDiffPressure[i] > 0) &&
 80060a8:	4287      	cmp	r7, r0
 80060aa:	d932      	bls.n	8006112 <calculate_test_params+0x96>
				testingParams.testDiffPressure = bar_to_adc_diff(testProgram.testDiffPressure[i]);
 80060ac:	f7ff ffcc 	bl	8006048 <bar_to_adc_diff>
 80060b0:	4d1b      	ldr	r5, [pc, #108]	; (8006120 <calculate_test_params+0xa4>)
				legalStep = i + 1;
 80060b2:	b2e4      	uxtb	r4, r4
				testingParams.testDiffPressure = bar_to_adc_diff(testProgram.testDiffPressure[i]);
 80060b4:	8128      	strh	r0, [r5, #8]
				testingParams.testPressure = bar_to_adc(testProgram.testPressure[i]);
 80060b6:	4638      	mov	r0, r7
 80060b8:	f7ff ffa6 	bl	8006008 <bar_to_adc>
				testingParams.testTimeMS = testProgram.testTime[i] * 60 * 1000;
 80060bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80060c0:	fb03 f308 	mul.w	r3, r3, r8
				if (testProgram.checkingDelaySeconds > 0 && testProgram.checkingDelaySeconds < 300){
 80060c4:	8c71      	ldrh	r1, [r6, #34]	; 0x22
				testingParams.testTimeMS = testProgram.testTime[i] * 60 * 1000;
 80060c6:	606b      	str	r3, [r5, #4]
				if (testProgram.checkingDelaySeconds > 0 && testProgram.checkingDelaySeconds < 300){
 80060c8:	1e4b      	subs	r3, r1, #1
 80060ca:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
					testingParams.checkingDelayMs = testProgram.checkingDelaySeconds * 1000;
 80060ce:	bf96      	itet	ls
 80060d0:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
					testingParams.checkingDelayMs = 20000;
 80060d4:	f644 6220 	movwhi	r2, #20000	; 0x4e20
					testingParams.checkingDelayMs = testProgram.checkingDelaySeconds * 1000;
 80060d8:	434a      	mulls	r2, r1
					testingParams.checkingDelayMs = 20000;
 80060da:	61ea      	str	r2, [r5, #28]
				if (testProgram.delayAfterAligningSeconds > 0 && testProgram.delayAfterAligningSeconds < 1500){
 80060dc:	f240 52da 	movw	r2, #1498	; 0x5da
				testingParams.testPressure = bar_to_adc(testProgram.testPressure[i]);
 80060e0:	8028      	strh	r0, [r5, #0]
				if (testProgram.delayAfterAligningSeconds > 0 && testProgram.delayAfterAligningSeconds < 1500){
 80060e2:	8bf0      	ldrh	r0, [r6, #30]
 80060e4:	1e41      	subs	r1, r0, #1
 80060e6:	b289      	uxth	r1, r1
 80060e8:	4291      	cmp	r1, r2
					testingParams.delayAfterAligningMs = testProgram.delayAfterAligningSeconds * 1000;
 80060ea:	bf9c      	itt	ls
 80060ec:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
 80060f0:	4342      	mulls	r2, r0
				if (testProgram.maxNumberOfBadPressure > 0 && testProgram.maxNumberOfBadPressure < 2000){
 80060f2:	f240 70ce 	movw	r0, #1998	; 0x7ce
					testingParams.delayAfterAligningMs = 300000;
 80060f6:	bf88      	it	hi
 80060f8:	4a0a      	ldrhi	r2, [pc, #40]	; (8006124 <calculate_test_params+0xa8>)
				if (testProgram.maxNumberOfBadPressure > 0 && testProgram.maxNumberOfBadPressure < 2000){
 80060fa:	8c31      	ldrh	r1, [r6, #32]
					testingParams.delayAfterAligningMs = 300000;
 80060fc:	61aa      	str	r2, [r5, #24]
				if (testProgram.maxNumberOfBadPressure > 0 && testProgram.maxNumberOfBadPressure < 2000){
 80060fe:	1e4a      	subs	r2, r1, #1
 8006100:	b292      	uxth	r2, r2
 8006102:	4282      	cmp	r2, r0
					testingParams.maxNumberOfBadPressure = 6;
 8006104:	bf8a      	itet	hi
 8006106:	2206      	movhi	r2, #6
					testingParams.maxNumberOfBadPressure = testProgram.maxNumberOfBadPressure;
 8006108:	8429      	strhls	r1, [r5, #32]
					testingParams.maxNumberOfBadPressure = 6;
 800610a:	842a      	strhhi	r2, [r5, #32]
}
 800610c:	4620      	mov	r0, r4
 800610e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for(i = start; i < 5; i++){
 8006112:	b2e0      	uxtb	r0, r4
 8006114:	2805      	cmp	r0, #5
 8006116:	d1b9      	bne.n	800608c <calculate_test_params+0x10>
	return legalStep;
 8006118:	2400      	movs	r4, #0
 800611a:	e7f7      	b.n	800610c <calculate_test_params+0x90>
 800611c:	2000537c 	.word	0x2000537c
 8006120:	200053a8 	.word	0x200053a8
 8006124:	000493e0 	.word	0x000493e0

08006128 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006128:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800612a:	e003      	b.n	8006134 <LoopCopyDataInit>

0800612c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800612e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006130:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006132:	3104      	adds	r1, #4

08006134 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006134:	4809      	ldr	r0, [pc, #36]	; (800615c <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8006136:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8006138:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800613a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800613c:	d3f6      	bcc.n	800612c <CopyDataInit>
  ldr r2, =_sbss
 800613e:	4a09      	ldr	r2, [pc, #36]	; (8006164 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8006140:	e002      	b.n	8006148 <LoopFillZerobss>

08006142 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006142:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006144:	f842 3b04 	str.w	r3, [r2], #4

08006148 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006148:	4b07      	ldr	r3, [pc, #28]	; (8006168 <LoopFillZerobss+0x20>)
  cmp r2, r3
 800614a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800614c:	d3f9      	bcc.n	8006142 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800614e:	f7ff fe63 	bl	8005e18 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8006152:	f7ff f999 	bl	8005488 <main>
  bx lr
 8006156:	4770      	bx	lr
  ldr r3, =_sidata
 8006158:	08007540 	.word	0x08007540
  ldr r0, =_sdata
 800615c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006160:	20000108 	.word	0x20000108
  ldr r2, =_sbss
 8006164:	20000108 	.word	0x20000108
  ldr r3, = _ebss
 8006168:	20005618 	.word	0x20005618

0800616c <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800616c:	e7fe      	b.n	800616c <CAN1_RX0_IRQHandler>
	...

08006170 <__assert_func>:
 8006170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006172:	461c      	mov	r4, r3
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <__assert_func+0x2c>)
 8006176:	4605      	mov	r5, r0
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68d8      	ldr	r0, [r3, #12]
 800617c:	b152      	cbz	r2, 8006194 <__assert_func+0x24>
 800617e:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <__assert_func+0x30>)
 8006180:	e88d 000a 	stmia.w	sp, {r1, r3}
 8006184:	9202      	str	r2, [sp, #8]
 8006186:	462b      	mov	r3, r5
 8006188:	4622      	mov	r2, r4
 800618a:	4906      	ldr	r1, [pc, #24]	; (80061a4 <__assert_func+0x34>)
 800618c:	f000 f814 	bl	80061b8 <fiprintf>
 8006190:	f000 fbce 	bl	8006930 <abort>
 8006194:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <__assert_func+0x38>)
 8006196:	461a      	mov	r2, r3
 8006198:	e7f2      	b.n	8006180 <__assert_func+0x10>
 800619a:	bf00      	nop
 800619c:	200000a4 	.word	0x200000a4
 80061a0:	08007459 	.word	0x08007459
 80061a4:	08007466 	.word	0x08007466
 80061a8:	08007494 	.word	0x08007494

080061ac <__errno>:
 80061ac:	4b01      	ldr	r3, [pc, #4]	; (80061b4 <__errno+0x8>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	200000a4 	.word	0x200000a4

080061b8 <fiprintf>:
 80061b8:	b40e      	push	{r1, r2, r3}
 80061ba:	b503      	push	{r0, r1, lr}
 80061bc:	4601      	mov	r1, r0
 80061be:	ab03      	add	r3, sp, #12
 80061c0:	4805      	ldr	r0, [pc, #20]	; (80061d8 <fiprintf+0x20>)
 80061c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c6:	6800      	ldr	r0, [r0, #0]
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	f000 f843 	bl	8006254 <_vfiprintf_r>
 80061ce:	b002      	add	sp, #8
 80061d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d4:	b003      	add	sp, #12
 80061d6:	4770      	bx	lr
 80061d8:	200000a4 	.word	0x200000a4

080061dc <memcpy>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	1e43      	subs	r3, r0, #1
 80061e0:	440a      	add	r2, r1
 80061e2:	4291      	cmp	r1, r2
 80061e4:	d100      	bne.n	80061e8 <memcpy+0xc>
 80061e6:	bd10      	pop	{r4, pc}
 80061e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061f0:	e7f7      	b.n	80061e2 <memcpy+0x6>

080061f2 <memset>:
 80061f2:	4603      	mov	r3, r0
 80061f4:	4402      	add	r2, r0
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d100      	bne.n	80061fc <memset+0xa>
 80061fa:	4770      	bx	lr
 80061fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006200:	e7f9      	b.n	80061f6 <memset+0x4>

08006202 <__sfputc_r>:
 8006202:	6893      	ldr	r3, [r2, #8]
 8006204:	b410      	push	{r4}
 8006206:	3b01      	subs	r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	6093      	str	r3, [r2, #8]
 800620c:	da08      	bge.n	8006220 <__sfputc_r+0x1e>
 800620e:	6994      	ldr	r4, [r2, #24]
 8006210:	42a3      	cmp	r3, r4
 8006212:	db02      	blt.n	800621a <__sfputc_r+0x18>
 8006214:	b2cb      	uxtb	r3, r1
 8006216:	2b0a      	cmp	r3, #10
 8006218:	d102      	bne.n	8006220 <__sfputc_r+0x1e>
 800621a:	bc10      	pop	{r4}
 800621c:	f000 bac8 	b.w	80067b0 <__swbuf_r>
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	1c58      	adds	r0, r3, #1
 8006224:	6010      	str	r0, [r2, #0]
 8006226:	7019      	strb	r1, [r3, #0]
 8006228:	b2c8      	uxtb	r0, r1
 800622a:	bc10      	pop	{r4}
 800622c:	4770      	bx	lr

0800622e <__sfputs_r>:
 800622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006230:	4606      	mov	r6, r0
 8006232:	460f      	mov	r7, r1
 8006234:	4614      	mov	r4, r2
 8006236:	18d5      	adds	r5, r2, r3
 8006238:	42ac      	cmp	r4, r5
 800623a:	d101      	bne.n	8006240 <__sfputs_r+0x12>
 800623c:	2000      	movs	r0, #0
 800623e:	e007      	b.n	8006250 <__sfputs_r+0x22>
 8006240:	463a      	mov	r2, r7
 8006242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ffdb 	bl	8006202 <__sfputc_r>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d1f3      	bne.n	8006238 <__sfputs_r+0xa>
 8006250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006254 <_vfiprintf_r>:
 8006254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	b09d      	sub	sp, #116	; 0x74
 800625a:	460c      	mov	r4, r1
 800625c:	4617      	mov	r7, r2
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	4606      	mov	r6, r0
 8006262:	b118      	cbz	r0, 800626c <_vfiprintf_r+0x18>
 8006264:	6983      	ldr	r3, [r0, #24]
 8006266:	b90b      	cbnz	r3, 800626c <_vfiprintf_r+0x18>
 8006268:	f000 fc5c 	bl	8006b24 <__sinit>
 800626c:	4b7c      	ldr	r3, [pc, #496]	; (8006460 <_vfiprintf_r+0x20c>)
 800626e:	429c      	cmp	r4, r3
 8006270:	d157      	bne.n	8006322 <_vfiprintf_r+0xce>
 8006272:	6874      	ldr	r4, [r6, #4]
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	0718      	lsls	r0, r3, #28
 8006278:	d55d      	bpl.n	8006336 <_vfiprintf_r+0xe2>
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d05a      	beq.n	8006336 <_vfiprintf_r+0xe2>
 8006280:	2300      	movs	r3, #0
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	2320      	movs	r3, #32
 8006286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800628a:	2330      	movs	r3, #48	; 0x30
 800628c:	f04f 0b01 	mov.w	fp, #1
 8006290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006294:	46b8      	mov	r8, r7
 8006296:	4645      	mov	r5, r8
 8006298:	f815 3b01 	ldrb.w	r3, [r5], #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d155      	bne.n	800634c <_vfiprintf_r+0xf8>
 80062a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80062a4:	d00b      	beq.n	80062be <_vfiprintf_r+0x6a>
 80062a6:	4653      	mov	r3, sl
 80062a8:	463a      	mov	r2, r7
 80062aa:	4621      	mov	r1, r4
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff ffbe 	bl	800622e <__sfputs_r>
 80062b2:	3001      	adds	r0, #1
 80062b4:	f000 80c4 	beq.w	8006440 <_vfiprintf_r+0x1ec>
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	4453      	add	r3, sl
 80062bc:	9309      	str	r3, [sp, #36]	; 0x24
 80062be:	f898 3000 	ldrb.w	r3, [r8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80bc 	beq.w	8006440 <_vfiprintf_r+0x1ec>
 80062c8:	2300      	movs	r3, #0
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	9307      	str	r3, [sp, #28]
 80062d2:	9205      	str	r2, [sp, #20]
 80062d4:	9306      	str	r3, [sp, #24]
 80062d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062da:	931a      	str	r3, [sp, #104]	; 0x68
 80062dc:	2205      	movs	r2, #5
 80062de:	7829      	ldrb	r1, [r5, #0]
 80062e0:	4860      	ldr	r0, [pc, #384]	; (8006464 <_vfiprintf_r+0x210>)
 80062e2:	f000 fd0d 	bl	8006d00 <memchr>
 80062e6:	f105 0801 	add.w	r8, r5, #1
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d131      	bne.n	8006354 <_vfiprintf_r+0x100>
 80062f0:	06d9      	lsls	r1, r3, #27
 80062f2:	bf44      	itt	mi
 80062f4:	2220      	movmi	r2, #32
 80062f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062fa:	071a      	lsls	r2, r3, #28
 80062fc:	bf44      	itt	mi
 80062fe:	222b      	movmi	r2, #43	; 0x2b
 8006300:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006304:	782a      	ldrb	r2, [r5, #0]
 8006306:	2a2a      	cmp	r2, #42	; 0x2a
 8006308:	d02c      	beq.n	8006364 <_vfiprintf_r+0x110>
 800630a:	2100      	movs	r1, #0
 800630c:	200a      	movs	r0, #10
 800630e:	9a07      	ldr	r2, [sp, #28]
 8006310:	46a8      	mov	r8, r5
 8006312:	f898 3000 	ldrb.w	r3, [r8]
 8006316:	3501      	adds	r5, #1
 8006318:	3b30      	subs	r3, #48	; 0x30
 800631a:	2b09      	cmp	r3, #9
 800631c:	d96d      	bls.n	80063fa <_vfiprintf_r+0x1a6>
 800631e:	b371      	cbz	r1, 800637e <_vfiprintf_r+0x12a>
 8006320:	e026      	b.n	8006370 <_vfiprintf_r+0x11c>
 8006322:	4b51      	ldr	r3, [pc, #324]	; (8006468 <_vfiprintf_r+0x214>)
 8006324:	429c      	cmp	r4, r3
 8006326:	d101      	bne.n	800632c <_vfiprintf_r+0xd8>
 8006328:	68b4      	ldr	r4, [r6, #8]
 800632a:	e7a3      	b.n	8006274 <_vfiprintf_r+0x20>
 800632c:	4b4f      	ldr	r3, [pc, #316]	; (800646c <_vfiprintf_r+0x218>)
 800632e:	429c      	cmp	r4, r3
 8006330:	bf08      	it	eq
 8006332:	68f4      	ldreq	r4, [r6, #12]
 8006334:	e79e      	b.n	8006274 <_vfiprintf_r+0x20>
 8006336:	4621      	mov	r1, r4
 8006338:	4630      	mov	r0, r6
 800633a:	f000 fa8b 	bl	8006854 <__swsetup_r>
 800633e:	2800      	cmp	r0, #0
 8006340:	d09e      	beq.n	8006280 <_vfiprintf_r+0x2c>
 8006342:	f04f 30ff 	mov.w	r0, #4294967295
 8006346:	b01d      	add	sp, #116	; 0x74
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	2b25      	cmp	r3, #37	; 0x25
 800634e:	d0a7      	beq.n	80062a0 <_vfiprintf_r+0x4c>
 8006350:	46a8      	mov	r8, r5
 8006352:	e7a0      	b.n	8006296 <_vfiprintf_r+0x42>
 8006354:	4a43      	ldr	r2, [pc, #268]	; (8006464 <_vfiprintf_r+0x210>)
 8006356:	4645      	mov	r5, r8
 8006358:	1a80      	subs	r0, r0, r2
 800635a:	fa0b f000 	lsl.w	r0, fp, r0
 800635e:	4318      	orrs	r0, r3
 8006360:	9004      	str	r0, [sp, #16]
 8006362:	e7bb      	b.n	80062dc <_vfiprintf_r+0x88>
 8006364:	9a03      	ldr	r2, [sp, #12]
 8006366:	1d11      	adds	r1, r2, #4
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	9103      	str	r1, [sp, #12]
 800636c:	2a00      	cmp	r2, #0
 800636e:	db01      	blt.n	8006374 <_vfiprintf_r+0x120>
 8006370:	9207      	str	r2, [sp, #28]
 8006372:	e004      	b.n	800637e <_vfiprintf_r+0x12a>
 8006374:	4252      	negs	r2, r2
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	9207      	str	r2, [sp, #28]
 800637c:	9304      	str	r3, [sp, #16]
 800637e:	f898 3000 	ldrb.w	r3, [r8]
 8006382:	2b2e      	cmp	r3, #46	; 0x2e
 8006384:	d110      	bne.n	80063a8 <_vfiprintf_r+0x154>
 8006386:	f898 3001 	ldrb.w	r3, [r8, #1]
 800638a:	f108 0101 	add.w	r1, r8, #1
 800638e:	2b2a      	cmp	r3, #42	; 0x2a
 8006390:	d137      	bne.n	8006402 <_vfiprintf_r+0x1ae>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	f108 0802 	add.w	r8, r8, #2
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	9203      	str	r2, [sp, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bfb8      	it	lt
 80063a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80063a6:	9305      	str	r3, [sp, #20]
 80063a8:	4d31      	ldr	r5, [pc, #196]	; (8006470 <_vfiprintf_r+0x21c>)
 80063aa:	2203      	movs	r2, #3
 80063ac:	f898 1000 	ldrb.w	r1, [r8]
 80063b0:	4628      	mov	r0, r5
 80063b2:	f000 fca5 	bl	8006d00 <memchr>
 80063b6:	b140      	cbz	r0, 80063ca <_vfiprintf_r+0x176>
 80063b8:	2340      	movs	r3, #64	; 0x40
 80063ba:	1b40      	subs	r0, r0, r5
 80063bc:	fa03 f000 	lsl.w	r0, r3, r0
 80063c0:	9b04      	ldr	r3, [sp, #16]
 80063c2:	f108 0801 	add.w	r8, r8, #1
 80063c6:	4303      	orrs	r3, r0
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	f898 1000 	ldrb.w	r1, [r8]
 80063ce:	2206      	movs	r2, #6
 80063d0:	4828      	ldr	r0, [pc, #160]	; (8006474 <_vfiprintf_r+0x220>)
 80063d2:	f108 0701 	add.w	r7, r8, #1
 80063d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063da:	f000 fc91 	bl	8006d00 <memchr>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d034      	beq.n	800644c <_vfiprintf_r+0x1f8>
 80063e2:	4b25      	ldr	r3, [pc, #148]	; (8006478 <_vfiprintf_r+0x224>)
 80063e4:	bb03      	cbnz	r3, 8006428 <_vfiprintf_r+0x1d4>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	3307      	adds	r3, #7
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	3308      	adds	r3, #8
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f4:	444b      	add	r3, r9
 80063f6:	9309      	str	r3, [sp, #36]	; 0x24
 80063f8:	e74c      	b.n	8006294 <_vfiprintf_r+0x40>
 80063fa:	fb00 3202 	mla	r2, r0, r2, r3
 80063fe:	2101      	movs	r1, #1
 8006400:	e786      	b.n	8006310 <_vfiprintf_r+0xbc>
 8006402:	2300      	movs	r3, #0
 8006404:	250a      	movs	r5, #10
 8006406:	4618      	mov	r0, r3
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	4688      	mov	r8, r1
 800640c:	f898 2000 	ldrb.w	r2, [r8]
 8006410:	3101      	adds	r1, #1
 8006412:	3a30      	subs	r2, #48	; 0x30
 8006414:	2a09      	cmp	r2, #9
 8006416:	d903      	bls.n	8006420 <_vfiprintf_r+0x1cc>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0c5      	beq.n	80063a8 <_vfiprintf_r+0x154>
 800641c:	9005      	str	r0, [sp, #20]
 800641e:	e7c3      	b.n	80063a8 <_vfiprintf_r+0x154>
 8006420:	fb05 2000 	mla	r0, r5, r0, r2
 8006424:	2301      	movs	r3, #1
 8006426:	e7f0      	b.n	800640a <_vfiprintf_r+0x1b6>
 8006428:	ab03      	add	r3, sp, #12
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4622      	mov	r2, r4
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <_vfiprintf_r+0x228>)
 8006430:	a904      	add	r1, sp, #16
 8006432:	4630      	mov	r0, r6
 8006434:	f3af 8000 	nop.w
 8006438:	f1b0 3fff 	cmp.w	r0, #4294967295
 800643c:	4681      	mov	r9, r0
 800643e:	d1d8      	bne.n	80063f2 <_vfiprintf_r+0x19e>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	065b      	lsls	r3, r3, #25
 8006444:	f53f af7d 	bmi.w	8006342 <_vfiprintf_r+0xee>
 8006448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800644a:	e77c      	b.n	8006346 <_vfiprintf_r+0xf2>
 800644c:	ab03      	add	r3, sp, #12
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	4622      	mov	r2, r4
 8006452:	4b0a      	ldr	r3, [pc, #40]	; (800647c <_vfiprintf_r+0x228>)
 8006454:	a904      	add	r1, sp, #16
 8006456:	4630      	mov	r0, r6
 8006458:	f000 f88a 	bl	8006570 <_printf_i>
 800645c:	e7ec      	b.n	8006438 <_vfiprintf_r+0x1e4>
 800645e:	bf00      	nop
 8006460:	080074f0 	.word	0x080074f0
 8006464:	0800749c 	.word	0x0800749c
 8006468:	08007510 	.word	0x08007510
 800646c:	080074d0 	.word	0x080074d0
 8006470:	080074a2 	.word	0x080074a2
 8006474:	080074a6 	.word	0x080074a6
 8006478:	00000000 	.word	0x00000000
 800647c:	0800622f 	.word	0x0800622f

08006480 <_printf_common>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	4691      	mov	r9, r2
 8006486:	461f      	mov	r7, r3
 8006488:	688a      	ldr	r2, [r1, #8]
 800648a:	690b      	ldr	r3, [r1, #16]
 800648c:	4606      	mov	r6, r0
 800648e:	4293      	cmp	r3, r2
 8006490:	bfb8      	it	lt
 8006492:	4613      	movlt	r3, r2
 8006494:	f8c9 3000 	str.w	r3, [r9]
 8006498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800649c:	460c      	mov	r4, r1
 800649e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a2:	b112      	cbz	r2, 80064aa <_printf_common+0x2a>
 80064a4:	3301      	adds	r3, #1
 80064a6:	f8c9 3000 	str.w	r3, [r9]
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	0699      	lsls	r1, r3, #26
 80064ae:	bf42      	ittt	mi
 80064b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80064b4:	3302      	addmi	r3, #2
 80064b6:	f8c9 3000 	strmi.w	r3, [r9]
 80064ba:	6825      	ldr	r5, [r4, #0]
 80064bc:	f015 0506 	ands.w	r5, r5, #6
 80064c0:	d107      	bne.n	80064d2 <_printf_common+0x52>
 80064c2:	f104 0a19 	add.w	sl, r4, #25
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	f8d9 2000 	ldr.w	r2, [r9]
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	429d      	cmp	r5, r3
 80064d0:	db2a      	blt.n	8006528 <_printf_common+0xa8>
 80064d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	3300      	adds	r3, #0
 80064da:	bf18      	it	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	0692      	lsls	r2, r2, #26
 80064e0:	d42f      	bmi.n	8006542 <_printf_common+0xc2>
 80064e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e6:	4639      	mov	r1, r7
 80064e8:	4630      	mov	r0, r6
 80064ea:	47c0      	blx	r8
 80064ec:	3001      	adds	r0, #1
 80064ee:	d022      	beq.n	8006536 <_printf_common+0xb6>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	68e5      	ldr	r5, [r4, #12]
 80064f4:	f003 0306 	and.w	r3, r3, #6
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	bf18      	it	ne
 80064fc:	2500      	movne	r5, #0
 80064fe:	f8d9 2000 	ldr.w	r2, [r9]
 8006502:	f04f 0900 	mov.w	r9, #0
 8006506:	bf08      	it	eq
 8006508:	1aad      	subeq	r5, r5, r2
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	6922      	ldr	r2, [r4, #16]
 800650e:	bf08      	it	eq
 8006510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006514:	4293      	cmp	r3, r2
 8006516:	bfc4      	itt	gt
 8006518:	1a9b      	subgt	r3, r3, r2
 800651a:	18ed      	addgt	r5, r5, r3
 800651c:	341a      	adds	r4, #26
 800651e:	454d      	cmp	r5, r9
 8006520:	d11b      	bne.n	800655a <_printf_common+0xda>
 8006522:	2000      	movs	r0, #0
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006528:	2301      	movs	r3, #1
 800652a:	4652      	mov	r2, sl
 800652c:	4639      	mov	r1, r7
 800652e:	4630      	mov	r0, r6
 8006530:	47c0      	blx	r8
 8006532:	3001      	adds	r0, #1
 8006534:	d103      	bne.n	800653e <_printf_common+0xbe>
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653e:	3501      	adds	r5, #1
 8006540:	e7c1      	b.n	80064c6 <_printf_common+0x46>
 8006542:	2030      	movs	r0, #48	; 0x30
 8006544:	18e1      	adds	r1, r4, r3
 8006546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006550:	4422      	add	r2, r4
 8006552:	3302      	adds	r3, #2
 8006554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006558:	e7c3      	b.n	80064e2 <_printf_common+0x62>
 800655a:	2301      	movs	r3, #1
 800655c:	4622      	mov	r2, r4
 800655e:	4639      	mov	r1, r7
 8006560:	4630      	mov	r0, r6
 8006562:	47c0      	blx	r8
 8006564:	3001      	adds	r0, #1
 8006566:	d0e6      	beq.n	8006536 <_printf_common+0xb6>
 8006568:	f109 0901 	add.w	r9, r9, #1
 800656c:	e7d7      	b.n	800651e <_printf_common+0x9e>
	...

08006570 <_printf_i>:
 8006570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006574:	4617      	mov	r7, r2
 8006576:	7e0a      	ldrb	r2, [r1, #24]
 8006578:	b085      	sub	sp, #20
 800657a:	2a6e      	cmp	r2, #110	; 0x6e
 800657c:	4698      	mov	r8, r3
 800657e:	4606      	mov	r6, r0
 8006580:	460c      	mov	r4, r1
 8006582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006584:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006588:	f000 80bc 	beq.w	8006704 <_printf_i+0x194>
 800658c:	d81a      	bhi.n	80065c4 <_printf_i+0x54>
 800658e:	2a63      	cmp	r2, #99	; 0x63
 8006590:	d02e      	beq.n	80065f0 <_printf_i+0x80>
 8006592:	d80a      	bhi.n	80065aa <_printf_i+0x3a>
 8006594:	2a00      	cmp	r2, #0
 8006596:	f000 80c8 	beq.w	800672a <_printf_i+0x1ba>
 800659a:	2a58      	cmp	r2, #88	; 0x58
 800659c:	f000 808a 	beq.w	80066b4 <_printf_i+0x144>
 80065a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80065a8:	e02a      	b.n	8006600 <_printf_i+0x90>
 80065aa:	2a64      	cmp	r2, #100	; 0x64
 80065ac:	d001      	beq.n	80065b2 <_printf_i+0x42>
 80065ae:	2a69      	cmp	r2, #105	; 0x69
 80065b0:	d1f6      	bne.n	80065a0 <_printf_i+0x30>
 80065b2:	6821      	ldr	r1, [r4, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80065ba:	d023      	beq.n	8006604 <_printf_i+0x94>
 80065bc:	1d11      	adds	r1, r2, #4
 80065be:	6019      	str	r1, [r3, #0]
 80065c0:	6813      	ldr	r3, [r2, #0]
 80065c2:	e027      	b.n	8006614 <_printf_i+0xa4>
 80065c4:	2a73      	cmp	r2, #115	; 0x73
 80065c6:	f000 80b4 	beq.w	8006732 <_printf_i+0x1c2>
 80065ca:	d808      	bhi.n	80065de <_printf_i+0x6e>
 80065cc:	2a6f      	cmp	r2, #111	; 0x6f
 80065ce:	d02a      	beq.n	8006626 <_printf_i+0xb6>
 80065d0:	2a70      	cmp	r2, #112	; 0x70
 80065d2:	d1e5      	bne.n	80065a0 <_printf_i+0x30>
 80065d4:	680a      	ldr	r2, [r1, #0]
 80065d6:	f042 0220 	orr.w	r2, r2, #32
 80065da:	600a      	str	r2, [r1, #0]
 80065dc:	e003      	b.n	80065e6 <_printf_i+0x76>
 80065de:	2a75      	cmp	r2, #117	; 0x75
 80065e0:	d021      	beq.n	8006626 <_printf_i+0xb6>
 80065e2:	2a78      	cmp	r2, #120	; 0x78
 80065e4:	d1dc      	bne.n	80065a0 <_printf_i+0x30>
 80065e6:	2278      	movs	r2, #120	; 0x78
 80065e8:	496f      	ldr	r1, [pc, #444]	; (80067a8 <_printf_i+0x238>)
 80065ea:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80065ee:	e064      	b.n	80066ba <_printf_i+0x14a>
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80065f6:	1d11      	adds	r1, r2, #4
 80065f8:	6019      	str	r1, [r3, #0]
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006600:	2301      	movs	r3, #1
 8006602:	e0a3      	b.n	800674c <_printf_i+0x1dc>
 8006604:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006608:	f102 0104 	add.w	r1, r2, #4
 800660c:	6019      	str	r1, [r3, #0]
 800660e:	d0d7      	beq.n	80065c0 <_printf_i+0x50>
 8006610:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006614:	2b00      	cmp	r3, #0
 8006616:	da03      	bge.n	8006620 <_printf_i+0xb0>
 8006618:	222d      	movs	r2, #45	; 0x2d
 800661a:	425b      	negs	r3, r3
 800661c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006620:	4962      	ldr	r1, [pc, #392]	; (80067ac <_printf_i+0x23c>)
 8006622:	220a      	movs	r2, #10
 8006624:	e017      	b.n	8006656 <_printf_i+0xe6>
 8006626:	6820      	ldr	r0, [r4, #0]
 8006628:	6819      	ldr	r1, [r3, #0]
 800662a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800662e:	d003      	beq.n	8006638 <_printf_i+0xc8>
 8006630:	1d08      	adds	r0, r1, #4
 8006632:	6018      	str	r0, [r3, #0]
 8006634:	680b      	ldr	r3, [r1, #0]
 8006636:	e006      	b.n	8006646 <_printf_i+0xd6>
 8006638:	f010 0f40 	tst.w	r0, #64	; 0x40
 800663c:	f101 0004 	add.w	r0, r1, #4
 8006640:	6018      	str	r0, [r3, #0]
 8006642:	d0f7      	beq.n	8006634 <_printf_i+0xc4>
 8006644:	880b      	ldrh	r3, [r1, #0]
 8006646:	2a6f      	cmp	r2, #111	; 0x6f
 8006648:	bf14      	ite	ne
 800664a:	220a      	movne	r2, #10
 800664c:	2208      	moveq	r2, #8
 800664e:	4957      	ldr	r1, [pc, #348]	; (80067ac <_printf_i+0x23c>)
 8006650:	2000      	movs	r0, #0
 8006652:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006656:	6865      	ldr	r5, [r4, #4]
 8006658:	2d00      	cmp	r5, #0
 800665a:	60a5      	str	r5, [r4, #8]
 800665c:	f2c0 809c 	blt.w	8006798 <_printf_i+0x228>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	f020 0004 	bic.w	r0, r0, #4
 8006666:	6020      	str	r0, [r4, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d13f      	bne.n	80066ec <_printf_i+0x17c>
 800666c:	2d00      	cmp	r5, #0
 800666e:	f040 8095 	bne.w	800679c <_printf_i+0x22c>
 8006672:	4675      	mov	r5, lr
 8006674:	2a08      	cmp	r2, #8
 8006676:	d10b      	bne.n	8006690 <_printf_i+0x120>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	07da      	lsls	r2, r3, #31
 800667c:	d508      	bpl.n	8006690 <_printf_i+0x120>
 800667e:	6923      	ldr	r3, [r4, #16]
 8006680:	6862      	ldr	r2, [r4, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	bfde      	ittt	le
 8006686:	2330      	movle	r3, #48	; 0x30
 8006688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800668c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006690:	ebae 0305 	sub.w	r3, lr, r5
 8006694:	6123      	str	r3, [r4, #16]
 8006696:	f8cd 8000 	str.w	r8, [sp]
 800669a:	463b      	mov	r3, r7
 800669c:	aa03      	add	r2, sp, #12
 800669e:	4621      	mov	r1, r4
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7ff feed 	bl	8006480 <_printf_common>
 80066a6:	3001      	adds	r0, #1
 80066a8:	d155      	bne.n	8006756 <_printf_i+0x1e6>
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295
 80066ae:	b005      	add	sp, #20
 80066b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80066b8:	493c      	ldr	r1, [pc, #240]	; (80067ac <_printf_i+0x23c>)
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80066c2:	f100 0504 	add.w	r5, r0, #4
 80066c6:	601d      	str	r5, [r3, #0]
 80066c8:	d001      	beq.n	80066ce <_printf_i+0x15e>
 80066ca:	6803      	ldr	r3, [r0, #0]
 80066cc:	e002      	b.n	80066d4 <_printf_i+0x164>
 80066ce:	0655      	lsls	r5, r2, #25
 80066d0:	d5fb      	bpl.n	80066ca <_printf_i+0x15a>
 80066d2:	8803      	ldrh	r3, [r0, #0]
 80066d4:	07d0      	lsls	r0, r2, #31
 80066d6:	bf44      	itt	mi
 80066d8:	f042 0220 	orrmi.w	r2, r2, #32
 80066dc:	6022      	strmi	r2, [r4, #0]
 80066de:	b91b      	cbnz	r3, 80066e8 <_printf_i+0x178>
 80066e0:	6822      	ldr	r2, [r4, #0]
 80066e2:	f022 0220 	bic.w	r2, r2, #32
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	2210      	movs	r2, #16
 80066ea:	e7b1      	b.n	8006650 <_printf_i+0xe0>
 80066ec:	4675      	mov	r5, lr
 80066ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80066f2:	fb02 3310 	mls	r3, r2, r0, r3
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066fc:	4603      	mov	r3, r0
 80066fe:	2800      	cmp	r0, #0
 8006700:	d1f5      	bne.n	80066ee <_printf_i+0x17e>
 8006702:	e7b7      	b.n	8006674 <_printf_i+0x104>
 8006704:	6808      	ldr	r0, [r1, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	f010 0f80 	tst.w	r0, #128	; 0x80
 800670c:	6949      	ldr	r1, [r1, #20]
 800670e:	d004      	beq.n	800671a <_printf_i+0x1aa>
 8006710:	1d10      	adds	r0, r2, #4
 8006712:	6018      	str	r0, [r3, #0]
 8006714:	6813      	ldr	r3, [r2, #0]
 8006716:	6019      	str	r1, [r3, #0]
 8006718:	e007      	b.n	800672a <_printf_i+0x1ba>
 800671a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800671e:	f102 0004 	add.w	r0, r2, #4
 8006722:	6018      	str	r0, [r3, #0]
 8006724:	6813      	ldr	r3, [r2, #0]
 8006726:	d0f6      	beq.n	8006716 <_printf_i+0x1a6>
 8006728:	8019      	strh	r1, [r3, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	4675      	mov	r5, lr
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	e7b1      	b.n	8006696 <_printf_i+0x126>
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	1d11      	adds	r1, r2, #4
 8006736:	6019      	str	r1, [r3, #0]
 8006738:	6815      	ldr	r5, [r2, #0]
 800673a:	2100      	movs	r1, #0
 800673c:	6862      	ldr	r2, [r4, #4]
 800673e:	4628      	mov	r0, r5
 8006740:	f000 fade 	bl	8006d00 <memchr>
 8006744:	b108      	cbz	r0, 800674a <_printf_i+0x1da>
 8006746:	1b40      	subs	r0, r0, r5
 8006748:	6060      	str	r0, [r4, #4]
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	2300      	movs	r3, #0
 8006750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006754:	e79f      	b.n	8006696 <_printf_i+0x126>
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	462a      	mov	r2, r5
 800675a:	4639      	mov	r1, r7
 800675c:	4630      	mov	r0, r6
 800675e:	47c0      	blx	r8
 8006760:	3001      	adds	r0, #1
 8006762:	d0a2      	beq.n	80066aa <_printf_i+0x13a>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	079b      	lsls	r3, r3, #30
 8006768:	d507      	bpl.n	800677a <_printf_i+0x20a>
 800676a:	2500      	movs	r5, #0
 800676c:	f104 0919 	add.w	r9, r4, #25
 8006770:	68e3      	ldr	r3, [r4, #12]
 8006772:	9a03      	ldr	r2, [sp, #12]
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	429d      	cmp	r5, r3
 8006778:	db05      	blt.n	8006786 <_printf_i+0x216>
 800677a:	68e0      	ldr	r0, [r4, #12]
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	4298      	cmp	r0, r3
 8006780:	bfb8      	it	lt
 8006782:	4618      	movlt	r0, r3
 8006784:	e793      	b.n	80066ae <_printf_i+0x13e>
 8006786:	2301      	movs	r3, #1
 8006788:	464a      	mov	r2, r9
 800678a:	4639      	mov	r1, r7
 800678c:	4630      	mov	r0, r6
 800678e:	47c0      	blx	r8
 8006790:	3001      	adds	r0, #1
 8006792:	d08a      	beq.n	80066aa <_printf_i+0x13a>
 8006794:	3501      	adds	r5, #1
 8006796:	e7eb      	b.n	8006770 <_printf_i+0x200>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1a7      	bne.n	80066ec <_printf_i+0x17c>
 800679c:	780b      	ldrb	r3, [r1, #0]
 800679e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067a6:	e765      	b.n	8006674 <_printf_i+0x104>
 80067a8:	080074be 	.word	0x080074be
 80067ac:	080074ad 	.word	0x080074ad

080067b0 <__swbuf_r>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	460e      	mov	r6, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	4605      	mov	r5, r0
 80067b8:	b118      	cbz	r0, 80067c2 <__swbuf_r+0x12>
 80067ba:	6983      	ldr	r3, [r0, #24]
 80067bc:	b90b      	cbnz	r3, 80067c2 <__swbuf_r+0x12>
 80067be:	f000 f9b1 	bl	8006b24 <__sinit>
 80067c2:	4b21      	ldr	r3, [pc, #132]	; (8006848 <__swbuf_r+0x98>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d12a      	bne.n	800681e <__swbuf_r+0x6e>
 80067c8:	686c      	ldr	r4, [r5, #4]
 80067ca:	69a3      	ldr	r3, [r4, #24]
 80067cc:	60a3      	str	r3, [r4, #8]
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	071a      	lsls	r2, r3, #28
 80067d2:	d52e      	bpl.n	8006832 <__swbuf_r+0x82>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	b363      	cbz	r3, 8006832 <__swbuf_r+0x82>
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	b2f6      	uxtb	r6, r6
 80067de:	1ac0      	subs	r0, r0, r3
 80067e0:	6963      	ldr	r3, [r4, #20]
 80067e2:	4637      	mov	r7, r6
 80067e4:	4298      	cmp	r0, r3
 80067e6:	db04      	blt.n	80067f2 <__swbuf_r+0x42>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f930 	bl	8006a50 <_fflush_r>
 80067f0:	bb28      	cbnz	r0, 800683e <__swbuf_r+0x8e>
 80067f2:	68a3      	ldr	r3, [r4, #8]
 80067f4:	3001      	adds	r0, #1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	60a3      	str	r3, [r4, #8]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	701e      	strb	r6, [r3, #0]
 8006802:	6963      	ldr	r3, [r4, #20]
 8006804:	4298      	cmp	r0, r3
 8006806:	d004      	beq.n	8006812 <__swbuf_r+0x62>
 8006808:	89a3      	ldrh	r3, [r4, #12]
 800680a:	07db      	lsls	r3, r3, #31
 800680c:	d519      	bpl.n	8006842 <__swbuf_r+0x92>
 800680e:	2e0a      	cmp	r6, #10
 8006810:	d117      	bne.n	8006842 <__swbuf_r+0x92>
 8006812:	4621      	mov	r1, r4
 8006814:	4628      	mov	r0, r5
 8006816:	f000 f91b 	bl	8006a50 <_fflush_r>
 800681a:	b190      	cbz	r0, 8006842 <__swbuf_r+0x92>
 800681c:	e00f      	b.n	800683e <__swbuf_r+0x8e>
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <__swbuf_r+0x9c>)
 8006820:	429c      	cmp	r4, r3
 8006822:	d101      	bne.n	8006828 <__swbuf_r+0x78>
 8006824:	68ac      	ldr	r4, [r5, #8]
 8006826:	e7d0      	b.n	80067ca <__swbuf_r+0x1a>
 8006828:	4b09      	ldr	r3, [pc, #36]	; (8006850 <__swbuf_r+0xa0>)
 800682a:	429c      	cmp	r4, r3
 800682c:	bf08      	it	eq
 800682e:	68ec      	ldreq	r4, [r5, #12]
 8006830:	e7cb      	b.n	80067ca <__swbuf_r+0x1a>
 8006832:	4621      	mov	r1, r4
 8006834:	4628      	mov	r0, r5
 8006836:	f000 f80d 	bl	8006854 <__swsetup_r>
 800683a:	2800      	cmp	r0, #0
 800683c:	d0cc      	beq.n	80067d8 <__swbuf_r+0x28>
 800683e:	f04f 37ff 	mov.w	r7, #4294967295
 8006842:	4638      	mov	r0, r7
 8006844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006846:	bf00      	nop
 8006848:	080074f0 	.word	0x080074f0
 800684c:	08007510 	.word	0x08007510
 8006850:	080074d0 	.word	0x080074d0

08006854 <__swsetup_r>:
 8006854:	4b32      	ldr	r3, [pc, #200]	; (8006920 <__swsetup_r+0xcc>)
 8006856:	b570      	push	{r4, r5, r6, lr}
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	4606      	mov	r6, r0
 800685c:	460c      	mov	r4, r1
 800685e:	b125      	cbz	r5, 800686a <__swsetup_r+0x16>
 8006860:	69ab      	ldr	r3, [r5, #24]
 8006862:	b913      	cbnz	r3, 800686a <__swsetup_r+0x16>
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f95d 	bl	8006b24 <__sinit>
 800686a:	4b2e      	ldr	r3, [pc, #184]	; (8006924 <__swsetup_r+0xd0>)
 800686c:	429c      	cmp	r4, r3
 800686e:	d10f      	bne.n	8006890 <__swsetup_r+0x3c>
 8006870:	686c      	ldr	r4, [r5, #4]
 8006872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006876:	b29a      	uxth	r2, r3
 8006878:	0715      	lsls	r5, r2, #28
 800687a:	d42c      	bmi.n	80068d6 <__swsetup_r+0x82>
 800687c:	06d0      	lsls	r0, r2, #27
 800687e:	d411      	bmi.n	80068a4 <__swsetup_r+0x50>
 8006880:	2209      	movs	r2, #9
 8006882:	6032      	str	r2, [r6, #0]
 8006884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	f04f 30ff 	mov.w	r0, #4294967295
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	4b25      	ldr	r3, [pc, #148]	; (8006928 <__swsetup_r+0xd4>)
 8006892:	429c      	cmp	r4, r3
 8006894:	d101      	bne.n	800689a <__swsetup_r+0x46>
 8006896:	68ac      	ldr	r4, [r5, #8]
 8006898:	e7eb      	b.n	8006872 <__swsetup_r+0x1e>
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <__swsetup_r+0xd8>)
 800689c:	429c      	cmp	r4, r3
 800689e:	bf08      	it	eq
 80068a0:	68ec      	ldreq	r4, [r5, #12]
 80068a2:	e7e6      	b.n	8006872 <__swsetup_r+0x1e>
 80068a4:	0751      	lsls	r1, r2, #29
 80068a6:	d512      	bpl.n	80068ce <__swsetup_r+0x7a>
 80068a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068aa:	b141      	cbz	r1, 80068be <__swsetup_r+0x6a>
 80068ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <__swsetup_r+0x66>
 80068b4:	4630      	mov	r0, r6
 80068b6:	f000 fa31 	bl	8006d1c <_free_r>
 80068ba:	2300      	movs	r3, #0
 80068bc:	6363      	str	r3, [r4, #52]	; 0x34
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	2300      	movs	r3, #0
 80068c8:	6063      	str	r3, [r4, #4]
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f043 0308 	orr.w	r3, r3, #8
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	b94b      	cbnz	r3, 80068ee <__swsetup_r+0x9a>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e4:	d003      	beq.n	80068ee <__swsetup_r+0x9a>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4630      	mov	r0, r6
 80068ea:	f000 f9c9 	bl	8006c80 <__smakebuf_r>
 80068ee:	89a2      	ldrh	r2, [r4, #12]
 80068f0:	f012 0301 	ands.w	r3, r2, #1
 80068f4:	d00c      	beq.n	8006910 <__swsetup_r+0xbc>
 80068f6:	2300      	movs	r3, #0
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	6963      	ldr	r3, [r4, #20]
 80068fc:	425b      	negs	r3, r3
 80068fe:	61a3      	str	r3, [r4, #24]
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b953      	cbnz	r3, 800691a <__swsetup_r+0xc6>
 8006904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006908:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800690c:	d1ba      	bne.n	8006884 <__swsetup_r+0x30>
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	0792      	lsls	r2, r2, #30
 8006912:	bf58      	it	pl
 8006914:	6963      	ldrpl	r3, [r4, #20]
 8006916:	60a3      	str	r3, [r4, #8]
 8006918:	e7f2      	b.n	8006900 <__swsetup_r+0xac>
 800691a:	2000      	movs	r0, #0
 800691c:	e7f7      	b.n	800690e <__swsetup_r+0xba>
 800691e:	bf00      	nop
 8006920:	200000a4 	.word	0x200000a4
 8006924:	080074f0 	.word	0x080074f0
 8006928:	08007510 	.word	0x08007510
 800692c:	080074d0 	.word	0x080074d0

08006930 <abort>:
 8006930:	b508      	push	{r3, lr}
 8006932:	2006      	movs	r0, #6
 8006934:	f000 fad4 	bl	8006ee0 <raise>
 8006938:	2001      	movs	r0, #1
 800693a:	f7ff fa25 	bl	8005d88 <_exit>
	...

08006940 <__sflush_r>:
 8006940:	898a      	ldrh	r2, [r1, #12]
 8006942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006946:	4605      	mov	r5, r0
 8006948:	0710      	lsls	r0, r2, #28
 800694a:	460c      	mov	r4, r1
 800694c:	d45a      	bmi.n	8006a04 <__sflush_r+0xc4>
 800694e:	684b      	ldr	r3, [r1, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	dc05      	bgt.n	8006960 <__sflush_r+0x20>
 8006954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	dc02      	bgt.n	8006960 <__sflush_r+0x20>
 800695a:	2000      	movs	r0, #0
 800695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006962:	2e00      	cmp	r6, #0
 8006964:	d0f9      	beq.n	800695a <__sflush_r+0x1a>
 8006966:	2300      	movs	r3, #0
 8006968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800696c:	682f      	ldr	r7, [r5, #0]
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	d033      	beq.n	80069da <__sflush_r+0x9a>
 8006972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	075a      	lsls	r2, r3, #29
 8006978:	d505      	bpl.n	8006986 <__sflush_r+0x46>
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	1ac0      	subs	r0, r0, r3
 800697e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006980:	b10b      	cbz	r3, 8006986 <__sflush_r+0x46>
 8006982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006984:	1ac0      	subs	r0, r0, r3
 8006986:	2300      	movs	r3, #0
 8006988:	4602      	mov	r2, r0
 800698a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800698c:	6a21      	ldr	r1, [r4, #32]
 800698e:	4628      	mov	r0, r5
 8006990:	47b0      	blx	r6
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	d106      	bne.n	80069a6 <__sflush_r+0x66>
 8006998:	6829      	ldr	r1, [r5, #0]
 800699a:	291d      	cmp	r1, #29
 800699c:	d84b      	bhi.n	8006a36 <__sflush_r+0xf6>
 800699e:	4a2b      	ldr	r2, [pc, #172]	; (8006a4c <__sflush_r+0x10c>)
 80069a0:	40ca      	lsrs	r2, r1
 80069a2:	07d6      	lsls	r6, r2, #31
 80069a4:	d547      	bpl.n	8006a36 <__sflush_r+0xf6>
 80069a6:	2200      	movs	r2, #0
 80069a8:	6062      	str	r2, [r4, #4]
 80069aa:	6922      	ldr	r2, [r4, #16]
 80069ac:	04d9      	lsls	r1, r3, #19
 80069ae:	6022      	str	r2, [r4, #0]
 80069b0:	d504      	bpl.n	80069bc <__sflush_r+0x7c>
 80069b2:	1c42      	adds	r2, r0, #1
 80069b4:	d101      	bne.n	80069ba <__sflush_r+0x7a>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	b903      	cbnz	r3, 80069bc <__sflush_r+0x7c>
 80069ba:	6560      	str	r0, [r4, #84]	; 0x54
 80069bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069be:	602f      	str	r7, [r5, #0]
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d0ca      	beq.n	800695a <__sflush_r+0x1a>
 80069c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069c8:	4299      	cmp	r1, r3
 80069ca:	d002      	beq.n	80069d2 <__sflush_r+0x92>
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 f9a5 	bl	8006d1c <_free_r>
 80069d2:	2000      	movs	r0, #0
 80069d4:	6360      	str	r0, [r4, #52]	; 0x34
 80069d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069da:	6a21      	ldr	r1, [r4, #32]
 80069dc:	2301      	movs	r3, #1
 80069de:	4628      	mov	r0, r5
 80069e0:	47b0      	blx	r6
 80069e2:	1c41      	adds	r1, r0, #1
 80069e4:	d1c6      	bne.n	8006974 <__sflush_r+0x34>
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0c3      	beq.n	8006974 <__sflush_r+0x34>
 80069ec:	2b1d      	cmp	r3, #29
 80069ee:	d001      	beq.n	80069f4 <__sflush_r+0xb4>
 80069f0:	2b16      	cmp	r3, #22
 80069f2:	d101      	bne.n	80069f8 <__sflush_r+0xb8>
 80069f4:	602f      	str	r7, [r5, #0]
 80069f6:	e7b0      	b.n	800695a <__sflush_r+0x1a>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a04:	690f      	ldr	r7, [r1, #16]
 8006a06:	2f00      	cmp	r7, #0
 8006a08:	d0a7      	beq.n	800695a <__sflush_r+0x1a>
 8006a0a:	0793      	lsls	r3, r2, #30
 8006a0c:	bf18      	it	ne
 8006a0e:	2300      	movne	r3, #0
 8006a10:	680e      	ldr	r6, [r1, #0]
 8006a12:	bf08      	it	eq
 8006a14:	694b      	ldreq	r3, [r1, #20]
 8006a16:	eba6 0807 	sub.w	r8, r6, r7
 8006a1a:	600f      	str	r7, [r1, #0]
 8006a1c:	608b      	str	r3, [r1, #8]
 8006a1e:	f1b8 0f00 	cmp.w	r8, #0
 8006a22:	dd9a      	ble.n	800695a <__sflush_r+0x1a>
 8006a24:	4643      	mov	r3, r8
 8006a26:	463a      	mov	r2, r7
 8006a28:	6a21      	ldr	r1, [r4, #32]
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a2e:	47b0      	blx	r6
 8006a30:	2800      	cmp	r0, #0
 8006a32:	dc07      	bgt.n	8006a44 <__sflush_r+0x104>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a44:	4407      	add	r7, r0
 8006a46:	eba8 0800 	sub.w	r8, r8, r0
 8006a4a:	e7e8      	b.n	8006a1e <__sflush_r+0xde>
 8006a4c:	20400001 	.word	0x20400001

08006a50 <_fflush_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	690b      	ldr	r3, [r1, #16]
 8006a54:	4605      	mov	r5, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	b1db      	cbz	r3, 8006a92 <_fflush_r+0x42>
 8006a5a:	b118      	cbz	r0, 8006a64 <_fflush_r+0x14>
 8006a5c:	6983      	ldr	r3, [r0, #24]
 8006a5e:	b90b      	cbnz	r3, 8006a64 <_fflush_r+0x14>
 8006a60:	f000 f860 	bl	8006b24 <__sinit>
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <_fflush_r+0x48>)
 8006a66:	429c      	cmp	r4, r3
 8006a68:	d109      	bne.n	8006a7e <_fflush_r+0x2e>
 8006a6a:	686c      	ldr	r4, [r5, #4]
 8006a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a70:	b17b      	cbz	r3, 8006a92 <_fflush_r+0x42>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7a:	f7ff bf61 	b.w	8006940 <__sflush_r>
 8006a7e:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <_fflush_r+0x4c>)
 8006a80:	429c      	cmp	r4, r3
 8006a82:	d101      	bne.n	8006a88 <_fflush_r+0x38>
 8006a84:	68ac      	ldr	r4, [r5, #8]
 8006a86:	e7f1      	b.n	8006a6c <_fflush_r+0x1c>
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <_fflush_r+0x50>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	bf08      	it	eq
 8006a8e:	68ec      	ldreq	r4, [r5, #12]
 8006a90:	e7ec      	b.n	8006a6c <_fflush_r+0x1c>
 8006a92:	2000      	movs	r0, #0
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
 8006a96:	bf00      	nop
 8006a98:	080074f0 	.word	0x080074f0
 8006a9c:	08007510 	.word	0x08007510
 8006aa0:	080074d0 	.word	0x080074d0

08006aa4 <_cleanup_r>:
 8006aa4:	4901      	ldr	r1, [pc, #4]	; (8006aac <_cleanup_r+0x8>)
 8006aa6:	f000 b8a9 	b.w	8006bfc <_fwalk_reent>
 8006aaa:	bf00      	nop
 8006aac:	08006a51 	.word	0x08006a51

08006ab0 <std.isra.0>:
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	6003      	str	r3, [r0, #0]
 8006ab8:	6043      	str	r3, [r0, #4]
 8006aba:	6083      	str	r3, [r0, #8]
 8006abc:	8181      	strh	r1, [r0, #12]
 8006abe:	6643      	str	r3, [r0, #100]	; 0x64
 8006ac0:	81c2      	strh	r2, [r0, #14]
 8006ac2:	6103      	str	r3, [r0, #16]
 8006ac4:	6143      	str	r3, [r0, #20]
 8006ac6:	6183      	str	r3, [r0, #24]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	2208      	movs	r2, #8
 8006acc:	305c      	adds	r0, #92	; 0x5c
 8006ace:	f7ff fb90 	bl	80061f2 <memset>
 8006ad2:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <std.isra.0+0x38>)
 8006ad4:	6224      	str	r4, [r4, #32]
 8006ad6:	6263      	str	r3, [r4, #36]	; 0x24
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <std.isra.0+0x3c>)
 8006ada:	62a3      	str	r3, [r4, #40]	; 0x28
 8006adc:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <std.isra.0+0x40>)
 8006ade:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <std.isra.0+0x44>)
 8006ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ae4:	bd10      	pop	{r4, pc}
 8006ae6:	bf00      	nop
 8006ae8:	08006f19 	.word	0x08006f19
 8006aec:	08006f3b 	.word	0x08006f3b
 8006af0:	08006f73 	.word	0x08006f73
 8006af4:	08006f97 	.word	0x08006f97

08006af8 <__sfmoreglue>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	2568      	movs	r5, #104	; 0x68
 8006afc:	1e4a      	subs	r2, r1, #1
 8006afe:	4355      	muls	r5, r2
 8006b00:	460e      	mov	r6, r1
 8006b02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b06:	f000 f955 	bl	8006db4 <_malloc_r>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	b140      	cbz	r0, 8006b20 <__sfmoreglue+0x28>
 8006b0e:	2100      	movs	r1, #0
 8006b10:	e880 0042 	stmia.w	r0, {r1, r6}
 8006b14:	300c      	adds	r0, #12
 8006b16:	60a0      	str	r0, [r4, #8]
 8006b18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b1c:	f7ff fb69 	bl	80061f2 <memset>
 8006b20:	4620      	mov	r0, r4
 8006b22:	bd70      	pop	{r4, r5, r6, pc}

08006b24 <__sinit>:
 8006b24:	6983      	ldr	r3, [r0, #24]
 8006b26:	b510      	push	{r4, lr}
 8006b28:	4604      	mov	r4, r0
 8006b2a:	bb33      	cbnz	r3, 8006b7a <__sinit+0x56>
 8006b2c:	6483      	str	r3, [r0, #72]	; 0x48
 8006b2e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006b30:	6503      	str	r3, [r0, #80]	; 0x50
 8006b32:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <__sinit+0x58>)
 8006b34:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <__sinit+0x5c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6282      	str	r2, [r0, #40]	; 0x28
 8006b3a:	4298      	cmp	r0, r3
 8006b3c:	bf04      	itt	eq
 8006b3e:	2301      	moveq	r3, #1
 8006b40:	6183      	streq	r3, [r0, #24]
 8006b42:	f000 f81f 	bl	8006b84 <__sfp>
 8006b46:	6060      	str	r0, [r4, #4]
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 f81b 	bl	8006b84 <__sfp>
 8006b4e:	60a0      	str	r0, [r4, #8]
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 f817 	bl	8006b84 <__sfp>
 8006b56:	2200      	movs	r2, #0
 8006b58:	60e0      	str	r0, [r4, #12]
 8006b5a:	2104      	movs	r1, #4
 8006b5c:	6860      	ldr	r0, [r4, #4]
 8006b5e:	f7ff ffa7 	bl	8006ab0 <std.isra.0>
 8006b62:	2201      	movs	r2, #1
 8006b64:	2109      	movs	r1, #9
 8006b66:	68a0      	ldr	r0, [r4, #8]
 8006b68:	f7ff ffa2 	bl	8006ab0 <std.isra.0>
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	2112      	movs	r1, #18
 8006b70:	68e0      	ldr	r0, [r4, #12]
 8006b72:	f7ff ff9d 	bl	8006ab0 <std.isra.0>
 8006b76:	2301      	movs	r3, #1
 8006b78:	61a3      	str	r3, [r4, #24]
 8006b7a:	bd10      	pop	{r4, pc}
 8006b7c:	08007498 	.word	0x08007498
 8006b80:	08006aa5 	.word	0x08006aa5

08006b84 <__sfp>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <__sfp+0x74>)
 8006b88:	4607      	mov	r7, r0
 8006b8a:	681e      	ldr	r6, [r3, #0]
 8006b8c:	69b3      	ldr	r3, [r6, #24]
 8006b8e:	b913      	cbnz	r3, 8006b96 <__sfp+0x12>
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff ffc7 	bl	8006b24 <__sinit>
 8006b96:	3648      	adds	r6, #72	; 0x48
 8006b98:	68b4      	ldr	r4, [r6, #8]
 8006b9a:	6873      	ldr	r3, [r6, #4]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	d503      	bpl.n	8006ba8 <__sfp+0x24>
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	b133      	cbz	r3, 8006bb2 <__sfp+0x2e>
 8006ba4:	6836      	ldr	r6, [r6, #0]
 8006ba6:	e7f7      	b.n	8006b98 <__sfp+0x14>
 8006ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bac:	b16d      	cbz	r5, 8006bca <__sfp+0x46>
 8006bae:	3468      	adds	r4, #104	; 0x68
 8006bb0:	e7f4      	b.n	8006b9c <__sfp+0x18>
 8006bb2:	2104      	movs	r1, #4
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	f7ff ff9f 	bl	8006af8 <__sfmoreglue>
 8006bba:	6030      	str	r0, [r6, #0]
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d1f1      	bne.n	8006ba4 <__sfp+0x20>
 8006bc0:	230c      	movs	r3, #12
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bce:	81e3      	strh	r3, [r4, #14]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8006bd4:	81a3      	strh	r3, [r4, #12]
 8006bd6:	6025      	str	r5, [r4, #0]
 8006bd8:	60a5      	str	r5, [r4, #8]
 8006bda:	6065      	str	r5, [r4, #4]
 8006bdc:	6125      	str	r5, [r4, #16]
 8006bde:	6165      	str	r5, [r4, #20]
 8006be0:	61a5      	str	r5, [r4, #24]
 8006be2:	2208      	movs	r2, #8
 8006be4:	4629      	mov	r1, r5
 8006be6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bea:	f7ff fb02 	bl	80061f2 <memset>
 8006bee:	6365      	str	r5, [r4, #52]	; 0x34
 8006bf0:	63a5      	str	r5, [r4, #56]	; 0x38
 8006bf2:	64a5      	str	r5, [r4, #72]	; 0x48
 8006bf4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006bf6:	e7e6      	b.n	8006bc6 <__sfp+0x42>
 8006bf8:	08007498 	.word	0x08007498

08006bfc <_fwalk_reent>:
 8006bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c00:	4680      	mov	r8, r0
 8006c02:	4689      	mov	r9, r1
 8006c04:	2600      	movs	r6, #0
 8006c06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c0a:	b914      	cbnz	r4, 8006c12 <_fwalk_reent+0x16>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c12:	68a5      	ldr	r5, [r4, #8]
 8006c14:	6867      	ldr	r7, [r4, #4]
 8006c16:	3f01      	subs	r7, #1
 8006c18:	d501      	bpl.n	8006c1e <_fwalk_reent+0x22>
 8006c1a:	6824      	ldr	r4, [r4, #0]
 8006c1c:	e7f5      	b.n	8006c0a <_fwalk_reent+0xe>
 8006c1e:	89ab      	ldrh	r3, [r5, #12]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d907      	bls.n	8006c34 <_fwalk_reent+0x38>
 8006c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	d003      	beq.n	8006c34 <_fwalk_reent+0x38>
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4640      	mov	r0, r8
 8006c30:	47c8      	blx	r9
 8006c32:	4306      	orrs	r6, r0
 8006c34:	3568      	adds	r5, #104	; 0x68
 8006c36:	e7ee      	b.n	8006c16 <_fwalk_reent+0x1a>

08006c38 <__swhatbuf_r>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c40:	b090      	sub	sp, #64	; 0x40
 8006c42:	2900      	cmp	r1, #0
 8006c44:	4614      	mov	r4, r2
 8006c46:	461d      	mov	r5, r3
 8006c48:	da07      	bge.n	8006c5a <__swhatbuf_r+0x22>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	602b      	str	r3, [r5, #0]
 8006c4e:	89b3      	ldrh	r3, [r6, #12]
 8006c50:	061a      	lsls	r2, r3, #24
 8006c52:	d410      	bmi.n	8006c76 <__swhatbuf_r+0x3e>
 8006c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c58:	e00e      	b.n	8006c78 <__swhatbuf_r+0x40>
 8006c5a:	aa01      	add	r2, sp, #4
 8006c5c:	f000 f9c2 	bl	8006fe4 <_fstat_r>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	dbf2      	blt.n	8006c4a <__swhatbuf_r+0x12>
 8006c64:	9a02      	ldr	r2, [sp, #8]
 8006c66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c6e:	425a      	negs	r2, r3
 8006c70:	415a      	adcs	r2, r3
 8006c72:	602a      	str	r2, [r5, #0]
 8006c74:	e7ee      	b.n	8006c54 <__swhatbuf_r+0x1c>
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	2000      	movs	r0, #0
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	b010      	add	sp, #64	; 0x40
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}

08006c80 <__smakebuf_r>:
 8006c80:	898b      	ldrh	r3, [r1, #12]
 8006c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c84:	079d      	lsls	r5, r3, #30
 8006c86:	4606      	mov	r6, r0
 8006c88:	460c      	mov	r4, r1
 8006c8a:	d507      	bpl.n	8006c9c <__smakebuf_r+0x1c>
 8006c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	2301      	movs	r3, #1
 8006c96:	6163      	str	r3, [r4, #20]
 8006c98:	b002      	add	sp, #8
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	ab01      	add	r3, sp, #4
 8006c9e:	466a      	mov	r2, sp
 8006ca0:	f7ff ffca 	bl	8006c38 <__swhatbuf_r>
 8006ca4:	9900      	ldr	r1, [sp, #0]
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 f883 	bl	8006db4 <_malloc_r>
 8006cae:	b948      	cbnz	r0, 8006cc4 <__smakebuf_r+0x44>
 8006cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb4:	059a      	lsls	r2, r3, #22
 8006cb6:	d4ef      	bmi.n	8006c98 <__smakebuf_r+0x18>
 8006cb8:	f023 0303 	bic.w	r3, r3, #3
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	e7e3      	b.n	8006c8c <__smakebuf_r+0xc>
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <__smakebuf_r+0x7c>)
 8006cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	6020      	str	r0, [r4, #0]
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	9b00      	ldr	r3, [sp, #0]
 8006cd4:	6120      	str	r0, [r4, #16]
 8006cd6:	6163      	str	r3, [r4, #20]
 8006cd8:	9b01      	ldr	r3, [sp, #4]
 8006cda:	b15b      	cbz	r3, 8006cf4 <__smakebuf_r+0x74>
 8006cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f000 f991 	bl	8007008 <_isatty_r>
 8006ce6:	b128      	cbz	r0, 8006cf4 <__smakebuf_r+0x74>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	431d      	orrs	r5, r3
 8006cf8:	81a5      	strh	r5, [r4, #12]
 8006cfa:	e7cd      	b.n	8006c98 <__smakebuf_r+0x18>
 8006cfc:	08006aa5 	.word	0x08006aa5

08006d00 <memchr>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	b2c9      	uxtb	r1, r1
 8006d04:	4402      	add	r2, r0
 8006d06:	4290      	cmp	r0, r2
 8006d08:	4603      	mov	r3, r0
 8006d0a:	d101      	bne.n	8006d10 <memchr+0x10>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	bd10      	pop	{r4, pc}
 8006d10:	781c      	ldrb	r4, [r3, #0]
 8006d12:	3001      	adds	r0, #1
 8006d14:	428c      	cmp	r4, r1
 8006d16:	d1f6      	bne.n	8006d06 <memchr+0x6>
 8006d18:	4618      	mov	r0, r3
 8006d1a:	bd10      	pop	{r4, pc}

08006d1c <_free_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4605      	mov	r5, r0
 8006d20:	2900      	cmp	r1, #0
 8006d22:	d043      	beq.n	8006dac <_free_r+0x90>
 8006d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d28:	1f0c      	subs	r4, r1, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bfb8      	it	lt
 8006d2e:	18e4      	addlt	r4, r4, r3
 8006d30:	f000 f98c 	bl	800704c <__malloc_lock>
 8006d34:	4a1e      	ldr	r2, [pc, #120]	; (8006db0 <_free_r+0x94>)
 8006d36:	6813      	ldr	r3, [r2, #0]
 8006d38:	4610      	mov	r0, r2
 8006d3a:	b933      	cbnz	r3, 8006d4a <_free_r+0x2e>
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	6014      	str	r4, [r2, #0]
 8006d40:	4628      	mov	r0, r5
 8006d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d46:	f000 b982 	b.w	800704e <__malloc_unlock>
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	d90b      	bls.n	8006d66 <_free_r+0x4a>
 8006d4e:	6821      	ldr	r1, [r4, #0]
 8006d50:	1862      	adds	r2, r4, r1
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bf01      	itttt	eq
 8006d56:	681a      	ldreq	r2, [r3, #0]
 8006d58:	685b      	ldreq	r3, [r3, #4]
 8006d5a:	1852      	addeq	r2, r2, r1
 8006d5c:	6022      	streq	r2, [r4, #0]
 8006d5e:	6063      	str	r3, [r4, #4]
 8006d60:	6004      	str	r4, [r0, #0]
 8006d62:	e7ed      	b.n	8006d40 <_free_r+0x24>
 8006d64:	4613      	mov	r3, r2
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	b10a      	cbz	r2, 8006d6e <_free_r+0x52>
 8006d6a:	42a2      	cmp	r2, r4
 8006d6c:	d9fa      	bls.n	8006d64 <_free_r+0x48>
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	1858      	adds	r0, r3, r1
 8006d72:	42a0      	cmp	r0, r4
 8006d74:	d10b      	bne.n	8006d8e <_free_r+0x72>
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	4401      	add	r1, r0
 8006d7a:	1858      	adds	r0, r3, r1
 8006d7c:	4282      	cmp	r2, r0
 8006d7e:	6019      	str	r1, [r3, #0]
 8006d80:	d1de      	bne.n	8006d40 <_free_r+0x24>
 8006d82:	6810      	ldr	r0, [r2, #0]
 8006d84:	6852      	ldr	r2, [r2, #4]
 8006d86:	4401      	add	r1, r0
 8006d88:	6019      	str	r1, [r3, #0]
 8006d8a:	605a      	str	r2, [r3, #4]
 8006d8c:	e7d8      	b.n	8006d40 <_free_r+0x24>
 8006d8e:	d902      	bls.n	8006d96 <_free_r+0x7a>
 8006d90:	230c      	movs	r3, #12
 8006d92:	602b      	str	r3, [r5, #0]
 8006d94:	e7d4      	b.n	8006d40 <_free_r+0x24>
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	1821      	adds	r1, r4, r0
 8006d9a:	428a      	cmp	r2, r1
 8006d9c:	bf01      	itttt	eq
 8006d9e:	6811      	ldreq	r1, [r2, #0]
 8006da0:	6852      	ldreq	r2, [r2, #4]
 8006da2:	1809      	addeq	r1, r1, r0
 8006da4:	6021      	streq	r1, [r4, #0]
 8006da6:	6062      	str	r2, [r4, #4]
 8006da8:	605c      	str	r4, [r3, #4]
 8006daa:	e7c9      	b.n	8006d40 <_free_r+0x24>
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
 8006dae:	bf00      	nop
 8006db0:	200053d8 	.word	0x200053d8

08006db4 <_malloc_r>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	1ccd      	adds	r5, r1, #3
 8006db8:	f025 0503 	bic.w	r5, r5, #3
 8006dbc:	3508      	adds	r5, #8
 8006dbe:	2d0c      	cmp	r5, #12
 8006dc0:	bf38      	it	cc
 8006dc2:	250c      	movcc	r5, #12
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	db01      	blt.n	8006dce <_malloc_r+0x1a>
 8006dca:	42a9      	cmp	r1, r5
 8006dcc:	d903      	bls.n	8006dd6 <_malloc_r+0x22>
 8006dce:	230c      	movs	r3, #12
 8006dd0:	6033      	str	r3, [r6, #0]
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	f000 f939 	bl	800704c <__malloc_lock>
 8006dda:	4a23      	ldr	r2, [pc, #140]	; (8006e68 <_malloc_r+0xb4>)
 8006ddc:	6814      	ldr	r4, [r2, #0]
 8006dde:	4621      	mov	r1, r4
 8006de0:	b991      	cbnz	r1, 8006e08 <_malloc_r+0x54>
 8006de2:	4c22      	ldr	r4, [pc, #136]	; (8006e6c <_malloc_r+0xb8>)
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	b91b      	cbnz	r3, 8006df0 <_malloc_r+0x3c>
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f841 	bl	8006e70 <_sbrk_r>
 8006dee:	6020      	str	r0, [r4, #0]
 8006df0:	4629      	mov	r1, r5
 8006df2:	4630      	mov	r0, r6
 8006df4:	f000 f83c 	bl	8006e70 <_sbrk_r>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d126      	bne.n	8006e4a <_malloc_r+0x96>
 8006dfc:	230c      	movs	r3, #12
 8006dfe:	4630      	mov	r0, r6
 8006e00:	6033      	str	r3, [r6, #0]
 8006e02:	f000 f924 	bl	800704e <__malloc_unlock>
 8006e06:	e7e4      	b.n	8006dd2 <_malloc_r+0x1e>
 8006e08:	680b      	ldr	r3, [r1, #0]
 8006e0a:	1b5b      	subs	r3, r3, r5
 8006e0c:	d41a      	bmi.n	8006e44 <_malloc_r+0x90>
 8006e0e:	2b0b      	cmp	r3, #11
 8006e10:	d90f      	bls.n	8006e32 <_malloc_r+0x7e>
 8006e12:	600b      	str	r3, [r1, #0]
 8006e14:	18cc      	adds	r4, r1, r3
 8006e16:	50cd      	str	r5, [r1, r3]
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f000 f918 	bl	800704e <__malloc_unlock>
 8006e1e:	f104 000b 	add.w	r0, r4, #11
 8006e22:	1d23      	adds	r3, r4, #4
 8006e24:	f020 0007 	bic.w	r0, r0, #7
 8006e28:	1ac3      	subs	r3, r0, r3
 8006e2a:	d01b      	beq.n	8006e64 <_malloc_r+0xb0>
 8006e2c:	425a      	negs	r2, r3
 8006e2e:	50e2      	str	r2, [r4, r3]
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	428c      	cmp	r4, r1
 8006e34:	bf0b      	itete	eq
 8006e36:	6863      	ldreq	r3, [r4, #4]
 8006e38:	684b      	ldrne	r3, [r1, #4]
 8006e3a:	6013      	streq	r3, [r2, #0]
 8006e3c:	6063      	strne	r3, [r4, #4]
 8006e3e:	bf18      	it	ne
 8006e40:	460c      	movne	r4, r1
 8006e42:	e7e9      	b.n	8006e18 <_malloc_r+0x64>
 8006e44:	460c      	mov	r4, r1
 8006e46:	6849      	ldr	r1, [r1, #4]
 8006e48:	e7ca      	b.n	8006de0 <_malloc_r+0x2c>
 8006e4a:	1cc4      	adds	r4, r0, #3
 8006e4c:	f024 0403 	bic.w	r4, r4, #3
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d005      	beq.n	8006e60 <_malloc_r+0xac>
 8006e54:	1a21      	subs	r1, r4, r0
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 f80a 	bl	8006e70 <_sbrk_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d0cd      	beq.n	8006dfc <_malloc_r+0x48>
 8006e60:	6025      	str	r5, [r4, #0]
 8006e62:	e7d9      	b.n	8006e18 <_malloc_r+0x64>
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	bf00      	nop
 8006e68:	200053d8 	.word	0x200053d8
 8006e6c:	200053dc 	.word	0x200053dc

08006e70 <_sbrk_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	2300      	movs	r3, #0
 8006e74:	4c05      	ldr	r4, [pc, #20]	; (8006e8c <_sbrk_r+0x1c>)
 8006e76:	4605      	mov	r5, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	6023      	str	r3, [r4, #0]
 8006e7c:	f7fe ffa6 	bl	8005dcc <_sbrk>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_sbrk_r+0x1a>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_sbrk_r+0x1a>
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20005614 	.word	0x20005614

08006e90 <_raise_r>:
 8006e90:	291f      	cmp	r1, #31
 8006e92:	b538      	push	{r3, r4, r5, lr}
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
 8006e98:	d904      	bls.n	8006ea4 <_raise_r+0x14>
 8006e9a:	2316      	movs	r3, #22
 8006e9c:	6003      	str	r3, [r0, #0]
 8006e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ea6:	b112      	cbz	r2, 8006eae <_raise_r+0x1e>
 8006ea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eac:	b94b      	cbnz	r3, 8006ec2 <_raise_r+0x32>
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 f830 	bl	8006f14 <_getpid_r>
 8006eb4:	462a      	mov	r2, r5
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	4620      	mov	r0, r4
 8006eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ebe:	f000 b817 	b.w	8006ef0 <_kill_r>
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d00a      	beq.n	8006edc <_raise_r+0x4c>
 8006ec6:	1c59      	adds	r1, r3, #1
 8006ec8:	d103      	bne.n	8006ed2 <_raise_r+0x42>
 8006eca:	2316      	movs	r3, #22
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	2001      	movs	r0, #1
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
 8006ed2:	2400      	movs	r4, #0
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006eda:	4798      	blx	r3
 8006edc:	2000      	movs	r0, #0
 8006ede:	bd38      	pop	{r3, r4, r5, pc}

08006ee0 <raise>:
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <raise+0xc>)
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	f7ff bfd3 	b.w	8006e90 <_raise_r>
 8006eea:	bf00      	nop
 8006eec:	200000a4 	.word	0x200000a4

08006ef0 <_kill_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4c06      	ldr	r4, [pc, #24]	; (8006f10 <_kill_r+0x20>)
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	4611      	mov	r1, r2
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	f7fe ff3b 	bl	8005d78 <_kill>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d102      	bne.n	8006f0c <_kill_r+0x1c>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	b103      	cbz	r3, 8006f0c <_kill_r+0x1c>
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	bf00      	nop
 8006f10:	20005614 	.word	0x20005614

08006f14 <_getpid_r>:
 8006f14:	f7fe bf2e 	b.w	8005d74 <_getpid>

08006f18 <__sread>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	f000 f896 	bl	8007050 <_read_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	bfab      	itete	ge
 8006f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f2c:	181b      	addge	r3, r3, r0
 8006f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f32:	bfac      	ite	ge
 8006f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f36:	81a3      	strhlt	r3, [r4, #12]
 8006f38:	bd10      	pop	{r4, pc}

08006f3a <__swrite>:
 8006f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	461f      	mov	r7, r3
 8006f40:	898b      	ldrh	r3, [r1, #12]
 8006f42:	4605      	mov	r5, r0
 8006f44:	05db      	lsls	r3, r3, #23
 8006f46:	460c      	mov	r4, r1
 8006f48:	4616      	mov	r6, r2
 8006f4a:	d505      	bpl.n	8006f58 <__swrite+0x1e>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f54:	f000 f868 	bl	8007028 <_lseek_r>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	4632      	mov	r2, r6
 8006f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f66:	463b      	mov	r3, r7
 8006f68:	4628      	mov	r0, r5
 8006f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6e:	f000 b817 	b.w	8006fa0 <_write_r>

08006f72 <__sseek>:
 8006f72:	b510      	push	{r4, lr}
 8006f74:	460c      	mov	r4, r1
 8006f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7a:	f000 f855 	bl	8007028 <_lseek_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	bf15      	itete	ne
 8006f84:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f8e:	81a3      	strheq	r3, [r4, #12]
 8006f90:	bf18      	it	ne
 8006f92:	81a3      	strhne	r3, [r4, #12]
 8006f94:	bd10      	pop	{r4, pc}

08006f96 <__sclose>:
 8006f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9a:	f000 b813 	b.w	8006fc4 <_close_r>
	...

08006fa0 <_write_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4c05      	ldr	r4, [pc, #20]	; (8006fc0 <_write_r+0x20>)
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f7fe fefe 	bl	8005db0 <_write>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_write_r+0x1e>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_write_r+0x1e>
 8006fbc:	602b      	str	r3, [r5, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20005614 	.word	0x20005614

08006fc4 <_close_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4c05      	ldr	r4, [pc, #20]	; (8006fe0 <_close_r+0x1c>)
 8006fca:	4605      	mov	r5, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	f7fe ff16 	bl	8005e00 <_close>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_close_r+0x1a>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_close_r+0x1a>
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20005614 	.word	0x20005614

08006fe4 <_fstat_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4c06      	ldr	r4, [pc, #24]	; (8007004 <_fstat_r+0x20>)
 8006fea:	4605      	mov	r5, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	f7fe ff08 	bl	8005e06 <_fstat>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d102      	bne.n	8007000 <_fstat_r+0x1c>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	b103      	cbz	r3, 8007000 <_fstat_r+0x1c>
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	bf00      	nop
 8007004:	20005614 	.word	0x20005614

08007008 <_isatty_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	2300      	movs	r3, #0
 800700c:	4c05      	ldr	r4, [pc, #20]	; (8007024 <_isatty_r+0x1c>)
 800700e:	4605      	mov	r5, r0
 8007010:	4608      	mov	r0, r1
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	f7fe fefc 	bl	8005e10 <_isatty>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_isatty_r+0x1a>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	b103      	cbz	r3, 8007022 <_isatty_r+0x1a>
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20005614 	.word	0x20005614

08007028 <_lseek_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4605      	mov	r5, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	2200      	movs	r2, #0
 8007032:	4c05      	ldr	r4, [pc, #20]	; (8007048 <_lseek_r+0x20>)
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f7fe feec 	bl	8005e14 <_lseek>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_lseek_r+0x1e>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	b103      	cbz	r3, 8007046 <_lseek_r+0x1e>
 8007044:	602b      	str	r3, [r5, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20005614 	.word	0x20005614

0800704c <__malloc_lock>:
 800704c:	4770      	bx	lr

0800704e <__malloc_unlock>:
 800704e:	4770      	bx	lr

08007050 <_read_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	2200      	movs	r2, #0
 800705a:	4c05      	ldr	r4, [pc, #20]	; (8007070 <_read_r+0x20>)
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f7fe fe98 	bl	8005d94 <_read>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_read_r+0x1e>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	b103      	cbz	r3, 800706e <_read_r+0x1e>
 800706c:	602b      	str	r3, [r5, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20005614 	.word	0x20005614

08007074 <_init>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

08007080 <_fini>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr
